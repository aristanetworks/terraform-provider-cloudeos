// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: arista/clouddeploy.v1/services.gen.proto

package clouddeploy_v1

import (
	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AWSTgwRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AWSTgw instance to retrieve.
	// This value must be populated.
	Key *AWSTgwKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwRequest) Reset() {
	*x = AWSTgwRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwRequest) ProtoMessage() {}

func (x *AWSTgwRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwRequest.ProtoReflect.Descriptor instead.
func (*AWSTgwRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *AWSTgwRequest) GetKey() *AWSTgwKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSTgwRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AWSTgw `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AWSTgw instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwResponse) Reset() {
	*x = AWSTgwResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwResponse) ProtoMessage() {}

func (x *AWSTgwResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwResponse.ProtoReflect.Descriptor instead.
func (*AWSTgwResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AWSTgwResponse) GetValue() *AWSTgw {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSTgwResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AWSTgw `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AWSTgw at end.
	//   - Each AWSTgw response is fully-specified (all fields set).
	//   - start: Returns the state of each AWSTgw at start, followed by updates until now.
	//   - Each AWSTgw response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AWSTgw at start, followed by updates
	//     until end.
	//   - Each AWSTgw response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwStreamRequest) Reset() {
	*x = AWSTgwStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwStreamRequest) ProtoMessage() {}

func (x *AWSTgwStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwStreamRequest.ProtoReflect.Descriptor instead.
func (*AWSTgwStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *AWSTgwStreamRequest) GetPartialEqFilter() []*AWSTgw {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AWSTgwStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AWSTgw `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AWSTgw's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AWSTgw value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AWSTgwStreamResponse) Reset() {
	*x = AWSTgwStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwStreamResponse) ProtoMessage() {}

func (x *AWSTgwStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwStreamResponse.ProtoReflect.Descriptor instead.
func (*AWSTgwStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *AWSTgwStreamResponse) GetValue() *AWSTgw {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSTgwStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AWSTgwStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AWSTgwAttachmentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AWSTgwAttachment instance to retrieve.
	// This value must be populated.
	Key *AWSTgwAttachmentKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwAttachmentRequest) Reset() {
	*x = AWSTgwAttachmentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachmentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachmentRequest) ProtoMessage() {}

func (x *AWSTgwAttachmentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachmentRequest.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachmentRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *AWSTgwAttachmentRequest) GetKey() *AWSTgwAttachmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSTgwAttachmentRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwAttachmentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AWSTgwAttachment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AWSTgwAttachment instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwAttachmentResponse) Reset() {
	*x = AWSTgwAttachmentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachmentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachmentResponse) ProtoMessage() {}

func (x *AWSTgwAttachmentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachmentResponse.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachmentResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *AWSTgwAttachmentResponse) GetValue() *AWSTgwAttachment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSTgwAttachmentResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwAttachmentStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AWSTgwAttachment `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AWSTgwAttachment at end.
	//   - Each AWSTgwAttachment response is fully-specified (all fields set).
	//   - start: Returns the state of each AWSTgwAttachment at start, followed by updates until now.
	//   - Each AWSTgwAttachment response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AWSTgwAttachment at start, followed by updates
	//     until end.
	//   - Each AWSTgwAttachment response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSTgwAttachmentStreamRequest) Reset() {
	*x = AWSTgwAttachmentStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachmentStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachmentStreamRequest) ProtoMessage() {}

func (x *AWSTgwAttachmentStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachmentStreamRequest.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachmentStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *AWSTgwAttachmentStreamRequest) GetPartialEqFilter() []*AWSTgwAttachment {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AWSTgwAttachmentStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSTgwAttachmentStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AWSTgwAttachment `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AWSTgwAttachment's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AWSTgwAttachment value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AWSTgwAttachmentStreamResponse) Reset() {
	*x = AWSTgwAttachmentStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachmentStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachmentStreamResponse) ProtoMessage() {}

func (x *AWSTgwAttachmentStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachmentStreamResponse.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachmentStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *AWSTgwAttachmentStreamResponse) GetValue() *AWSTgwAttachment {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSTgwAttachmentStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AWSTgwAttachmentStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AWSVpnConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AWSVpnConfig instance to retrieve.
	// This value must be populated.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigRequest) Reset() {
	*x = AWSVpnConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigRequest) ProtoMessage() {}

func (x *AWSVpnConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{8}
}

func (x *AWSVpnConfigRequest) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AWSVpnConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigResponse) Reset() {
	*x = AWSVpnConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigResponse) ProtoMessage() {}

func (x *AWSVpnConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{9}
}

func (x *AWSVpnConfigResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AWSVpnConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each AWSVpnConfig at end.
	//   - Each AWSVpnConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each AWSVpnConfig at start, followed by updates until now.
	//   - Each AWSVpnConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each AWSVpnConfig at start, followed by updates
	//     until end.
	//   - Each AWSVpnConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigStreamRequest) Reset() {
	*x = AWSVpnConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigStreamRequest) ProtoMessage() {}

func (x *AWSVpnConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{10}
}

func (x *AWSVpnConfigStreamRequest) GetPartialEqFilter() []*AWSVpnConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AWSVpnConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AWSVpnConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AWSVpnConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AWSVpnConfigStreamResponse) Reset() {
	*x = AWSVpnConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigStreamResponse) ProtoMessage() {}

func (x *AWSVpnConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{11}
}

func (x *AWSVpnConfigStreamResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AWSVpnConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type AWSVpnConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWSVpnConfig carries the value to set into the datastore.
	// See the documentation on the AWSVpnConfig struct for which fields are required.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AWSVpnConfigSetRequest) Reset() {
	*x = AWSVpnConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetRequest) ProtoMessage() {}

func (x *AWSVpnConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{12}
}

func (x *AWSVpnConfigSetRequest) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AWSVpnConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AWSVpnConfigSetRequest as well
	// as any server-generated values.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigSetResponse) Reset() {
	*x = AWSVpnConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetResponse) ProtoMessage() {}

func (x *AWSVpnConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{13}
}

func (x *AWSVpnConfigSetResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of AWSVpnConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*AWSVpnConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *AWSVpnConfigSetSomeRequest) Reset() {
	*x = AWSVpnConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetSomeRequest) ProtoMessage() {}

func (x *AWSVpnConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{14}
}

func (x *AWSVpnConfigSetSomeRequest) GetValues() []*AWSVpnConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type AWSVpnConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *AWSVpnConfigSetSomeResponse) Reset() {
	*x = AWSVpnConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetSomeResponse) ProtoMessage() {}

func (x *AWSVpnConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{15}
}

func (x *AWSVpnConfigSetSomeResponse) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type AWSVpnConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AWSVpnConfig instance to remove.
	// This field must always be set.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AWSVpnConfigDeleteRequest) Reset() {
	*x = AWSVpnConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteRequest) ProtoMessage() {}

func (x *AWSVpnConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{16}
}

func (x *AWSVpnConfigDeleteRequest) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AWSVpnConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AWSVpnConfig instance.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigDeleteResponse) Reset() {
	*x = AWSVpnConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteResponse) ProtoMessage() {}

func (x *AWSVpnConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{17}
}

func (x *AWSVpnConfigDeleteResponse) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AWSVpnConfigDeleteAllRequest) Reset() {
	*x = AWSVpnConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteAllRequest) ProtoMessage() {}

func (x *AWSVpnConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{18}
}

type AWSVpnConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the AWSVpnConfig instance that failed to be deleted.
	Key *AWSVpnKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigDeleteAllResponse) Reset() {
	*x = AWSVpnConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteAllResponse) ProtoMessage() {}

func (x *AWSVpnConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{19}
}

func (x *AWSVpnConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *AWSVpnConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AWSVpnConfigDeleteAllResponse) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type PathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a Path instance to retrieve.
	// This value must be populated.
	Key *PathKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *PathRequest) Reset() {
	*x = PathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathRequest) ProtoMessage() {}

func (x *PathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathRequest.ProtoReflect.Descriptor instead.
func (*PathRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{20}
}

func (x *PathRequest) GetKey() *PathKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *PathRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type PathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *Path `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// Path instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *PathResponse) Reset() {
	*x = PathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathResponse) ProtoMessage() {}

func (x *PathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathResponse.ProtoReflect.Descriptor instead.
func (*PathResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{21}
}

func (x *PathResponse) GetValue() *Path {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PathResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type PathStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*Path `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each Path at end.
	//   - Each Path response is fully-specified (all fields set).
	//   - start: Returns the state of each Path at start, followed by updates until now.
	//   - Each Path response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each Path at start, followed by updates
	//     until end.
	//   - Each Path response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *PathStreamRequest) Reset() {
	*x = PathStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathStreamRequest) ProtoMessage() {}

func (x *PathStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathStreamRequest.ProtoReflect.Descriptor instead.
func (*PathStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{22}
}

func (x *PathStreamRequest) GetPartialEqFilter() []*Path {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *PathStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type PathStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *Path `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this Path's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the Path value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *PathStreamResponse) Reset() {
	*x = PathStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathStreamResponse) ProtoMessage() {}

func (x *PathStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathStreamResponse.ProtoReflect.Descriptor instead.
func (*PathStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{23}
}

func (x *PathStreamResponse) GetValue() *Path {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *PathStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *PathStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RouterConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a RouterConfig instance to retrieve.
	// This value must be populated.
	Key *RouterKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigRequest) Reset() {
	*x = RouterConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigRequest) ProtoMessage() {}

func (x *RouterConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{24}
}

func (x *RouterConfigRequest) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouterConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RouterConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *RouterConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// RouterConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigResponse) Reset() {
	*x = RouterConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigResponse) ProtoMessage() {}

func (x *RouterConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{25}
}

func (x *RouterConfigResponse) GetValue() *RouterConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RouterConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RouterConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*RouterConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each RouterConfig at end.
	//   - Each RouterConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each RouterConfig at start, followed by updates until now.
	//   - Each RouterConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each RouterConfig at start, followed by updates
	//     until end.
	//   - Each RouterConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigStreamRequest) Reset() {
	*x = RouterConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigStreamRequest) ProtoMessage() {}

func (x *RouterConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{26}
}

func (x *RouterConfigStreamRequest) GetPartialEqFilter() []*RouterConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *RouterConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type RouterConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *RouterConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this RouterConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the RouterConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *RouterConfigStreamResponse) Reset() {
	*x = RouterConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigStreamResponse) ProtoMessage() {}

func (x *RouterConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{27}
}

func (x *RouterConfigStreamResponse) GetValue() *RouterConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RouterConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *RouterConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type RouterConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RouterConfig carries the value to set into the datastore.
	// See the documentation on the RouterConfig struct for which fields are required.
	Value *RouterConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *RouterConfigSetRequest) Reset() {
	*x = RouterConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigSetRequest) ProtoMessage() {}

func (x *RouterConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigSetRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{28}
}

func (x *RouterConfigSetRequest) GetValue() *RouterConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type RouterConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the RouterConfigSetRequest as well
	// as any server-generated values.
	Value *RouterConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigSetResponse) Reset() {
	*x = RouterConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigSetResponse) ProtoMessage() {}

func (x *RouterConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigSetResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{29}
}

func (x *RouterConfigSetResponse) GetValue() *RouterConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RouterConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RouterConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of RouterConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*RouterConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RouterConfigSetSomeRequest) Reset() {
	*x = RouterConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigSetSomeRequest) ProtoMessage() {}

func (x *RouterConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{30}
}

func (x *RouterConfigSetSomeRequest) GetValues() []*RouterConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type RouterConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *RouterKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *RouterConfigSetSomeResponse) Reset() {
	*x = RouterConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigSetSomeResponse) ProtoMessage() {}

func (x *RouterConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{31}
}

func (x *RouterConfigSetSomeResponse) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouterConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type RouterConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which RouterConfig instance to remove.
	// This field must always be set.
	Key *RouterKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *RouterConfigDeleteRequest) Reset() {
	*x = RouterConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigDeleteRequest) ProtoMessage() {}

func (x *RouterConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{32}
}

func (x *RouterConfigDeleteRequest) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type RouterConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted RouterConfig instance.
	Key *RouterKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigDeleteResponse) Reset() {
	*x = RouterConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigDeleteResponse) ProtoMessage() {}

func (x *RouterConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{33}
}

func (x *RouterConfigDeleteResponse) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouterConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type RouterConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RouterConfigDeleteAllRequest) Reset() {
	*x = RouterConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigDeleteAllRequest) ProtoMessage() {}

func (x *RouterConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*RouterConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{34}
}

type RouterConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the RouterConfig instance that failed to be deleted.
	Key *RouterKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *RouterConfigDeleteAllResponse) Reset() {
	*x = RouterConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfigDeleteAllResponse) ProtoMessage() {}

func (x *RouterConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*RouterConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{35}
}

func (x *RouterConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *RouterConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RouterConfigDeleteAllResponse) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouterConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a SubnetConfig instance to retrieve.
	// This value must be populated.
	Key *SubnetKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigRequest) Reset() {
	*x = SubnetConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigRequest) ProtoMessage() {}

func (x *SubnetConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{36}
}

func (x *SubnetConfigRequest) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubnetConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *SubnetConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// SubnetConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigResponse) Reset() {
	*x = SubnetConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigResponse) ProtoMessage() {}

func (x *SubnetConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{37}
}

func (x *SubnetConfigResponse) GetValue() *SubnetConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SubnetConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*SubnetConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each SubnetConfig at end.
	//   - Each SubnetConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each SubnetConfig at start, followed by updates until now.
	//   - Each SubnetConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each SubnetConfig at start, followed by updates
	//     until end.
	//   - Each SubnetConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigStreamRequest) Reset() {
	*x = SubnetConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigStreamRequest) ProtoMessage() {}

func (x *SubnetConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{38}
}

func (x *SubnetConfigStreamRequest) GetPartialEqFilter() []*SubnetConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *SubnetConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *SubnetConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this SubnetConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the SubnetConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *SubnetConfigStreamResponse) Reset() {
	*x = SubnetConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigStreamResponse) ProtoMessage() {}

func (x *SubnetConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{39}
}

func (x *SubnetConfigStreamResponse) GetValue() *SubnetConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SubnetConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *SubnetConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type SubnetConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SubnetConfig carries the value to set into the datastore.
	// See the documentation on the SubnetConfig struct for which fields are required.
	Value *SubnetConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *SubnetConfigSetRequest) Reset() {
	*x = SubnetConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigSetRequest) ProtoMessage() {}

func (x *SubnetConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigSetRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{40}
}

func (x *SubnetConfigSetRequest) GetValue() *SubnetConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type SubnetConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the SubnetConfigSetRequest as well
	// as any server-generated values.
	Value *SubnetConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigSetResponse) Reset() {
	*x = SubnetConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigSetResponse) ProtoMessage() {}

func (x *SubnetConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigSetResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{41}
}

func (x *SubnetConfigSetResponse) GetValue() *SubnetConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SubnetConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of SubnetConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*SubnetConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *SubnetConfigSetSomeRequest) Reset() {
	*x = SubnetConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigSetSomeRequest) ProtoMessage() {}

func (x *SubnetConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{42}
}

func (x *SubnetConfigSetSomeRequest) GetValues() []*SubnetConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type SubnetConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *SubnetKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string     `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SubnetConfigSetSomeResponse) Reset() {
	*x = SubnetConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigSetSomeResponse) ProtoMessage() {}

func (x *SubnetConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{43}
}

func (x *SubnetConfigSetSomeResponse) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubnetConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SubnetConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which SubnetConfig instance to remove.
	// This field must always be set.
	Key *SubnetKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *SubnetConfigDeleteRequest) Reset() {
	*x = SubnetConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigDeleteRequest) ProtoMessage() {}

func (x *SubnetConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{44}
}

func (x *SubnetConfigDeleteRequest) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type SubnetConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted SubnetConfig instance.
	Key *SubnetKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigDeleteResponse) Reset() {
	*x = SubnetConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigDeleteResponse) ProtoMessage() {}

func (x *SubnetConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{45}
}

func (x *SubnetConfigDeleteResponse) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubnetConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type SubnetConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SubnetConfigDeleteAllRequest) Reset() {
	*x = SubnetConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigDeleteAllRequest) ProtoMessage() {}

func (x *SubnetConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*SubnetConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{46}
}

type SubnetConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the SubnetConfig instance that failed to be deleted.
	Key *SubnetKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *SubnetConfigDeleteAllResponse) Reset() {
	*x = SubnetConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfigDeleteAllResponse) ProtoMessage() {}

func (x *SubnetConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*SubnetConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{47}
}

func (x *SubnetConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *SubnetConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SubnetConfigDeleteAllResponse) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubnetConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a TopologyInfoConfig instance to retrieve.
	// This value must be populated.
	Key *TopologyInfoKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigRequest) Reset() {
	*x = TopologyInfoConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigRequest) ProtoMessage() {}

func (x *TopologyInfoConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{48}
}

func (x *TopologyInfoConfigRequest) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInfoConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *TopologyInfoConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// TopologyInfoConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigResponse) Reset() {
	*x = TopologyInfoConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigResponse) ProtoMessage() {}

func (x *TopologyInfoConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{49}
}

func (x *TopologyInfoConfigResponse) GetValue() *TopologyInfoConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInfoConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*TopologyInfoConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each TopologyInfoConfig at end.
	//   - Each TopologyInfoConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each TopologyInfoConfig at start, followed by updates until now.
	//   - Each TopologyInfoConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each TopologyInfoConfig at start, followed by updates
	//     until end.
	//   - Each TopologyInfoConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigStreamRequest) Reset() {
	*x = TopologyInfoConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigStreamRequest) ProtoMessage() {}

func (x *TopologyInfoConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{50}
}

func (x *TopologyInfoConfigStreamRequest) GetPartialEqFilter() []*TopologyInfoConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *TopologyInfoConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *TopologyInfoConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this TopologyInfoConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the TopologyInfoConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *TopologyInfoConfigStreamResponse) Reset() {
	*x = TopologyInfoConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigStreamResponse) ProtoMessage() {}

func (x *TopologyInfoConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{51}
}

func (x *TopologyInfoConfigStreamResponse) GetValue() *TopologyInfoConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInfoConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *TopologyInfoConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type TopologyInfoConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TopologyInfoConfig carries the value to set into the datastore.
	// See the documentation on the TopologyInfoConfig struct for which fields are required.
	Value *TopologyInfoConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TopologyInfoConfigSetRequest) Reset() {
	*x = TopologyInfoConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigSetRequest) ProtoMessage() {}

func (x *TopologyInfoConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigSetRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{52}
}

func (x *TopologyInfoConfigSetRequest) GetValue() *TopologyInfoConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type TopologyInfoConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the TopologyInfoConfigSetRequest as well
	// as any server-generated values.
	Value *TopologyInfoConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigSetResponse) Reset() {
	*x = TopologyInfoConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigSetResponse) ProtoMessage() {}

func (x *TopologyInfoConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigSetResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{53}
}

func (x *TopologyInfoConfigSetResponse) GetValue() *TopologyInfoConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *TopologyInfoConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of TopologyInfoConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*TopologyInfoConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TopologyInfoConfigSetSomeRequest) Reset() {
	*x = TopologyInfoConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigSetSomeRequest) ProtoMessage() {}

func (x *TopologyInfoConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{54}
}

func (x *TopologyInfoConfigSetSomeRequest) GetValues() []*TopologyInfoConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type TopologyInfoConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *TopologyInfoKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string           `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TopologyInfoConfigSetSomeResponse) Reset() {
	*x = TopologyInfoConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigSetSomeResponse) ProtoMessage() {}

func (x *TopologyInfoConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{55}
}

func (x *TopologyInfoConfigSetSomeResponse) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInfoConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TopologyInfoConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which TopologyInfoConfig instance to remove.
	// This field must always be set.
	Key *TopologyInfoKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TopologyInfoConfigDeleteRequest) Reset() {
	*x = TopologyInfoConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigDeleteRequest) ProtoMessage() {}

func (x *TopologyInfoConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{56}
}

func (x *TopologyInfoConfigDeleteRequest) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type TopologyInfoConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted TopologyInfoConfig instance.
	Key *TopologyInfoKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigDeleteResponse) Reset() {
	*x = TopologyInfoConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigDeleteResponse) ProtoMessage() {}

func (x *TopologyInfoConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{57}
}

func (x *TopologyInfoConfigDeleteResponse) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInfoConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type TopologyInfoConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TopologyInfoConfigDeleteAllRequest) Reset() {
	*x = TopologyInfoConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigDeleteAllRequest) ProtoMessage() {}

func (x *TopologyInfoConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{58}
}

type TopologyInfoConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the TopologyInfoConfig instance that failed to be deleted.
	Key *TopologyInfoKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TopologyInfoConfigDeleteAllResponse) Reset() {
	*x = TopologyInfoConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfigDeleteAllResponse) ProtoMessage() {}

func (x *TopologyInfoConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{59}
}

func (x *TopologyInfoConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *TopologyInfoConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TopologyInfoConfigDeleteAllResponse) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInfoConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a VpcConfig instance to retrieve.
	// This value must be populated.
	Key *VpcKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at which it makes the request.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigRequest) Reset() {
	*x = VpcConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigRequest) ProtoMessage() {}

func (x *VpcConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{60}
}

func (x *VpcConfigRequest) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VpcConfigRequest) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *VpcConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// VpcConfig instance in this response.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigResponse) Reset() {
	*x = VpcConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigResponse) ProtoMessage() {}

func (x *VpcConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{61}
}

func (x *VpcConfigResponse) GetValue() *VpcConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VpcConfigResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*VpcConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// For GetAll, the fields start and end can be used as follows:
	//
	//   - end: Returns the state of each VpcConfig at end.
	//   - Each VpcConfig response is fully-specified (all fields set).
	//   - start: Returns the state of each VpcConfig at start, followed by updates until now.
	//   - Each VpcConfig response at start is fully-specified, but updates may be partial.
	//   - start and end: Returns the state of each VpcConfig at start, followed by updates
	//     until end.
	//   - Each VpcConfig response at start is fully-specified, but updates until end may
	//     be partial.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigStreamRequest) Reset() {
	*x = VpcConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigStreamRequest) ProtoMessage() {}

func (x *VpcConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{62}
}

func (x *VpcConfigStreamRequest) GetPartialEqFilter() []*VpcConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *VpcConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *VpcConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this VpcConfig's last modification.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the VpcConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *VpcConfigStreamResponse) Reset() {
	*x = VpcConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigStreamResponse) ProtoMessage() {}

func (x *VpcConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{63}
}

func (x *VpcConfigStreamResponse) GetValue() *VpcConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VpcConfigStreamResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *VpcConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation(0)
}

type VpcConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// VpcConfig carries the value to set into the datastore.
	// See the documentation on the VpcConfig struct for which fields are required.
	Value *VpcConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *VpcConfigSetRequest) Reset() {
	*x = VpcConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigSetRequest) ProtoMessage() {}

func (x *VpcConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigSetRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{64}
}

func (x *VpcConfigSetRequest) GetValue() *VpcConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type VpcConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the VpcConfigSetRequest as well
	// as any server-generated values.
	Value *VpcConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==CreatedAt will include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigSetResponse) Reset() {
	*x = VpcConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigSetResponse) ProtoMessage() {}

func (x *VpcConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigSetResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{65}
}

func (x *VpcConfigSetResponse) GetValue() *VpcConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *VpcConfigSetResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigSetSomeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// value contains a list of VpcConfig values to write.
	// It is possible to provide more values than can fit within either:
	//   - the maxiumum send size of the client
	//   - the maximum receive size of the server
	//
	// If this error occurs you must reduce the number of values sent.
	// See gRPC "maximum message size" documentation for more information.
	Values []*VpcConfig `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *VpcConfigSetSomeRequest) Reset() {
	*x = VpcConfigSetSomeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigSetSomeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigSetSomeRequest) ProtoMessage() {}

func (x *VpcConfigSetSomeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigSetSomeRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigSetSomeRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{66}
}

func (x *VpcConfigSetSomeRequest) GetValues() []*VpcConfig {
	if x != nil {
		return x.Values
	}
	return nil
}

type VpcConfigSetSomeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *VpcKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Error string  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *VpcConfigSetSomeResponse) Reset() {
	*x = VpcConfigSetSomeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigSetSomeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigSetSomeResponse) ProtoMessage() {}

func (x *VpcConfigSetSomeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigSetSomeResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigSetSomeResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{67}
}

func (x *VpcConfigSetSomeResponse) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VpcConfigSetSomeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type VpcConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which VpcConfig instance to remove.
	// This field must always be set.
	Key *VpcKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *VpcConfigDeleteRequest) Reset() {
	*x = VpcConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigDeleteRequest) ProtoMessage() {}

func (x *VpcConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{68}
}

func (x *VpcConfigDeleteRequest) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type VpcConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted VpcConfig instance.
	Key *VpcKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//   - it is after the time the request was received
	//   - a time-ranged query with StartTime==DeletedAt will not include this instance.
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigDeleteResponse) Reset() {
	*x = VpcConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigDeleteResponse) ProtoMessage() {}

func (x *VpcConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{69}
}

func (x *VpcConfigDeleteResponse) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VpcConfigDeleteResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type VpcConfigDeleteAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VpcConfigDeleteAllRequest) Reset() {
	*x = VpcConfigDeleteAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigDeleteAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigDeleteAllRequest) ProtoMessage() {}

func (x *VpcConfigDeleteAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigDeleteAllRequest.ProtoReflect.Descriptor instead.
func (*VpcConfigDeleteAllRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{70}
}

type VpcConfigDeleteAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This describes the class of delete error.
	Type fmp.DeleteError `protobuf:"varint,1,opt,name=type,proto3,enum=fmp.DeleteError" json:"type,omitempty"`
	// This indicates the error message from the delete failure.
	Error *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	// This is the key of the VpcConfig instance that failed to be deleted.
	Key *VpcKey `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp when the key was being deleted.
	Time *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *VpcConfigDeleteAllResponse) Reset() {
	*x = VpcConfigDeleteAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfigDeleteAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfigDeleteAllResponse) ProtoMessage() {}

func (x *VpcConfigDeleteAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfigDeleteAllResponse.ProtoReflect.Descriptor instead.
func (*VpcConfigDeleteAllResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{71}
}

func (x *VpcConfigDeleteAllResponse) GetType() fmp.DeleteError {
	if x != nil {
		return x.Type
	}
	return fmp.DeleteError(0)
}

func (x *VpcConfigDeleteAllResponse) GetError() *wrapperspb.StringValue {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *VpcConfigDeleteAllResponse) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VpcConfigDeleteAllResponse) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_clouddeploy_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_clouddeploy_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x66, 0x6d,
	0x70, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x73, 0x0a, 0x0d, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x0e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x57, 0x53, 0x54, 0x67, 0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x8d, 0x01, 0x0a,
	0x13, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f,
	0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x52, 0x0f,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a,
	0x14, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x54, 0x67, 0x77, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x87, 0x01, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x18, 0x41, 0x57,
	0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa1, 0x01, 0x0a, 0x1d, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67,
	0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x1e, 0x41, 0x57,
	0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x79, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x99, 0x01, 0x0a, 0x19, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42,
	0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x22, 0x67, 0x0a, 0x1b, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x19, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1a,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1e,
	0x0a, 0x1c, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd,
	0x01, 0x0a, 0x1d, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x6f,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22,
	0x71, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xac,
	0x01, 0x0a, 0x12, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x79, 0x0a,
	0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x19, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x17, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x59, 0x0a, 0x1a, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x67,
	0x0a, 0x1b, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x19, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x1d,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x79, 0x0a, 0x13, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x19, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61,
	0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73,
	0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a, 0x17, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x59, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x67, 0x0a, 0x1b,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53,
	0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x4f, 0x0a, 0x19, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x1d, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x8d, 0x01, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c,
	0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75,
	0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x20, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x5f, 0x0a, 0x1c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x90, 0x01, 0x0a, 0x1d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22,
	0x73, 0x0a, 0x21, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x5b, 0x0a, 0x1f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x22, 0x8c, 0x01, 0x0a, 0x20, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0x24, 0x0a, 0x22, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe9, 0x01, 0x0a, 0x23, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x38, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x73, 0x0a, 0x10, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x7b, 0x0a, 0x11, 0x56, 0x70, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x22, 0x93, 0x01, 0x0a, 0x16, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x17, 0x56,
	0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x33,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x13, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x7e, 0x0a, 0x14, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0x53, 0x0a, 0x17, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x61, 0x0a, 0x18, 0x56, 0x70, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x49, 0x0a, 0x16, 0x56, 0x70,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7a, 0x0a, 0x17, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d,
	0x65, 0x22, 0x1b, 0x0a, 0x19, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xd7,
	0x01, 0x0a, 0x1a, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xb3, 0x02, 0x0a, 0x0d, 0x41, 0x57, 0x53,
	0x54, 0x67, 0x77, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x54, 0x67, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x66, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54,
	0x67, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xf9,
	0x02, 0x0a, 0x17, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47, 0x65,
	0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53,
	0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x77, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7a,
	0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x34, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x35, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77,
	0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xa0, 0x06, 0x0a, 0x13, 0x41,
	0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x61, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12,
	0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x53, 0x65,
	0x74, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x72, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x6d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x78, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x33, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xa5, 0x02,
	0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x22, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x28, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x62, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x28,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xa0, 0x06, 0x0a, 0x13, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x61, 0x0a,
	0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30,
	0x01, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x30,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x53,
	0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x6d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x78,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x33, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xa0, 0x06, 0x0a, 0x13, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x61, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12,
	0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72,
	0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x6d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x78, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x33,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xfb, 0x06, 0x0a, 0x19,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x6d, 0x0a, 0x06, 0x47, 0x65, 0x74,
	0x4f, 0x6e, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7b, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x7e, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x70, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x33, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x34, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x7e, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f,
	0x6d, 0x65, 0x12, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x38, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x79, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x36, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x84, 0x01, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c,
	0x12, 0x39, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xf3, 0x05, 0x0a, 0x10, 0x56, 0x70,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b,
	0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x69, 0x0a, 0x06, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70,
	0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x6c, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x12, 0x2d, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x12, 0x5e, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2a, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6c, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x12,
	0x2e, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x65, 0x74, 0x53, 0x6f, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x30, 0x01, 0x12, 0x67, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x2d, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42,
	0x4b, 0x5a, 0x49, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_clouddeploy_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_clouddeploy_v1_services_gen_proto_rawDescData = file_arista_clouddeploy_v1_services_gen_proto_rawDesc
)

func file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_clouddeploy_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_clouddeploy_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_clouddeploy_v1_services_gen_proto_rawDescData)
	})
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescData
}

var file_arista_clouddeploy_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 72)
var file_arista_clouddeploy_v1_services_gen_proto_goTypes = []interface{}{
	(*AWSTgwRequest)(nil),                       // 0: arista.clouddeploy.v1.AWSTgwRequest
	(*AWSTgwResponse)(nil),                      // 1: arista.clouddeploy.v1.AWSTgwResponse
	(*AWSTgwStreamRequest)(nil),                 // 2: arista.clouddeploy.v1.AWSTgwStreamRequest
	(*AWSTgwStreamResponse)(nil),                // 3: arista.clouddeploy.v1.AWSTgwStreamResponse
	(*AWSTgwAttachmentRequest)(nil),             // 4: arista.clouddeploy.v1.AWSTgwAttachmentRequest
	(*AWSTgwAttachmentResponse)(nil),            // 5: arista.clouddeploy.v1.AWSTgwAttachmentResponse
	(*AWSTgwAttachmentStreamRequest)(nil),       // 6: arista.clouddeploy.v1.AWSTgwAttachmentStreamRequest
	(*AWSTgwAttachmentStreamResponse)(nil),      // 7: arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse
	(*AWSVpnConfigRequest)(nil),                 // 8: arista.clouddeploy.v1.AWSVpnConfigRequest
	(*AWSVpnConfigResponse)(nil),                // 9: arista.clouddeploy.v1.AWSVpnConfigResponse
	(*AWSVpnConfigStreamRequest)(nil),           // 10: arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	(*AWSVpnConfigStreamResponse)(nil),          // 11: arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	(*AWSVpnConfigSetRequest)(nil),              // 12: arista.clouddeploy.v1.AWSVpnConfigSetRequest
	(*AWSVpnConfigSetResponse)(nil),             // 13: arista.clouddeploy.v1.AWSVpnConfigSetResponse
	(*AWSVpnConfigSetSomeRequest)(nil),          // 14: arista.clouddeploy.v1.AWSVpnConfigSetSomeRequest
	(*AWSVpnConfigSetSomeResponse)(nil),         // 15: arista.clouddeploy.v1.AWSVpnConfigSetSomeResponse
	(*AWSVpnConfigDeleteRequest)(nil),           // 16: arista.clouddeploy.v1.AWSVpnConfigDeleteRequest
	(*AWSVpnConfigDeleteResponse)(nil),          // 17: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse
	(*AWSVpnConfigDeleteAllRequest)(nil),        // 18: arista.clouddeploy.v1.AWSVpnConfigDeleteAllRequest
	(*AWSVpnConfigDeleteAllResponse)(nil),       // 19: arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse
	(*PathRequest)(nil),                         // 20: arista.clouddeploy.v1.PathRequest
	(*PathResponse)(nil),                        // 21: arista.clouddeploy.v1.PathResponse
	(*PathStreamRequest)(nil),                   // 22: arista.clouddeploy.v1.PathStreamRequest
	(*PathStreamResponse)(nil),                  // 23: arista.clouddeploy.v1.PathStreamResponse
	(*RouterConfigRequest)(nil),                 // 24: arista.clouddeploy.v1.RouterConfigRequest
	(*RouterConfigResponse)(nil),                // 25: arista.clouddeploy.v1.RouterConfigResponse
	(*RouterConfigStreamRequest)(nil),           // 26: arista.clouddeploy.v1.RouterConfigStreamRequest
	(*RouterConfigStreamResponse)(nil),          // 27: arista.clouddeploy.v1.RouterConfigStreamResponse
	(*RouterConfigSetRequest)(nil),              // 28: arista.clouddeploy.v1.RouterConfigSetRequest
	(*RouterConfigSetResponse)(nil),             // 29: arista.clouddeploy.v1.RouterConfigSetResponse
	(*RouterConfigSetSomeRequest)(nil),          // 30: arista.clouddeploy.v1.RouterConfigSetSomeRequest
	(*RouterConfigSetSomeResponse)(nil),         // 31: arista.clouddeploy.v1.RouterConfigSetSomeResponse
	(*RouterConfigDeleteRequest)(nil),           // 32: arista.clouddeploy.v1.RouterConfigDeleteRequest
	(*RouterConfigDeleteResponse)(nil),          // 33: arista.clouddeploy.v1.RouterConfigDeleteResponse
	(*RouterConfigDeleteAllRequest)(nil),        // 34: arista.clouddeploy.v1.RouterConfigDeleteAllRequest
	(*RouterConfigDeleteAllResponse)(nil),       // 35: arista.clouddeploy.v1.RouterConfigDeleteAllResponse
	(*SubnetConfigRequest)(nil),                 // 36: arista.clouddeploy.v1.SubnetConfigRequest
	(*SubnetConfigResponse)(nil),                // 37: arista.clouddeploy.v1.SubnetConfigResponse
	(*SubnetConfigStreamRequest)(nil),           // 38: arista.clouddeploy.v1.SubnetConfigStreamRequest
	(*SubnetConfigStreamResponse)(nil),          // 39: arista.clouddeploy.v1.SubnetConfigStreamResponse
	(*SubnetConfigSetRequest)(nil),              // 40: arista.clouddeploy.v1.SubnetConfigSetRequest
	(*SubnetConfigSetResponse)(nil),             // 41: arista.clouddeploy.v1.SubnetConfigSetResponse
	(*SubnetConfigSetSomeRequest)(nil),          // 42: arista.clouddeploy.v1.SubnetConfigSetSomeRequest
	(*SubnetConfigSetSomeResponse)(nil),         // 43: arista.clouddeploy.v1.SubnetConfigSetSomeResponse
	(*SubnetConfigDeleteRequest)(nil),           // 44: arista.clouddeploy.v1.SubnetConfigDeleteRequest
	(*SubnetConfigDeleteResponse)(nil),          // 45: arista.clouddeploy.v1.SubnetConfigDeleteResponse
	(*SubnetConfigDeleteAllRequest)(nil),        // 46: arista.clouddeploy.v1.SubnetConfigDeleteAllRequest
	(*SubnetConfigDeleteAllResponse)(nil),       // 47: arista.clouddeploy.v1.SubnetConfigDeleteAllResponse
	(*TopologyInfoConfigRequest)(nil),           // 48: arista.clouddeploy.v1.TopologyInfoConfigRequest
	(*TopologyInfoConfigResponse)(nil),          // 49: arista.clouddeploy.v1.TopologyInfoConfigResponse
	(*TopologyInfoConfigStreamRequest)(nil),     // 50: arista.clouddeploy.v1.TopologyInfoConfigStreamRequest
	(*TopologyInfoConfigStreamResponse)(nil),    // 51: arista.clouddeploy.v1.TopologyInfoConfigStreamResponse
	(*TopologyInfoConfigSetRequest)(nil),        // 52: arista.clouddeploy.v1.TopologyInfoConfigSetRequest
	(*TopologyInfoConfigSetResponse)(nil),       // 53: arista.clouddeploy.v1.TopologyInfoConfigSetResponse
	(*TopologyInfoConfigSetSomeRequest)(nil),    // 54: arista.clouddeploy.v1.TopologyInfoConfigSetSomeRequest
	(*TopologyInfoConfigSetSomeResponse)(nil),   // 55: arista.clouddeploy.v1.TopologyInfoConfigSetSomeResponse
	(*TopologyInfoConfigDeleteRequest)(nil),     // 56: arista.clouddeploy.v1.TopologyInfoConfigDeleteRequest
	(*TopologyInfoConfigDeleteResponse)(nil),    // 57: arista.clouddeploy.v1.TopologyInfoConfigDeleteResponse
	(*TopologyInfoConfigDeleteAllRequest)(nil),  // 58: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllRequest
	(*TopologyInfoConfigDeleteAllResponse)(nil), // 59: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse
	(*VpcConfigRequest)(nil),                    // 60: arista.clouddeploy.v1.VpcConfigRequest
	(*VpcConfigResponse)(nil),                   // 61: arista.clouddeploy.v1.VpcConfigResponse
	(*VpcConfigStreamRequest)(nil),              // 62: arista.clouddeploy.v1.VpcConfigStreamRequest
	(*VpcConfigStreamResponse)(nil),             // 63: arista.clouddeploy.v1.VpcConfigStreamResponse
	(*VpcConfigSetRequest)(nil),                 // 64: arista.clouddeploy.v1.VpcConfigSetRequest
	(*VpcConfigSetResponse)(nil),                // 65: arista.clouddeploy.v1.VpcConfigSetResponse
	(*VpcConfigSetSomeRequest)(nil),             // 66: arista.clouddeploy.v1.VpcConfigSetSomeRequest
	(*VpcConfigSetSomeResponse)(nil),            // 67: arista.clouddeploy.v1.VpcConfigSetSomeResponse
	(*VpcConfigDeleteRequest)(nil),              // 68: arista.clouddeploy.v1.VpcConfigDeleteRequest
	(*VpcConfigDeleteResponse)(nil),             // 69: arista.clouddeploy.v1.VpcConfigDeleteResponse
	(*VpcConfigDeleteAllRequest)(nil),           // 70: arista.clouddeploy.v1.VpcConfigDeleteAllRequest
	(*VpcConfigDeleteAllResponse)(nil),          // 71: arista.clouddeploy.v1.VpcConfigDeleteAllResponse
	(*AWSTgwKey)(nil),                           // 72: arista.clouddeploy.v1.AWSTgwKey
	(*timestamppb.Timestamp)(nil),               // 73: google.protobuf.Timestamp
	(*AWSTgw)(nil),                              // 74: arista.clouddeploy.v1.AWSTgw
	(*time.TimeBounds)(nil),                     // 75: arista.time.TimeBounds
	(subscriptions.Operation)(0),                // 76: arista.subscriptions.Operation
	(*AWSTgwAttachmentKey)(nil),                 // 77: arista.clouddeploy.v1.AWSTgwAttachmentKey
	(*AWSTgwAttachment)(nil),                    // 78: arista.clouddeploy.v1.AWSTgwAttachment
	(*AWSVpnKey)(nil),                           // 79: arista.clouddeploy.v1.AWSVpnKey
	(*AWSVpnConfig)(nil),                        // 80: arista.clouddeploy.v1.AWSVpnConfig
	(fmp.DeleteError)(0),                        // 81: fmp.DeleteError
	(*wrapperspb.StringValue)(nil),              // 82: google.protobuf.StringValue
	(*PathKey)(nil),                             // 83: arista.clouddeploy.v1.PathKey
	(*Path)(nil),                                // 84: arista.clouddeploy.v1.Path
	(*RouterKey)(nil),                           // 85: arista.clouddeploy.v1.RouterKey
	(*RouterConfig)(nil),                        // 86: arista.clouddeploy.v1.RouterConfig
	(*SubnetKey)(nil),                           // 87: arista.clouddeploy.v1.SubnetKey
	(*SubnetConfig)(nil),                        // 88: arista.clouddeploy.v1.SubnetConfig
	(*TopologyInfoKey)(nil),                     // 89: arista.clouddeploy.v1.TopologyInfoKey
	(*TopologyInfoConfig)(nil),                  // 90: arista.clouddeploy.v1.TopologyInfoConfig
	(*VpcKey)(nil),                              // 91: arista.clouddeploy.v1.VpcKey
	(*VpcConfig)(nil),                           // 92: arista.clouddeploy.v1.VpcConfig
}
var file_arista_clouddeploy_v1_services_gen_proto_depIdxs = []int32{
	72,  // 0: arista.clouddeploy.v1.AWSTgwRequest.key:type_name -> arista.clouddeploy.v1.AWSTgwKey
	73,  // 1: arista.clouddeploy.v1.AWSTgwRequest.time:type_name -> google.protobuf.Timestamp
	74,  // 2: arista.clouddeploy.v1.AWSTgwResponse.value:type_name -> arista.clouddeploy.v1.AWSTgw
	73,  // 3: arista.clouddeploy.v1.AWSTgwResponse.time:type_name -> google.protobuf.Timestamp
	74,  // 4: arista.clouddeploy.v1.AWSTgwStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.AWSTgw
	75,  // 5: arista.clouddeploy.v1.AWSTgwStreamRequest.time:type_name -> arista.time.TimeBounds
	74,  // 6: arista.clouddeploy.v1.AWSTgwStreamResponse.value:type_name -> arista.clouddeploy.v1.AWSTgw
	73,  // 7: arista.clouddeploy.v1.AWSTgwStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 8: arista.clouddeploy.v1.AWSTgwStreamResponse.type:type_name -> arista.subscriptions.Operation
	77,  // 9: arista.clouddeploy.v1.AWSTgwAttachmentRequest.key:type_name -> arista.clouddeploy.v1.AWSTgwAttachmentKey
	73,  // 10: arista.clouddeploy.v1.AWSTgwAttachmentRequest.time:type_name -> google.protobuf.Timestamp
	78,  // 11: arista.clouddeploy.v1.AWSTgwAttachmentResponse.value:type_name -> arista.clouddeploy.v1.AWSTgwAttachment
	73,  // 12: arista.clouddeploy.v1.AWSTgwAttachmentResponse.time:type_name -> google.protobuf.Timestamp
	78,  // 13: arista.clouddeploy.v1.AWSTgwAttachmentStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.AWSTgwAttachment
	75,  // 14: arista.clouddeploy.v1.AWSTgwAttachmentStreamRequest.time:type_name -> arista.time.TimeBounds
	78,  // 15: arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse.value:type_name -> arista.clouddeploy.v1.AWSTgwAttachment
	73,  // 16: arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 17: arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse.type:type_name -> arista.subscriptions.Operation
	79,  // 18: arista.clouddeploy.v1.AWSVpnConfigRequest.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	73,  // 19: arista.clouddeploy.v1.AWSVpnConfigRequest.time:type_name -> google.protobuf.Timestamp
	80,  // 20: arista.clouddeploy.v1.AWSVpnConfigResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	73,  // 21: arista.clouddeploy.v1.AWSVpnConfigResponse.time:type_name -> google.protobuf.Timestamp
	80,  // 22: arista.clouddeploy.v1.AWSVpnConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	75,  // 23: arista.clouddeploy.v1.AWSVpnConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	80,  // 24: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	73,  // 25: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 26: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	80,  // 27: arista.clouddeploy.v1.AWSVpnConfigSetRequest.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	80,  // 28: arista.clouddeploy.v1.AWSVpnConfigSetResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	73,  // 29: arista.clouddeploy.v1.AWSVpnConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	80,  // 30: arista.clouddeploy.v1.AWSVpnConfigSetSomeRequest.values:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	79,  // 31: arista.clouddeploy.v1.AWSVpnConfigSetSomeResponse.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	79,  // 32: arista.clouddeploy.v1.AWSVpnConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	79,  // 33: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	73,  // 34: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	81,  // 35: arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	82,  // 36: arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	79,  // 37: arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	73,  // 38: arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	83,  // 39: arista.clouddeploy.v1.PathRequest.key:type_name -> arista.clouddeploy.v1.PathKey
	73,  // 40: arista.clouddeploy.v1.PathRequest.time:type_name -> google.protobuf.Timestamp
	84,  // 41: arista.clouddeploy.v1.PathResponse.value:type_name -> arista.clouddeploy.v1.Path
	73,  // 42: arista.clouddeploy.v1.PathResponse.time:type_name -> google.protobuf.Timestamp
	84,  // 43: arista.clouddeploy.v1.PathStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.Path
	75,  // 44: arista.clouddeploy.v1.PathStreamRequest.time:type_name -> arista.time.TimeBounds
	84,  // 45: arista.clouddeploy.v1.PathStreamResponse.value:type_name -> arista.clouddeploy.v1.Path
	73,  // 46: arista.clouddeploy.v1.PathStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 47: arista.clouddeploy.v1.PathStreamResponse.type:type_name -> arista.subscriptions.Operation
	85,  // 48: arista.clouddeploy.v1.RouterConfigRequest.key:type_name -> arista.clouddeploy.v1.RouterKey
	73,  // 49: arista.clouddeploy.v1.RouterConfigRequest.time:type_name -> google.protobuf.Timestamp
	86,  // 50: arista.clouddeploy.v1.RouterConfigResponse.value:type_name -> arista.clouddeploy.v1.RouterConfig
	73,  // 51: arista.clouddeploy.v1.RouterConfigResponse.time:type_name -> google.protobuf.Timestamp
	86,  // 52: arista.clouddeploy.v1.RouterConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.RouterConfig
	75,  // 53: arista.clouddeploy.v1.RouterConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	86,  // 54: arista.clouddeploy.v1.RouterConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.RouterConfig
	73,  // 55: arista.clouddeploy.v1.RouterConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 56: arista.clouddeploy.v1.RouterConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	86,  // 57: arista.clouddeploy.v1.RouterConfigSetRequest.value:type_name -> arista.clouddeploy.v1.RouterConfig
	86,  // 58: arista.clouddeploy.v1.RouterConfigSetResponse.value:type_name -> arista.clouddeploy.v1.RouterConfig
	73,  // 59: arista.clouddeploy.v1.RouterConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	86,  // 60: arista.clouddeploy.v1.RouterConfigSetSomeRequest.values:type_name -> arista.clouddeploy.v1.RouterConfig
	85,  // 61: arista.clouddeploy.v1.RouterConfigSetSomeResponse.key:type_name -> arista.clouddeploy.v1.RouterKey
	85,  // 62: arista.clouddeploy.v1.RouterConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.RouterKey
	85,  // 63: arista.clouddeploy.v1.RouterConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.RouterKey
	73,  // 64: arista.clouddeploy.v1.RouterConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	81,  // 65: arista.clouddeploy.v1.RouterConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	82,  // 66: arista.clouddeploy.v1.RouterConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	85,  // 67: arista.clouddeploy.v1.RouterConfigDeleteAllResponse.key:type_name -> arista.clouddeploy.v1.RouterKey
	73,  // 68: arista.clouddeploy.v1.RouterConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	87,  // 69: arista.clouddeploy.v1.SubnetConfigRequest.key:type_name -> arista.clouddeploy.v1.SubnetKey
	73,  // 70: arista.clouddeploy.v1.SubnetConfigRequest.time:type_name -> google.protobuf.Timestamp
	88,  // 71: arista.clouddeploy.v1.SubnetConfigResponse.value:type_name -> arista.clouddeploy.v1.SubnetConfig
	73,  // 72: arista.clouddeploy.v1.SubnetConfigResponse.time:type_name -> google.protobuf.Timestamp
	88,  // 73: arista.clouddeploy.v1.SubnetConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.SubnetConfig
	75,  // 74: arista.clouddeploy.v1.SubnetConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	88,  // 75: arista.clouddeploy.v1.SubnetConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.SubnetConfig
	73,  // 76: arista.clouddeploy.v1.SubnetConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 77: arista.clouddeploy.v1.SubnetConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	88,  // 78: arista.clouddeploy.v1.SubnetConfigSetRequest.value:type_name -> arista.clouddeploy.v1.SubnetConfig
	88,  // 79: arista.clouddeploy.v1.SubnetConfigSetResponse.value:type_name -> arista.clouddeploy.v1.SubnetConfig
	73,  // 80: arista.clouddeploy.v1.SubnetConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	88,  // 81: arista.clouddeploy.v1.SubnetConfigSetSomeRequest.values:type_name -> arista.clouddeploy.v1.SubnetConfig
	87,  // 82: arista.clouddeploy.v1.SubnetConfigSetSomeResponse.key:type_name -> arista.clouddeploy.v1.SubnetKey
	87,  // 83: arista.clouddeploy.v1.SubnetConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.SubnetKey
	87,  // 84: arista.clouddeploy.v1.SubnetConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.SubnetKey
	73,  // 85: arista.clouddeploy.v1.SubnetConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	81,  // 86: arista.clouddeploy.v1.SubnetConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	82,  // 87: arista.clouddeploy.v1.SubnetConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	87,  // 88: arista.clouddeploy.v1.SubnetConfigDeleteAllResponse.key:type_name -> arista.clouddeploy.v1.SubnetKey
	73,  // 89: arista.clouddeploy.v1.SubnetConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	89,  // 90: arista.clouddeploy.v1.TopologyInfoConfigRequest.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	73,  // 91: arista.clouddeploy.v1.TopologyInfoConfigRequest.time:type_name -> google.protobuf.Timestamp
	90,  // 92: arista.clouddeploy.v1.TopologyInfoConfigResponse.value:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	73,  // 93: arista.clouddeploy.v1.TopologyInfoConfigResponse.time:type_name -> google.protobuf.Timestamp
	90,  // 94: arista.clouddeploy.v1.TopologyInfoConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	75,  // 95: arista.clouddeploy.v1.TopologyInfoConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	90,  // 96: arista.clouddeploy.v1.TopologyInfoConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	73,  // 97: arista.clouddeploy.v1.TopologyInfoConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 98: arista.clouddeploy.v1.TopologyInfoConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	90,  // 99: arista.clouddeploy.v1.TopologyInfoConfigSetRequest.value:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	90,  // 100: arista.clouddeploy.v1.TopologyInfoConfigSetResponse.value:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	73,  // 101: arista.clouddeploy.v1.TopologyInfoConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	90,  // 102: arista.clouddeploy.v1.TopologyInfoConfigSetSomeRequest.values:type_name -> arista.clouddeploy.v1.TopologyInfoConfig
	89,  // 103: arista.clouddeploy.v1.TopologyInfoConfigSetSomeResponse.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	89,  // 104: arista.clouddeploy.v1.TopologyInfoConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	89,  // 105: arista.clouddeploy.v1.TopologyInfoConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	73,  // 106: arista.clouddeploy.v1.TopologyInfoConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	81,  // 107: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	82,  // 108: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	89,  // 109: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	73,  // 110: arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	91,  // 111: arista.clouddeploy.v1.VpcConfigRequest.key:type_name -> arista.clouddeploy.v1.VpcKey
	73,  // 112: arista.clouddeploy.v1.VpcConfigRequest.time:type_name -> google.protobuf.Timestamp
	92,  // 113: arista.clouddeploy.v1.VpcConfigResponse.value:type_name -> arista.clouddeploy.v1.VpcConfig
	73,  // 114: arista.clouddeploy.v1.VpcConfigResponse.time:type_name -> google.protobuf.Timestamp
	92,  // 115: arista.clouddeploy.v1.VpcConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.VpcConfig
	75,  // 116: arista.clouddeploy.v1.VpcConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	92,  // 117: arista.clouddeploy.v1.VpcConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.VpcConfig
	73,  // 118: arista.clouddeploy.v1.VpcConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	76,  // 119: arista.clouddeploy.v1.VpcConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	92,  // 120: arista.clouddeploy.v1.VpcConfigSetRequest.value:type_name -> arista.clouddeploy.v1.VpcConfig
	92,  // 121: arista.clouddeploy.v1.VpcConfigSetResponse.value:type_name -> arista.clouddeploy.v1.VpcConfig
	73,  // 122: arista.clouddeploy.v1.VpcConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	92,  // 123: arista.clouddeploy.v1.VpcConfigSetSomeRequest.values:type_name -> arista.clouddeploy.v1.VpcConfig
	91,  // 124: arista.clouddeploy.v1.VpcConfigSetSomeResponse.key:type_name -> arista.clouddeploy.v1.VpcKey
	91,  // 125: arista.clouddeploy.v1.VpcConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.VpcKey
	91,  // 126: arista.clouddeploy.v1.VpcConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.VpcKey
	73,  // 127: arista.clouddeploy.v1.VpcConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	81,  // 128: arista.clouddeploy.v1.VpcConfigDeleteAllResponse.type:type_name -> fmp.DeleteError
	82,  // 129: arista.clouddeploy.v1.VpcConfigDeleteAllResponse.error:type_name -> google.protobuf.StringValue
	91,  // 130: arista.clouddeploy.v1.VpcConfigDeleteAllResponse.key:type_name -> arista.clouddeploy.v1.VpcKey
	73,  // 131: arista.clouddeploy.v1.VpcConfigDeleteAllResponse.time:type_name -> google.protobuf.Timestamp
	0,   // 132: arista.clouddeploy.v1.AWSTgwService.GetOne:input_type -> arista.clouddeploy.v1.AWSTgwRequest
	2,   // 133: arista.clouddeploy.v1.AWSTgwService.GetAll:input_type -> arista.clouddeploy.v1.AWSTgwStreamRequest
	2,   // 134: arista.clouddeploy.v1.AWSTgwService.Subscribe:input_type -> arista.clouddeploy.v1.AWSTgwStreamRequest
	4,   // 135: arista.clouddeploy.v1.AWSTgwAttachmentService.GetOne:input_type -> arista.clouddeploy.v1.AWSTgwAttachmentRequest
	6,   // 136: arista.clouddeploy.v1.AWSTgwAttachmentService.GetAll:input_type -> arista.clouddeploy.v1.AWSTgwAttachmentStreamRequest
	6,   // 137: arista.clouddeploy.v1.AWSTgwAttachmentService.Subscribe:input_type -> arista.clouddeploy.v1.AWSTgwAttachmentStreamRequest
	8,   // 138: arista.clouddeploy.v1.AWSVpnConfigService.GetOne:input_type -> arista.clouddeploy.v1.AWSVpnConfigRequest
	10,  // 139: arista.clouddeploy.v1.AWSVpnConfigService.GetAll:input_type -> arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	10,  // 140: arista.clouddeploy.v1.AWSVpnConfigService.Subscribe:input_type -> arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	12,  // 141: arista.clouddeploy.v1.AWSVpnConfigService.Set:input_type -> arista.clouddeploy.v1.AWSVpnConfigSetRequest
	14,  // 142: arista.clouddeploy.v1.AWSVpnConfigService.SetSome:input_type -> arista.clouddeploy.v1.AWSVpnConfigSetSomeRequest
	16,  // 143: arista.clouddeploy.v1.AWSVpnConfigService.Delete:input_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteRequest
	18,  // 144: arista.clouddeploy.v1.AWSVpnConfigService.DeleteAll:input_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteAllRequest
	20,  // 145: arista.clouddeploy.v1.PathService.GetOne:input_type -> arista.clouddeploy.v1.PathRequest
	22,  // 146: arista.clouddeploy.v1.PathService.GetAll:input_type -> arista.clouddeploy.v1.PathStreamRequest
	22,  // 147: arista.clouddeploy.v1.PathService.Subscribe:input_type -> arista.clouddeploy.v1.PathStreamRequest
	24,  // 148: arista.clouddeploy.v1.RouterConfigService.GetOne:input_type -> arista.clouddeploy.v1.RouterConfigRequest
	26,  // 149: arista.clouddeploy.v1.RouterConfigService.GetAll:input_type -> arista.clouddeploy.v1.RouterConfigStreamRequest
	26,  // 150: arista.clouddeploy.v1.RouterConfigService.Subscribe:input_type -> arista.clouddeploy.v1.RouterConfigStreamRequest
	28,  // 151: arista.clouddeploy.v1.RouterConfigService.Set:input_type -> arista.clouddeploy.v1.RouterConfigSetRequest
	30,  // 152: arista.clouddeploy.v1.RouterConfigService.SetSome:input_type -> arista.clouddeploy.v1.RouterConfigSetSomeRequest
	32,  // 153: arista.clouddeploy.v1.RouterConfigService.Delete:input_type -> arista.clouddeploy.v1.RouterConfigDeleteRequest
	34,  // 154: arista.clouddeploy.v1.RouterConfigService.DeleteAll:input_type -> arista.clouddeploy.v1.RouterConfigDeleteAllRequest
	36,  // 155: arista.clouddeploy.v1.SubnetConfigService.GetOne:input_type -> arista.clouddeploy.v1.SubnetConfigRequest
	38,  // 156: arista.clouddeploy.v1.SubnetConfigService.GetAll:input_type -> arista.clouddeploy.v1.SubnetConfigStreamRequest
	38,  // 157: arista.clouddeploy.v1.SubnetConfigService.Subscribe:input_type -> arista.clouddeploy.v1.SubnetConfigStreamRequest
	40,  // 158: arista.clouddeploy.v1.SubnetConfigService.Set:input_type -> arista.clouddeploy.v1.SubnetConfigSetRequest
	42,  // 159: arista.clouddeploy.v1.SubnetConfigService.SetSome:input_type -> arista.clouddeploy.v1.SubnetConfigSetSomeRequest
	44,  // 160: arista.clouddeploy.v1.SubnetConfigService.Delete:input_type -> arista.clouddeploy.v1.SubnetConfigDeleteRequest
	46,  // 161: arista.clouddeploy.v1.SubnetConfigService.DeleteAll:input_type -> arista.clouddeploy.v1.SubnetConfigDeleteAllRequest
	48,  // 162: arista.clouddeploy.v1.TopologyInfoConfigService.GetOne:input_type -> arista.clouddeploy.v1.TopologyInfoConfigRequest
	50,  // 163: arista.clouddeploy.v1.TopologyInfoConfigService.GetAll:input_type -> arista.clouddeploy.v1.TopologyInfoConfigStreamRequest
	50,  // 164: arista.clouddeploy.v1.TopologyInfoConfigService.Subscribe:input_type -> arista.clouddeploy.v1.TopologyInfoConfigStreamRequest
	52,  // 165: arista.clouddeploy.v1.TopologyInfoConfigService.Set:input_type -> arista.clouddeploy.v1.TopologyInfoConfigSetRequest
	54,  // 166: arista.clouddeploy.v1.TopologyInfoConfigService.SetSome:input_type -> arista.clouddeploy.v1.TopologyInfoConfigSetSomeRequest
	56,  // 167: arista.clouddeploy.v1.TopologyInfoConfigService.Delete:input_type -> arista.clouddeploy.v1.TopologyInfoConfigDeleteRequest
	58,  // 168: arista.clouddeploy.v1.TopologyInfoConfigService.DeleteAll:input_type -> arista.clouddeploy.v1.TopologyInfoConfigDeleteAllRequest
	60,  // 169: arista.clouddeploy.v1.VpcConfigService.GetOne:input_type -> arista.clouddeploy.v1.VpcConfigRequest
	62,  // 170: arista.clouddeploy.v1.VpcConfigService.GetAll:input_type -> arista.clouddeploy.v1.VpcConfigStreamRequest
	62,  // 171: arista.clouddeploy.v1.VpcConfigService.Subscribe:input_type -> arista.clouddeploy.v1.VpcConfigStreamRequest
	64,  // 172: arista.clouddeploy.v1.VpcConfigService.Set:input_type -> arista.clouddeploy.v1.VpcConfigSetRequest
	66,  // 173: arista.clouddeploy.v1.VpcConfigService.SetSome:input_type -> arista.clouddeploy.v1.VpcConfigSetSomeRequest
	68,  // 174: arista.clouddeploy.v1.VpcConfigService.Delete:input_type -> arista.clouddeploy.v1.VpcConfigDeleteRequest
	70,  // 175: arista.clouddeploy.v1.VpcConfigService.DeleteAll:input_type -> arista.clouddeploy.v1.VpcConfigDeleteAllRequest
	1,   // 176: arista.clouddeploy.v1.AWSTgwService.GetOne:output_type -> arista.clouddeploy.v1.AWSTgwResponse
	3,   // 177: arista.clouddeploy.v1.AWSTgwService.GetAll:output_type -> arista.clouddeploy.v1.AWSTgwStreamResponse
	3,   // 178: arista.clouddeploy.v1.AWSTgwService.Subscribe:output_type -> arista.clouddeploy.v1.AWSTgwStreamResponse
	5,   // 179: arista.clouddeploy.v1.AWSTgwAttachmentService.GetOne:output_type -> arista.clouddeploy.v1.AWSTgwAttachmentResponse
	7,   // 180: arista.clouddeploy.v1.AWSTgwAttachmentService.GetAll:output_type -> arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse
	7,   // 181: arista.clouddeploy.v1.AWSTgwAttachmentService.Subscribe:output_type -> arista.clouddeploy.v1.AWSTgwAttachmentStreamResponse
	9,   // 182: arista.clouddeploy.v1.AWSVpnConfigService.GetOne:output_type -> arista.clouddeploy.v1.AWSVpnConfigResponse
	11,  // 183: arista.clouddeploy.v1.AWSVpnConfigService.GetAll:output_type -> arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	11,  // 184: arista.clouddeploy.v1.AWSVpnConfigService.Subscribe:output_type -> arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	13,  // 185: arista.clouddeploy.v1.AWSVpnConfigService.Set:output_type -> arista.clouddeploy.v1.AWSVpnConfigSetResponse
	15,  // 186: arista.clouddeploy.v1.AWSVpnConfigService.SetSome:output_type -> arista.clouddeploy.v1.AWSVpnConfigSetSomeResponse
	17,  // 187: arista.clouddeploy.v1.AWSVpnConfigService.Delete:output_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteResponse
	19,  // 188: arista.clouddeploy.v1.AWSVpnConfigService.DeleteAll:output_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteAllResponse
	21,  // 189: arista.clouddeploy.v1.PathService.GetOne:output_type -> arista.clouddeploy.v1.PathResponse
	23,  // 190: arista.clouddeploy.v1.PathService.GetAll:output_type -> arista.clouddeploy.v1.PathStreamResponse
	23,  // 191: arista.clouddeploy.v1.PathService.Subscribe:output_type -> arista.clouddeploy.v1.PathStreamResponse
	25,  // 192: arista.clouddeploy.v1.RouterConfigService.GetOne:output_type -> arista.clouddeploy.v1.RouterConfigResponse
	27,  // 193: arista.clouddeploy.v1.RouterConfigService.GetAll:output_type -> arista.clouddeploy.v1.RouterConfigStreamResponse
	27,  // 194: arista.clouddeploy.v1.RouterConfigService.Subscribe:output_type -> arista.clouddeploy.v1.RouterConfigStreamResponse
	29,  // 195: arista.clouddeploy.v1.RouterConfigService.Set:output_type -> arista.clouddeploy.v1.RouterConfigSetResponse
	31,  // 196: arista.clouddeploy.v1.RouterConfigService.SetSome:output_type -> arista.clouddeploy.v1.RouterConfigSetSomeResponse
	33,  // 197: arista.clouddeploy.v1.RouterConfigService.Delete:output_type -> arista.clouddeploy.v1.RouterConfigDeleteResponse
	35,  // 198: arista.clouddeploy.v1.RouterConfigService.DeleteAll:output_type -> arista.clouddeploy.v1.RouterConfigDeleteAllResponse
	37,  // 199: arista.clouddeploy.v1.SubnetConfigService.GetOne:output_type -> arista.clouddeploy.v1.SubnetConfigResponse
	39,  // 200: arista.clouddeploy.v1.SubnetConfigService.GetAll:output_type -> arista.clouddeploy.v1.SubnetConfigStreamResponse
	39,  // 201: arista.clouddeploy.v1.SubnetConfigService.Subscribe:output_type -> arista.clouddeploy.v1.SubnetConfigStreamResponse
	41,  // 202: arista.clouddeploy.v1.SubnetConfigService.Set:output_type -> arista.clouddeploy.v1.SubnetConfigSetResponse
	43,  // 203: arista.clouddeploy.v1.SubnetConfigService.SetSome:output_type -> arista.clouddeploy.v1.SubnetConfigSetSomeResponse
	45,  // 204: arista.clouddeploy.v1.SubnetConfigService.Delete:output_type -> arista.clouddeploy.v1.SubnetConfigDeleteResponse
	47,  // 205: arista.clouddeploy.v1.SubnetConfigService.DeleteAll:output_type -> arista.clouddeploy.v1.SubnetConfigDeleteAllResponse
	49,  // 206: arista.clouddeploy.v1.TopologyInfoConfigService.GetOne:output_type -> arista.clouddeploy.v1.TopologyInfoConfigResponse
	51,  // 207: arista.clouddeploy.v1.TopologyInfoConfigService.GetAll:output_type -> arista.clouddeploy.v1.TopologyInfoConfigStreamResponse
	51,  // 208: arista.clouddeploy.v1.TopologyInfoConfigService.Subscribe:output_type -> arista.clouddeploy.v1.TopologyInfoConfigStreamResponse
	53,  // 209: arista.clouddeploy.v1.TopologyInfoConfigService.Set:output_type -> arista.clouddeploy.v1.TopologyInfoConfigSetResponse
	55,  // 210: arista.clouddeploy.v1.TopologyInfoConfigService.SetSome:output_type -> arista.clouddeploy.v1.TopologyInfoConfigSetSomeResponse
	57,  // 211: arista.clouddeploy.v1.TopologyInfoConfigService.Delete:output_type -> arista.clouddeploy.v1.TopologyInfoConfigDeleteResponse
	59,  // 212: arista.clouddeploy.v1.TopologyInfoConfigService.DeleteAll:output_type -> arista.clouddeploy.v1.TopologyInfoConfigDeleteAllResponse
	61,  // 213: arista.clouddeploy.v1.VpcConfigService.GetOne:output_type -> arista.clouddeploy.v1.VpcConfigResponse
	63,  // 214: arista.clouddeploy.v1.VpcConfigService.GetAll:output_type -> arista.clouddeploy.v1.VpcConfigStreamResponse
	63,  // 215: arista.clouddeploy.v1.VpcConfigService.Subscribe:output_type -> arista.clouddeploy.v1.VpcConfigStreamResponse
	65,  // 216: arista.clouddeploy.v1.VpcConfigService.Set:output_type -> arista.clouddeploy.v1.VpcConfigSetResponse
	67,  // 217: arista.clouddeploy.v1.VpcConfigService.SetSome:output_type -> arista.clouddeploy.v1.VpcConfigSetSomeResponse
	69,  // 218: arista.clouddeploy.v1.VpcConfigService.Delete:output_type -> arista.clouddeploy.v1.VpcConfigDeleteResponse
	71,  // 219: arista.clouddeploy.v1.VpcConfigService.DeleteAll:output_type -> arista.clouddeploy.v1.VpcConfigDeleteAllResponse
	176, // [176:220] is the sub-list for method output_type
	132, // [132:176] is the sub-list for method input_type
	132, // [132:132] is the sub-list for extension type_name
	132, // [132:132] is the sub-list for extension extendee
	0,   // [0:132] is the sub-list for field type_name
}

func init() { file_arista_clouddeploy_v1_services_gen_proto_init() }
func file_arista_clouddeploy_v1_services_gen_proto_init() {
	if File_arista_clouddeploy_v1_services_gen_proto != nil {
		return
	}
	file_arista_clouddeploy_v1_clouddeploy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachmentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachmentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachmentStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachmentStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigSetSomeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigSetSomeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigDeleteAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfigDeleteAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_clouddeploy_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   72,
			NumExtensions: 0,
			NumServices:   8,
		},
		GoTypes:           file_arista_clouddeploy_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_clouddeploy_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_clouddeploy_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_clouddeploy_v1_services_gen_proto = out.File
	file_arista_clouddeploy_v1_services_gen_proto_rawDesc = nil
	file_arista_clouddeploy_v1_services_gen_proto_goTypes = nil
	file_arista_clouddeploy_v1_services_gen_proto_depIdxs = nil
}
