// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.6
// source: arista/clouddeploy.v1/clouddeploy.proto

package clouddeploy_v1

import (
	fmp "github.com/aristanetworks/cloudvision-go/api/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TopologyInfoType int32

const (
	TopologyInfoType_TOPOLOGY_INFO_TYPE_UNSPECIFIED TopologyInfoType = 0
	// Topology meta info
	TopologyInfoType_TOPOLOGY_INFO_TYPE_META TopologyInfoType = 1
	TopologyInfoType_TOPOLOGY_INFO_TYPE_WAN  TopologyInfoType = 2
	TopologyInfoType_TOPOLOGY_INFO_TYPE_CLOS TopologyInfoType = 3
)

// Enum value maps for TopologyInfoType.
var (
	TopologyInfoType_name = map[int32]string{
		0: "TOPOLOGY_INFO_TYPE_UNSPECIFIED",
		1: "TOPOLOGY_INFO_TYPE_META",
		2: "TOPOLOGY_INFO_TYPE_WAN",
		3: "TOPOLOGY_INFO_TYPE_CLOS",
	}
	TopologyInfoType_value = map[string]int32{
		"TOPOLOGY_INFO_TYPE_UNSPECIFIED": 0,
		"TOPOLOGY_INFO_TYPE_META":        1,
		"TOPOLOGY_INFO_TYPE_WAN":         2,
		"TOPOLOGY_INFO_TYPE_CLOS":        3,
	}
)

func (x TopologyInfoType) Enum() *TopologyInfoType {
	p := new(TopologyInfoType)
	*p = x
	return p
}

func (x TopologyInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[0].Descriptor()
}

func (TopologyInfoType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[0]
}

func (x TopologyInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyInfoType.Descriptor instead.
func (TopologyInfoType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{0}
}

type FabricType int32

const (
	FabricType_FABRIC_TYPE_UNSPECIFIED FabricType = 0
	FabricType_FABRIC_TYPE_FULL_MESH   FabricType = 1
	FabricType_FABRIC_TYPE_HUB_SPOKE   FabricType = 2
)

// Enum value maps for FabricType.
var (
	FabricType_name = map[int32]string{
		0: "FABRIC_TYPE_UNSPECIFIED",
		1: "FABRIC_TYPE_FULL_MESH",
		2: "FABRIC_TYPE_HUB_SPOKE",
	}
	FabricType_value = map[string]int32{
		"FABRIC_TYPE_UNSPECIFIED": 0,
		"FABRIC_TYPE_FULL_MESH":   1,
		"FABRIC_TYPE_HUB_SPOKE":   2,
	}
)

func (x FabricType) Enum() *FabricType {
	p := new(FabricType)
	*p = x
	return p
}

func (x FabricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[1].Descriptor()
}

func (FabricType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[1]
}

func (x FabricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricType.Descriptor instead.
func (FabricType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{1}
}

type CloudProviderType int32

const (
	CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED CloudProviderType = 0
	CloudProviderType_CLOUD_PROVIDER_TYPE_AWS         CloudProviderType = 1
	CloudProviderType_CLOUD_PROVIDER_TYPE_AZURE       CloudProviderType = 2
	CloudProviderType_CLOUD_PROVIDER_TYPE_GCP         CloudProviderType = 3
)

// Enum value maps for CloudProviderType.
var (
	CloudProviderType_name = map[int32]string{
		0: "CLOUD_PROVIDER_TYPE_UNSPECIFIED",
		1: "CLOUD_PROVIDER_TYPE_AWS",
		2: "CLOUD_PROVIDER_TYPE_AZURE",
		3: "CLOUD_PROVIDER_TYPE_GCP",
	}
	CloudProviderType_value = map[string]int32{
		"CLOUD_PROVIDER_TYPE_UNSPECIFIED": 0,
		"CLOUD_PROVIDER_TYPE_AWS":         1,
		"CLOUD_PROVIDER_TYPE_AZURE":       2,
		"CLOUD_PROVIDER_TYPE_GCP":         3,
	}
)

func (x CloudProviderType) Enum() *CloudProviderType {
	p := new(CloudProviderType)
	*p = x
	return p
}

func (x CloudProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[2].Descriptor()
}

func (CloudProviderType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[2]
}

func (x CloudProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProviderType.Descriptor instead.
func (CloudProviderType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{2}
}

type UnderlayConnectionType int32

const (
	UnderlayConnectionType_UNDERLAY_CONNECTION_TYPE_UNSPECIFIED UnderlayConnectionType = 0
	UnderlayConnectionType_UNDERLAY_CONNECTION_TYPE_IGW         UnderlayConnectionType = 1
	UnderlayConnectionType_UNDERLAY_CONNECTION_TYPE_PEERING     UnderlayConnectionType = 2
	UnderlayConnectionType_UNDERLAY_CONNECTION_TYPE_TGW         UnderlayConnectionType = 3
)

// Enum value maps for UnderlayConnectionType.
var (
	UnderlayConnectionType_name = map[int32]string{
		0: "UNDERLAY_CONNECTION_TYPE_UNSPECIFIED",
		1: "UNDERLAY_CONNECTION_TYPE_IGW",
		2: "UNDERLAY_CONNECTION_TYPE_PEERING",
		3: "UNDERLAY_CONNECTION_TYPE_TGW",
	}
	UnderlayConnectionType_value = map[string]int32{
		"UNDERLAY_CONNECTION_TYPE_UNSPECIFIED": 0,
		"UNDERLAY_CONNECTION_TYPE_IGW":         1,
		"UNDERLAY_CONNECTION_TYPE_PEERING":     2,
		"UNDERLAY_CONNECTION_TYPE_TGW":         3,
	}
)

func (x UnderlayConnectionType) Enum() *UnderlayConnectionType {
	p := new(UnderlayConnectionType)
	*p = x
	return p
}

func (x UnderlayConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnderlayConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[3].Descriptor()
}

func (UnderlayConnectionType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[3]
}

func (x UnderlayConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnderlayConnectionType.Descriptor instead.
func (UnderlayConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{3}
}

type OverlayConnectionType int32

const (
	OverlayConnectionType_OVERLAY_CONNECTION_TYPE_UNSPECIFIED OverlayConnectionType = 0
	OverlayConnectionType_OVERLAY_CONNECTION_TYPE_DPS         OverlayConnectionType = 1
	OverlayConnectionType_OVERLAY_CONNECTION_TYPE_VXLAN       OverlayConnectionType = 2
	OverlayConnectionType_OVERLAY_CONNECTION_TYPE_IPSEC       OverlayConnectionType = 3
)

// Enum value maps for OverlayConnectionType.
var (
	OverlayConnectionType_name = map[int32]string{
		0: "OVERLAY_CONNECTION_TYPE_UNSPECIFIED",
		1: "OVERLAY_CONNECTION_TYPE_DPS",
		2: "OVERLAY_CONNECTION_TYPE_VXLAN",
		3: "OVERLAY_CONNECTION_TYPE_IPSEC",
	}
	OverlayConnectionType_value = map[string]int32{
		"OVERLAY_CONNECTION_TYPE_UNSPECIFIED": 0,
		"OVERLAY_CONNECTION_TYPE_DPS":         1,
		"OVERLAY_CONNECTION_TYPE_VXLAN":       2,
		"OVERLAY_CONNECTION_TYPE_IPSEC":       3,
	}
)

func (x OverlayConnectionType) Enum() *OverlayConnectionType {
	p := new(OverlayConnectionType)
	*p = x
	return p
}

func (x OverlayConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverlayConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[4].Descriptor()
}

func (OverlayConnectionType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[4]
}

func (x OverlayConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OverlayConnectionType.Descriptor instead.
func (OverlayConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{4}
}

type RoleType int32

const (
	RoleType_ROLE_TYPE_UNSPECIFIED RoleType = 0
	RoleType_ROLE_TYPE_EDGE        RoleType = 1
	RoleType_ROLE_TYPE_SPINE       RoleType = 2
	RoleType_ROLE_TYPE_LEAF        RoleType = 3
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ROLE_TYPE_UNSPECIFIED",
		1: "ROLE_TYPE_EDGE",
		2: "ROLE_TYPE_SPINE",
		3: "ROLE_TYPE_LEAF",
	}
	RoleType_value = map[string]int32{
		"ROLE_TYPE_UNSPECIFIED": 0,
		"ROLE_TYPE_EDGE":        1,
		"ROLE_TYPE_SPINE":       2,
		"ROLE_TYPE_LEAF":        3,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[5].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[5]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{5}
}

type CVStatusCode int32

const (
	CVStatusCode_CV_STATUS_CODE_UNSPECIFIED CVStatusCode = 0
	// Rtr object is created. Waiting for router to start streaming
	CVStatusCode_CV_STATUS_CODE_RTR_CREATED CVStatusCode = 1
	// Router is streaming, waiting for router to be provisioned
	CVStatusCode_CV_STATUS_CODE_RTR_DISCOVERED CVStatusCode = 2
	// Router is provisioned. It is in the undefined container
	CVStatusCode_CV_STATUS_CODE_RTR_PROVISIONED CVStatusCode = 3
	// A config is being applied to the router
	CVStatusCode_CV_STATUS_CODE_RTR_CONFIG_WIP CVStatusCode = 4
	// Rtr is ready for futher action/operation
	CVStatusCode_CV_STATUS_CODE_RTR_READY CVStatusCode = 5
	// Rtr could not be created
	CVStatusCode_CV_STATUS_CODE_RTR_FAILED CVStatusCode = 6
	// Rtr stopped streaming after it is provisioned
	CVStatusCode_CV_STATUS_CODE_RTR_INACTIVE CVStatusCode = 7
)

// Enum value maps for CVStatusCode.
var (
	CVStatusCode_name = map[int32]string{
		0: "CV_STATUS_CODE_UNSPECIFIED",
		1: "CV_STATUS_CODE_RTR_CREATED",
		2: "CV_STATUS_CODE_RTR_DISCOVERED",
		3: "CV_STATUS_CODE_RTR_PROVISIONED",
		4: "CV_STATUS_CODE_RTR_CONFIG_WIP",
		5: "CV_STATUS_CODE_RTR_READY",
		6: "CV_STATUS_CODE_RTR_FAILED",
		7: "CV_STATUS_CODE_RTR_INACTIVE",
	}
	CVStatusCode_value = map[string]int32{
		"CV_STATUS_CODE_UNSPECIFIED":     0,
		"CV_STATUS_CODE_RTR_CREATED":     1,
		"CV_STATUS_CODE_RTR_DISCOVERED":  2,
		"CV_STATUS_CODE_RTR_PROVISIONED": 3,
		"CV_STATUS_CODE_RTR_CONFIG_WIP":  4,
		"CV_STATUS_CODE_RTR_READY":       5,
		"CV_STATUS_CODE_RTR_FAILED":      6,
		"CV_STATUS_CODE_RTR_INACTIVE":    7,
	}
)

func (x CVStatusCode) Enum() *CVStatusCode {
	p := new(CVStatusCode)
	*p = x
	return p
}

func (x CVStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[6].Descriptor()
}

func (CVStatusCode) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[6]
}

func (x CVStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVStatusCode.Descriptor instead.
func (CVStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{6}
}

type DeviceStatusCode int32

const (
	DeviceStatusCode_DEVICE_STATUS_CODE_UNSPECIFIED      DeviceStatusCode = 0
	DeviceStatusCode_DEVICE_STATUS_CODE_WORK_IN_PROGRESS DeviceStatusCode = 1
	DeviceStatusCode_DEVICE_STATUS_CODE_SUCCESS          DeviceStatusCode = 2
	DeviceStatusCode_DEVICE_STATUS_CODE_ERROR            DeviceStatusCode = 3
)

// Enum value maps for DeviceStatusCode.
var (
	DeviceStatusCode_name = map[int32]string{
		0: "DEVICE_STATUS_CODE_UNSPECIFIED",
		1: "DEVICE_STATUS_CODE_WORK_IN_PROGRESS",
		2: "DEVICE_STATUS_CODE_SUCCESS",
		3: "DEVICE_STATUS_CODE_ERROR",
	}
	DeviceStatusCode_value = map[string]int32{
		"DEVICE_STATUS_CODE_UNSPECIFIED":      0,
		"DEVICE_STATUS_CODE_WORK_IN_PROGRESS": 1,
		"DEVICE_STATUS_CODE_SUCCESS":          2,
		"DEVICE_STATUS_CODE_ERROR":            3,
	}
)

func (x DeviceStatusCode) Enum() *DeviceStatusCode {
	p := new(DeviceStatusCode)
	*p = x
	return p
}

func (x DeviceStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[7].Descriptor()
}

func (DeviceStatusCode) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[7]
}

func (x DeviceStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatusCode.Descriptor instead.
func (DeviceStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{7}
}

type DeploymentStatusCode int32

const (
	// TF or any other client that invokes Router message
	// should inform about deployment status
	// of the router instance
	DeploymentStatusCode_DEPLOYMENT_STATUS_CODE_UNSPECIFIED DeploymentStatusCode = 0
	DeploymentStatusCode_DEPLOYMENT_STATUS_CODE_IN_PROGRESS DeploymentStatusCode = 1
	DeploymentStatusCode_DEPLOYMENT_STATUS_CODE_SUCCESS     DeploymentStatusCode = 2
	DeploymentStatusCode_DEPLOYMENT_STATUS_CODE_ERR         DeploymentStatusCode = 3
)

// Enum value maps for DeploymentStatusCode.
var (
	DeploymentStatusCode_name = map[int32]string{
		0: "DEPLOYMENT_STATUS_CODE_UNSPECIFIED",
		1: "DEPLOYMENT_STATUS_CODE_IN_PROGRESS",
		2: "DEPLOYMENT_STATUS_CODE_SUCCESS",
		3: "DEPLOYMENT_STATUS_CODE_ERR",
	}
	DeploymentStatusCode_value = map[string]int32{
		"DEPLOYMENT_STATUS_CODE_UNSPECIFIED": 0,
		"DEPLOYMENT_STATUS_CODE_IN_PROGRESS": 1,
		"DEPLOYMENT_STATUS_CODE_SUCCESS":     2,
		"DEPLOYMENT_STATUS_CODE_ERR":         3,
	}
)

func (x DeploymentStatusCode) Enum() *DeploymentStatusCode {
	p := new(DeploymentStatusCode)
	*p = x
	return p
}

func (x DeploymentStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[8].Descriptor()
}

func (DeploymentStatusCode) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[8]
}

func (x DeploymentStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentStatusCode.Descriptor instead.
func (DeploymentStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{8}
}

type NetworkInterfaceType int32

const (
	NetworkInterfaceType_NETWORK_INTERFACE_TYPE_UNSPECIFIED NetworkInterfaceType = 0
	NetworkInterfaceType_NETWORK_INTERFACE_TYPE_PRIVATE     NetworkInterfaceType = 1
	NetworkInterfaceType_NETWORK_INTERFACE_TYPE_PUBLIC      NetworkInterfaceType = 2
	NetworkInterfaceType_NETWORK_INTERFACE_TYPE_INTERNAL    NetworkInterfaceType = 3
)

// Enum value maps for NetworkInterfaceType.
var (
	NetworkInterfaceType_name = map[int32]string{
		0: "NETWORK_INTERFACE_TYPE_UNSPECIFIED",
		1: "NETWORK_INTERFACE_TYPE_PRIVATE",
		2: "NETWORK_INTERFACE_TYPE_PUBLIC",
		3: "NETWORK_INTERFACE_TYPE_INTERNAL",
	}
	NetworkInterfaceType_value = map[string]int32{
		"NETWORK_INTERFACE_TYPE_UNSPECIFIED": 0,
		"NETWORK_INTERFACE_TYPE_PRIVATE":     1,
		"NETWORK_INTERFACE_TYPE_PUBLIC":      2,
		"NETWORK_INTERFACE_TYPE_INTERNAL":    3,
	}
)

func (x NetworkInterfaceType) Enum() *NetworkInterfaceType {
	p := new(NetworkInterfaceType)
	*p = x
	return p
}

func (x NetworkInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[9].Descriptor()
}

func (NetworkInterfaceType) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[9]
}

func (x NetworkInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterfaceType.Descriptor instead.
func (NetworkInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{9}
}

type VpcStatusCode int32

const (
	VpcStatusCode_VPC_STATUS_CODE_UNSPECIFIED VpcStatusCode = 0
	VpcStatusCode_VPC_STATUS_CODE_SUCCESS     VpcStatusCode = 1
	VpcStatusCode_VPC_STATUS_CODE_FAILURE     VpcStatusCode = 2
)

// Enum value maps for VpcStatusCode.
var (
	VpcStatusCode_name = map[int32]string{
		0: "VPC_STATUS_CODE_UNSPECIFIED",
		1: "VPC_STATUS_CODE_SUCCESS",
		2: "VPC_STATUS_CODE_FAILURE",
	}
	VpcStatusCode_value = map[string]int32{
		"VPC_STATUS_CODE_UNSPECIFIED": 0,
		"VPC_STATUS_CODE_SUCCESS":     1,
		"VPC_STATUS_CODE_FAILURE":     2,
	}
)

func (x VpcStatusCode) Enum() *VpcStatusCode {
	p := new(VpcStatusCode)
	*p = x
	return p
}

func (x VpcStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VpcStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[10].Descriptor()
}

func (VpcStatusCode) Type() protoreflect.EnumType {
	return &file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes[10]
}

func (x VpcStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VpcStatusCode.Descriptor instead.
func (VpcStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{10}
}

type IpsecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IkeIntegrity    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=ike_integrity,json=ikeIntegrity,proto3" json:"ike_integrity,omitempty"`
	IkeEncryption   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=ike_encryption,json=ikeEncryption,proto3" json:"ike_encryption,omitempty"`
	IkeLifetime     *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ike_lifetime,json=ikeLifetime,proto3" json:"ike_lifetime,omitempty"`
	IkePfs          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=ike_pfs,json=ikePfs,proto3" json:"ike_pfs,omitempty"`
	IkePresharedKey *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=ike_preshared_key,json=ikePresharedKey,proto3" json:"ike_preshared_key,omitempty"`
	IpsecIntegrity  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=ipsec_integrity,json=ipsecIntegrity,proto3" json:"ipsec_integrity,omitempty"`
	IpsecEncryption *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ipsec_encryption,json=ipsecEncryption,proto3" json:"ipsec_encryption,omitempty"`
	IpsecPfs        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=ipsec_pfs,json=ipsecPfs,proto3" json:"ipsec_pfs,omitempty"`
	IpsecMode       *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=ipsec_mode,json=ipsecMode,proto3" json:"ipsec_mode,omitempty"`
	DpdInterval     *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=dpd_interval,json=dpdInterval,proto3" json:"dpd_interval,omitempty"`
	DpdRetries      *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=dpd_retries,json=dpdRetries,proto3" json:"dpd_retries,omitempty"`
}

func (x *IpsecInfo) Reset() {
	*x = IpsecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecInfo) ProtoMessage() {}

func (x *IpsecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecInfo.ProtoReflect.Descriptor instead.
func (*IpsecInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{0}
}

func (x *IpsecInfo) GetIkeIntegrity() *wrapperspb.StringValue {
	if x != nil {
		return x.IkeIntegrity
	}
	return nil
}

func (x *IpsecInfo) GetIkeEncryption() *wrapperspb.StringValue {
	if x != nil {
		return x.IkeEncryption
	}
	return nil
}

func (x *IpsecInfo) GetIkeLifetime() *wrapperspb.StringValue {
	if x != nil {
		return x.IkeLifetime
	}
	return nil
}

func (x *IpsecInfo) GetIkePfs() *wrapperspb.StringValue {
	if x != nil {
		return x.IkePfs
	}
	return nil
}

func (x *IpsecInfo) GetIkePresharedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.IkePresharedKey
	}
	return nil
}

func (x *IpsecInfo) GetIpsecIntegrity() *wrapperspb.StringValue {
	if x != nil {
		return x.IpsecIntegrity
	}
	return nil
}

func (x *IpsecInfo) GetIpsecEncryption() *wrapperspb.StringValue {
	if x != nil {
		return x.IpsecEncryption
	}
	return nil
}

func (x *IpsecInfo) GetIpsecPfs() *wrapperspb.StringValue {
	if x != nil {
		return x.IpsecPfs
	}
	return nil
}

func (x *IpsecInfo) GetIpsecMode() *wrapperspb.StringValue {
	if x != nil {
		return x.IpsecMode
	}
	return nil
}

func (x *IpsecInfo) GetDpdInterval() *wrapperspb.StringValue {
	if x != nil {
		return x.DpdInterval
	}
	return nil
}

func (x *IpsecInfo) GetDpdRetries() *wrapperspb.StringValue {
	if x != nil {
		return x.DpdRetries
	}
	return nil
}

type TunnelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelAwsEndpointIp   *fmp.IPAddress          `protobuf:"bytes,1,opt,name=tunnel_aws_endpoint_ip,json=tunnelAwsEndpointIp,proto3" json:"tunnel_aws_endpoint_ip,omitempty"`
	TunnelBgpAsn          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=tunnel_bgp_asn,json=tunnelBgpAsn,proto3" json:"tunnel_bgp_asn,omitempty"`
	TunnelRouterOverlayIp *fmp.IPAddress          `protobuf:"bytes,3,opt,name=tunnel_router_overlay_ip,json=tunnelRouterOverlayIp,proto3" json:"tunnel_router_overlay_ip,omitempty"`
	TunnelAwsOverlayIp    *fmp.IPAddress          `protobuf:"bytes,4,opt,name=tunnel_aws_overlay_ip,json=tunnelAwsOverlayIp,proto3" json:"tunnel_aws_overlay_ip,omitempty"`
	TunnelBgpHoldtime     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=tunnel_bgp_holdtime,json=tunnelBgpHoldtime,proto3" json:"tunnel_bgp_holdtime,omitempty"`
	TunnelPresharedKey    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=tunnel_preshared_key,json=tunnelPresharedKey,proto3" json:"tunnel_preshared_key,omitempty"`
	IpsecInfo             *IpsecInfo              `protobuf:"bytes,7,opt,name=ipsec_info,json=ipsecInfo,proto3" json:"ipsec_info,omitempty"`
}

func (x *TunnelInfo) Reset() {
	*x = TunnelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInfo) ProtoMessage() {}

func (x *TunnelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInfo.ProtoReflect.Descriptor instead.
func (*TunnelInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelInfo) GetTunnelAwsEndpointIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelAwsEndpointIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelBgpAsn() *wrapperspb.StringValue {
	if x != nil {
		return x.TunnelBgpAsn
	}
	return nil
}

func (x *TunnelInfo) GetTunnelRouterOverlayIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelRouterOverlayIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelAwsOverlayIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelAwsOverlayIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelBgpHoldtime() *wrapperspb.StringValue {
	if x != nil {
		return x.TunnelBgpHoldtime
	}
	return nil
}

func (x *TunnelInfo) GetTunnelPresharedKey() *wrapperspb.StringValue {
	if x != nil {
		return x.TunnelPresharedKey
	}
	return nil
}

func (x *TunnelInfo) GetIpsecInfo() *IpsecInfo {
	if x != nil {
		return x.IpsecInfo
	}
	return nil
}

type TunnelInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*TunnelInfo `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *TunnelInfoList) Reset() {
	*x = TunnelInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInfoList) ProtoMessage() {}

func (x *TunnelInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInfoList.ProtoReflect.Descriptor instead.
func (*TunnelInfoList) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{2}
}

func (x *TunnelInfoList) GetValues() []*TunnelInfo {
	if x != nil {
		return x.Values
	}
	return nil
}

type AWSVpnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                *AWSVpnKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TgwId              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	VpnConnectionId    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vpn_connection_id,json=vpnConnectionId,proto3" json:"vpn_connection_id,omitempty"`
	CgwId              *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=cgw_id,json=cgwId,proto3" json:"cgw_id,omitempty"`
	CloudeosRouterId   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=cloudeos_router_id,json=cloudeosRouterId,proto3" json:"cloudeos_router_id,omitempty"`
	CloudeosVpcId      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=cloudeos_vpc_id,json=cloudeosVpcId,proto3" json:"cloudeos_vpc_id,omitempty"`
	VpnTgwAttachmentId *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=vpn_tgw_attachment_id,json=vpnTgwAttachmentId,proto3" json:"vpn_tgw_attachment_id,omitempty"`
	TunnelInfoList     *TunnelInfoList         `protobuf:"bytes,8,opt,name=tunnel_info_list,json=tunnelInfoList,proto3" json:"tunnel_info_list,omitempty"`
	Cnps               *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=cnps,proto3" json:"cnps,omitempty"`
	VpnGatewayId       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=vpn_gateway_id,json=vpnGatewayId,proto3" json:"vpn_gateway_id,omitempty"`
}

func (x *AWSVpnConfig) Reset() {
	*x = AWSVpnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfig) ProtoMessage() {}

func (x *AWSVpnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfig.ProtoReflect.Descriptor instead.
func (*AWSVpnConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{3}
}

func (x *AWSVpnConfig) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfig) GetTgwId() *wrapperspb.StringValue {
	if x != nil {
		return x.TgwId
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnConnectionId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpnConnectionId
	}
	return nil
}

func (x *AWSVpnConfig) GetCgwId() *wrapperspb.StringValue {
	if x != nil {
		return x.CgwId
	}
	return nil
}

func (x *AWSVpnConfig) GetCloudeosRouterId() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudeosRouterId
	}
	return nil
}

func (x *AWSVpnConfig) GetCloudeosVpcId() *wrapperspb.StringValue {
	if x != nil {
		return x.CloudeosVpcId
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnTgwAttachmentId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpnTgwAttachmentId
	}
	return nil
}

func (x *AWSVpnConfig) GetTunnelInfoList() *TunnelInfoList {
	if x != nil {
		return x.TunnelInfoList
	}
	return nil
}

func (x *AWSVpnConfig) GetCnps() *wrapperspb.StringValue {
	if x != nil {
		return x.Cnps
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnGatewayId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpnGatewayId
	}
	return nil
}

type AWSVpnKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tf_id,json=tfId,proto3" json:"tf_id,omitempty"`
}

func (x *AWSVpnKey) Reset() {
	*x = AWSVpnKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnKey) ProtoMessage() {}

func (x *AWSVpnKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnKey.ProtoReflect.Descriptor instead.
func (*AWSVpnKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{4}
}

func (x *AWSVpnKey) GetTfId() *wrapperspb.StringValue {
	if x != nil {
		return x.TfId
	}
	return nil
}

type TgwStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesIn                  *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=bytes_in,json=bytesIn,proto3" json:"bytes_in,omitempty"`
	BytesOut                 *wrapperspb.DoubleValue `protobuf:"bytes,2,opt,name=bytes_out,json=bytesOut,proto3" json:"bytes_out,omitempty"`
	PacketsIn                *wrapperspb.DoubleValue `protobuf:"bytes,3,opt,name=packets_in,json=packetsIn,proto3" json:"packets_in,omitempty"`
	PacketsOut               *wrapperspb.DoubleValue `protobuf:"bytes,4,opt,name=packets_out,json=packetsOut,proto3" json:"packets_out,omitempty"`
	PacketDropCountBlackhole *wrapperspb.DoubleValue `protobuf:"bytes,5,opt,name=packet_drop_count_blackhole,json=packetDropCountBlackhole,proto3" json:"packet_drop_count_blackhole,omitempty"`
	PacketDropCountNoRoute   *wrapperspb.DoubleValue `protobuf:"bytes,6,opt,name=packet_drop_count_no_route,json=packetDropCountNoRoute,proto3" json:"packet_drop_count_no_route,omitempty"`
	BandwidthIn              *wrapperspb.DoubleValue `protobuf:"bytes,7,opt,name=bandwidth_in,json=bandwidthIn,proto3" json:"bandwidth_in,omitempty"`
	BandwidthOut             *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=bandwidth_out,json=bandwidthOut,proto3" json:"bandwidth_out,omitempty"`
	StatsTime                *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=stats_time,json=statsTime,proto3" json:"stats_time,omitempty"`
}

func (x *TgwStats) Reset() {
	*x = TgwStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TgwStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TgwStats) ProtoMessage() {}

func (x *TgwStats) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TgwStats.ProtoReflect.Descriptor instead.
func (*TgwStats) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{5}
}

func (x *TgwStats) GetBytesIn() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BytesIn
	}
	return nil
}

func (x *TgwStats) GetBytesOut() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BytesOut
	}
	return nil
}

func (x *TgwStats) GetPacketsIn() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PacketsIn
	}
	return nil
}

func (x *TgwStats) GetPacketsOut() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PacketsOut
	}
	return nil
}

func (x *TgwStats) GetPacketDropCountBlackhole() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PacketDropCountBlackhole
	}
	return nil
}

func (x *TgwStats) GetPacketDropCountNoRoute() *wrapperspb.DoubleValue {
	if x != nil {
		return x.PacketDropCountNoRoute
	}
	return nil
}

func (x *TgwStats) GetBandwidthIn() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BandwidthIn
	}
	return nil
}

func (x *TgwStats) GetBandwidthOut() *wrapperspb.DoubleValue {
	if x != nil {
		return x.BandwidthOut
	}
	return nil
}

func (x *TgwStats) GetStatsTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StatsTime
	}
	return nil
}

type AWSTgw struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                *AWSTgwKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	State              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty"`
	Region             *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	AccountId          *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TopologyName       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	AttachmentIds      *fmp.RepeatedString     `protobuf:"bytes,7,opt,name=attachment_ids,json=attachmentIds,proto3" json:"attachment_ids,omitempty"`
	CnpsToRouteTableId *fmp.MapStringString    `protobuf:"bytes,8,opt,name=cnps_to_route_table_id,json=cnpsToRouteTableId,proto3" json:"cnps_to_route_table_id,omitempty"`
	Stats              *TgwStats               `protobuf:"bytes,9,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *AWSTgw) Reset() {
	*x = AWSTgw{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgw) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgw) ProtoMessage() {}

func (x *AWSTgw) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgw.ProtoReflect.Descriptor instead.
func (*AWSTgw) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{6}
}

func (x *AWSTgw) GetKey() *AWSTgwKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSTgw) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *AWSTgw) GetState() *wrapperspb.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AWSTgw) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *AWSTgw) GetAccountId() *wrapperspb.StringValue {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *AWSTgw) GetTopologyName() *wrapperspb.StringValue {
	if x != nil {
		return x.TopologyName
	}
	return nil
}

func (x *AWSTgw) GetAttachmentIds() *fmp.RepeatedString {
	if x != nil {
		return x.AttachmentIds
	}
	return nil
}

func (x *AWSTgw) GetCnpsToRouteTableId() *fmp.MapStringString {
	if x != nil {
		return x.CnpsToRouteTableId
	}
	return nil
}

func (x *AWSTgw) GetStats() *TgwStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

type AWSTgwKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TgwId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
}

func (x *AWSTgwKey) Reset() {
	*x = AWSTgwKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwKey) ProtoMessage() {}

func (x *AWSTgwKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwKey.ProtoReflect.Descriptor instead.
func (*AWSTgwKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{7}
}

func (x *AWSTgwKey) GetTgwId() *wrapperspb.StringValue {
	if x != nil {
		return x.TgwId
	}
	return nil
}

type AWSTgwAttachment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                 *AWSTgwAttachmentKey    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	State               *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=state,proto3" json:"state,omitempty"`
	Region              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	AccountId           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
	TopologyName        *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	TgwId               *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	RouteTableId        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	Cnps                *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=cnps,proto3" json:"cnps,omitempty"`
	ResourceId          *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	VpcId               *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	Tun1State           *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=tun1_state,json=tun1State,proto3" json:"tun1_state,omitempty"`
	Tun2State           *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=tun2_state,json=tun2State,proto3" json:"tun2_state,omitempty"`
	Tun1LocalIpOutside  *fmp.IPAddress          `protobuf:"bytes,13,opt,name=tun1_local_ip_outside,json=tun1LocalIpOutside,proto3" json:"tun1_local_ip_outside,omitempty"`
	Tun1LocalIpInside   *fmp.IPAddress          `protobuf:"bytes,14,opt,name=tun1_local_ip_inside,json=tun1LocalIpInside,proto3" json:"tun1_local_ip_inside,omitempty"`
	Tun1RemoteIpOutside *fmp.IPAddress          `protobuf:"bytes,15,opt,name=tun1_remote_ip_outside,json=tun1RemoteIpOutside,proto3" json:"tun1_remote_ip_outside,omitempty"`
	Tun1RemoteIpInside  *fmp.IPAddress          `protobuf:"bytes,16,opt,name=tun1_remote_ip_inside,json=tun1RemoteIpInside,proto3" json:"tun1_remote_ip_inside,omitempty"`
	Tun2LocalIpOutside  *fmp.IPAddress          `protobuf:"bytes,17,opt,name=tun2_local_ip_outside,json=tun2LocalIpOutside,proto3" json:"tun2_local_ip_outside,omitempty"`
	Tun2LocalIpInside   *fmp.IPAddress          `protobuf:"bytes,18,opt,name=tun2_local_ip_inside,json=tun2LocalIpInside,proto3" json:"tun2_local_ip_inside,omitempty"`
	Tun2RemoteIpOutside *fmp.IPAddress          `protobuf:"bytes,19,opt,name=tun2_remote_ip_outside,json=tun2RemoteIpOutside,proto3" json:"tun2_remote_ip_outside,omitempty"`
	Tun2RemoteIpInside  *fmp.IPAddress          `protobuf:"bytes,20,opt,name=tun2_remote_ip_inside,json=tun2RemoteIpInside,proto3" json:"tun2_remote_ip_inside,omitempty"`
	PeerAttachmentIds   *fmp.RepeatedString     `protobuf:"bytes,21,opt,name=peer_attachment_ids,json=peerAttachmentIds,proto3" json:"peer_attachment_ids,omitempty"`
	Stats               *TgwStats               `protobuf:"bytes,22,opt,name=stats,proto3" json:"stats,omitempty"`
	TgwName             *wrapperspb.StringValue `protobuf:"bytes,23,opt,name=tgw_name,json=tgwName,proto3" json:"tgw_name,omitempty"`
}

func (x *AWSTgwAttachment) Reset() {
	*x = AWSTgwAttachment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachment) ProtoMessage() {}

func (x *AWSTgwAttachment) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachment.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachment) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{8}
}

func (x *AWSTgwAttachment) GetKey() *AWSTgwAttachmentKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSTgwAttachment) GetState() *wrapperspb.StringValue {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *AWSTgwAttachment) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *AWSTgwAttachment) GetAccountId() *wrapperspb.StringValue {
	if x != nil {
		return x.AccountId
	}
	return nil
}

func (x *AWSTgwAttachment) GetTopologyName() *wrapperspb.StringValue {
	if x != nil {
		return x.TopologyName
	}
	return nil
}

func (x *AWSTgwAttachment) GetTgwId() *wrapperspb.StringValue {
	if x != nil {
		return x.TgwId
	}
	return nil
}

func (x *AWSTgwAttachment) GetRouteTableId() *wrapperspb.StringValue {
	if x != nil {
		return x.RouteTableId
	}
	return nil
}

func (x *AWSTgwAttachment) GetCnps() *wrapperspb.StringValue {
	if x != nil {
		return x.Cnps
	}
	return nil
}

func (x *AWSTgwAttachment) GetResourceId() *wrapperspb.StringValue {
	if x != nil {
		return x.ResourceId
	}
	return nil
}

func (x *AWSTgwAttachment) GetVpcId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun1State() *wrapperspb.StringValue {
	if x != nil {
		return x.Tun1State
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun2State() *wrapperspb.StringValue {
	if x != nil {
		return x.Tun2State
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun1LocalIpOutside() *fmp.IPAddress {
	if x != nil {
		return x.Tun1LocalIpOutside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun1LocalIpInside() *fmp.IPAddress {
	if x != nil {
		return x.Tun1LocalIpInside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun1RemoteIpOutside() *fmp.IPAddress {
	if x != nil {
		return x.Tun1RemoteIpOutside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun1RemoteIpInside() *fmp.IPAddress {
	if x != nil {
		return x.Tun1RemoteIpInside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun2LocalIpOutside() *fmp.IPAddress {
	if x != nil {
		return x.Tun2LocalIpOutside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun2LocalIpInside() *fmp.IPAddress {
	if x != nil {
		return x.Tun2LocalIpInside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun2RemoteIpOutside() *fmp.IPAddress {
	if x != nil {
		return x.Tun2RemoteIpOutside
	}
	return nil
}

func (x *AWSTgwAttachment) GetTun2RemoteIpInside() *fmp.IPAddress {
	if x != nil {
		return x.Tun2RemoteIpInside
	}
	return nil
}

func (x *AWSTgwAttachment) GetPeerAttachmentIds() *fmp.RepeatedString {
	if x != nil {
		return x.PeerAttachmentIds
	}
	return nil
}

func (x *AWSTgwAttachment) GetStats() *TgwStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *AWSTgwAttachment) GetTgwName() *wrapperspb.StringValue {
	if x != nil {
		return x.TgwName
	}
	return nil
}

type AWSTgwAttachmentKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachmentId *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=attachment_id,json=attachmentId,proto3" json:"attachment_id,omitempty"`
}

func (x *AWSTgwAttachmentKey) Reset() {
	*x = AWSTgwAttachmentKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSTgwAttachmentKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSTgwAttachmentKey) ProtoMessage() {}

func (x *AWSTgwAttachmentKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSTgwAttachmentKey.ProtoReflect.Descriptor instead.
func (*AWSTgwAttachmentKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{9}
}

func (x *AWSTgwAttachmentKey) GetAttachmentId() *wrapperspb.StringValue {
	if x != nil {
		return x.AttachmentId
	}
	return nil
}

type SubnetKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An ID can be generated by the client to track resource
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SubnetKey) Reset() {
	*x = SubnetKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetKey) ProtoMessage() {}

func (x *SubnetKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetKey.ProtoReflect.Descriptor instead.
func (*SubnetKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{10}
}

func (x *SubnetKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type SubnetConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key       *SubnetKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SubnetId  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	CpT       CloudProviderType       `protobuf:"varint,3,opt,name=cp_t,json=cpT,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"cp_t,omitempty"`
	Cidr      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"`
	VpcId     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	AvailZone *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	PrimGw    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=prim_gw,json=primGw,proto3" json:"prim_gw,omitempty"`
	SecGw     *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=sec_gw,json=secGw,proto3" json:"sec_gw,omitempty"`
}

func (x *SubnetConfig) Reset() {
	*x = SubnetConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubnetConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetConfig) ProtoMessage() {}

func (x *SubnetConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetConfig.ProtoReflect.Descriptor instead.
func (*SubnetConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{11}
}

func (x *SubnetConfig) GetKey() *SubnetKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *SubnetConfig) GetSubnetId() *wrapperspb.StringValue {
	if x != nil {
		return x.SubnetId
	}
	return nil
}

func (x *SubnetConfig) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *SubnetConfig) GetCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *SubnetConfig) GetVpcId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *SubnetConfig) GetAvailZone() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailZone
	}
	return nil
}

func (x *SubnetConfig) GetPrimGw() *wrapperspb.StringValue {
	if x != nil {
		return x.PrimGw
	}
	return nil
}

func (x *SubnetConfig) GetSecGw() *wrapperspb.StringValue {
	if x != nil {
		return x.SecGw
	}
	return nil
}

type AzureVnetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nsg           *fmp.RepeatedString     `protobuf:"bytes,1,opt,name=nsg,proto3" json:"nsg,omitempty"`
	ResourceGroup *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Cidr          *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	AvailSet      *fmp.RepeatedString     `protobuf:"bytes,4,opt,name=avail_set,json=availSet,proto3" json:"avail_set,omitempty"`
	PeeringConnId *fmp.RepeatedString     `protobuf:"bytes,5,opt,name=peering_conn_id,json=peeringConnId,proto3" json:"peering_conn_id,omitempty"`
}

func (x *AzureVnetInfo) Reset() {
	*x = AzureVnetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureVnetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureVnetInfo) ProtoMessage() {}

func (x *AzureVnetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureVnetInfo.ProtoReflect.Descriptor instead.
func (*AzureVnetInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{12}
}

func (x *AzureVnetInfo) GetNsg() *fmp.RepeatedString {
	if x != nil {
		return x.Nsg
	}
	return nil
}

func (x *AzureVnetInfo) GetResourceGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.ResourceGroup
	}
	return nil
}

func (x *AzureVnetInfo) GetCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *AzureVnetInfo) GetAvailSet() *fmp.RepeatedString {
	if x != nil {
		return x.AvailSet
	}
	return nil
}

func (x *AzureVnetInfo) GetPeeringConnId() *fmp.RepeatedString {
	if x != nil {
		return x.PeeringConnId
	}
	return nil
}

type AwsVpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroup *fmp.RepeatedString     `protobuf:"bytes,1,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	Cidr          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	IgwId         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=igw_id,json=igwId,proto3" json:"igw_id,omitempty"`
	PeeringConnId *fmp.RepeatedString     `protobuf:"bytes,4,opt,name=peering_conn_id,json=peeringConnId,proto3" json:"peering_conn_id,omitempty"`
}

func (x *AwsVpcInfo) Reset() {
	*x = AwsVpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsVpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsVpcInfo) ProtoMessage() {}

func (x *AwsVpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsVpcInfo.ProtoReflect.Descriptor instead.
func (*AwsVpcInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{13}
}

func (x *AwsVpcInfo) GetSecurityGroup() *fmp.RepeatedString {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *AwsVpcInfo) GetCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.Cidr
	}
	return nil
}

func (x *AwsVpcInfo) GetIgwId() *wrapperspb.StringValue {
	if x != nil {
		return x.IgwId
	}
	return nil
}

func (x *AwsVpcInfo) GetPeeringConnId() *fmp.RepeatedString {
	if x != nil {
		return x.PeeringConnId
	}
	return nil
}

type PeerVpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerVpcCidr  *fmp.MapStringString    `protobuf:"bytes,1,opt,name=peer_vpc_cidr,json=peerVpcCidr,proto3" json:"peer_vpc_cidr,omitempty"`
	PeerRgName   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=peer_rg_name,json=peerRgName,proto3" json:"peer_rg_name,omitempty"`
	PeerVnetName *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=peer_vnet_name,json=peerVnetName,proto3" json:"peer_vnet_name,omitempty"`
	PeerVnetId   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=peer_vnet_id,json=peerVnetId,proto3" json:"peer_vnet_id,omitempty"`
}

func (x *PeerVpcInfo) Reset() {
	*x = PeerVpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerVpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerVpcInfo) ProtoMessage() {}

func (x *PeerVpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerVpcInfo.ProtoReflect.Descriptor instead.
func (*PeerVpcInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{14}
}

func (x *PeerVpcInfo) GetPeerVpcCidr() *fmp.MapStringString {
	if x != nil {
		return x.PeerVpcCidr
	}
	return nil
}

func (x *PeerVpcInfo) GetPeerRgName() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerRgName
	}
	return nil
}

func (x *PeerVpcInfo) GetPeerVnetName() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerVnetName
	}
	return nil
}

func (x *PeerVpcInfo) GetPeerVnetId() *wrapperspb.StringValue {
	if x != nil {
		return x.PeerVnetId
	}
	return nil
}

type VpcKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *VpcKey) Reset() {
	*x = VpcKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcKey) ProtoMessage() {}

func (x *VpcKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcKey.ProtoReflect.Descriptor instead.
func (*VpcKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{15}
}

func (x *VpcKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type VpcConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *VpcKey                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name   *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VpcId  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	CpT    CloudProviderType       `protobuf:"varint,4,opt,name=cp_t,json=cpT,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"cp_t,omitempty"`
	Region *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	// Topology related attributes
	RoleType       RoleType                `protobuf:"varint,6,opt,name=role_type,json=roleType,proto3,enum=arista.clouddeploy.v1.RoleType" json:"role_type,omitempty"`
	TopologyName   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	ClosName       *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=clos_name,json=closName,proto3" json:"clos_name,omitempty"`
	WanName        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=wan_name,json=wanName,proto3" json:"wan_name,omitempty"`
	AzVnetInfo     *AzureVnetInfo          `protobuf:"bytes,10,opt,name=az_vnet_info,json=azVnetInfo,proto3" json:"az_vnet_info,omitempty"`
	AwsVpcInfo     *AwsVpcInfo             `protobuf:"bytes,11,opt,name=aws_vpc_info,json=awsVpcInfo,proto3" json:"aws_vpc_info,omitempty"`
	Cnps           *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=cnps,proto3" json:"cnps,omitempty"`
	RouteReflector *wrapperspb.BoolValue   `protobuf:"bytes,13,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	// Other tags that can be used in queries
	Tags *fmp.MapStringString `protobuf:"bytes,14,opt,name=tags,proto3" json:"tags,omitempty"`
	// mapping between vpc_id -> cidr
	PeerVpcCidr *fmp.MapStringString `protobuf:"bytes,15,opt,name=peer_vpc_cidr,json=peerVpcCidr,proto3" json:"peer_vpc_cidr,omitempty"`
	// Vpc creation status
	StatusCode VpcStatusCode `protobuf:"varint,16,opt,name=status_code,json=statusCode,proto3,enum=arista.clouddeploy.v1.VpcStatusCode" json:"status_code,omitempty"`
	// account information
	Account      *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=account,proto3" json:"account,omitempty"`
	PeerVpcInfo  *PeerVpcInfo            `protobuf:"bytes,18,opt,name=peer_vpc_info,json=peerVpcInfo,proto3" json:"peer_vpc_info,omitempty"`
	TgwConnected *wrapperspb.BoolValue   `protobuf:"bytes,19,opt,name=tgw_connected,json=tgwConnected,proto3" json:"tgw_connected,omitempty"`
	Cloudeos     *wrapperspb.BoolValue   `protobuf:"bytes,20,opt,name=cloudeos,proto3" json:"cloudeos,omitempty"`
	ManagedBy    *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	DeployMode   *wrapperspb.StringValue `protobuf:"bytes,22,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
}

func (x *VpcConfig) Reset() {
	*x = VpcConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VpcConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VpcConfig) ProtoMessage() {}

func (x *VpcConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VpcConfig.ProtoReflect.Descriptor instead.
func (*VpcConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{16}
}

func (x *VpcConfig) GetKey() *VpcKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *VpcConfig) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *VpcConfig) GetVpcId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *VpcConfig) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *VpcConfig) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *VpcConfig) GetRoleType() RoleType {
	if x != nil {
		return x.RoleType
	}
	return RoleType_ROLE_TYPE_UNSPECIFIED
}

func (x *VpcConfig) GetTopologyName() *wrapperspb.StringValue {
	if x != nil {
		return x.TopologyName
	}
	return nil
}

func (x *VpcConfig) GetClosName() *wrapperspb.StringValue {
	if x != nil {
		return x.ClosName
	}
	return nil
}

func (x *VpcConfig) GetWanName() *wrapperspb.StringValue {
	if x != nil {
		return x.WanName
	}
	return nil
}

func (x *VpcConfig) GetAzVnetInfo() *AzureVnetInfo {
	if x != nil {
		return x.AzVnetInfo
	}
	return nil
}

func (x *VpcConfig) GetAwsVpcInfo() *AwsVpcInfo {
	if x != nil {
		return x.AwsVpcInfo
	}
	return nil
}

func (x *VpcConfig) GetCnps() *wrapperspb.StringValue {
	if x != nil {
		return x.Cnps
	}
	return nil
}

func (x *VpcConfig) GetRouteReflector() *wrapperspb.BoolValue {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *VpcConfig) GetTags() *fmp.MapStringString {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *VpcConfig) GetPeerVpcCidr() *fmp.MapStringString {
	if x != nil {
		return x.PeerVpcCidr
	}
	return nil
}

func (x *VpcConfig) GetStatusCode() VpcStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return VpcStatusCode_VPC_STATUS_CODE_UNSPECIFIED
}

func (x *VpcConfig) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *VpcConfig) GetPeerVpcInfo() *PeerVpcInfo {
	if x != nil {
		return x.PeerVpcInfo
	}
	return nil
}

func (x *VpcConfig) GetTgwConnected() *wrapperspb.BoolValue {
	if x != nil {
		return x.TgwConnected
	}
	return nil
}

func (x *VpcConfig) GetCloudeos() *wrapperspb.BoolValue {
	if x != nil {
		return x.Cloudeos
	}
	return nil
}

func (x *VpcConfig) GetManagedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ManagedBy
	}
	return nil
}

func (x *VpcConfig) GetDeployMode() *wrapperspb.StringValue {
	if x != nil {
		return x.DeployMode
	}
	return nil
}

type WanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WanName              *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=wan_name,json=wanName,proto3" json:"wan_name,omitempty"`
	CpType               CloudProviderType       `protobuf:"varint,2,opt,name=cp_type,json=cpType,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"cp_type,omitempty"`
	PeerNames            *fmp.RepeatedString     `protobuf:"bytes,3,opt,name=peer_names,json=peerNames,proto3" json:"peer_names,omitempty"`
	EdgeEdgePeering      *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=edge_edge_peering,json=edgeEdgePeering,proto3" json:"edge_edge_peering,omitempty"`
	EdgeEdgeIgw          *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=edge_edge_igw,json=edgeEdgeIgw,proto3" json:"edge_edge_igw,omitempty"`
	EdgeDedicatedConnect *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=edge_dedicated_connect,json=edgeDedicatedConnect,proto3" json:"edge_dedicated_connect,omitempty"` // DirectConnect
	CvpContainerName     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=cvp_container_name,json=cvpContainerName,proto3" json:"cvp_container_name,omitempty"`
}

func (x *WanInfo) Reset() {
	*x = WanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanInfo) ProtoMessage() {}

func (x *WanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanInfo.ProtoReflect.Descriptor instead.
func (*WanInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{17}
}

func (x *WanInfo) GetWanName() *wrapperspb.StringValue {
	if x != nil {
		return x.WanName
	}
	return nil
}

func (x *WanInfo) GetCpType() CloudProviderType {
	if x != nil {
		return x.CpType
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *WanInfo) GetPeerNames() *fmp.RepeatedString {
	if x != nil {
		return x.PeerNames
	}
	return nil
}

func (x *WanInfo) GetEdgeEdgePeering() *wrapperspb.BoolValue {
	if x != nil {
		return x.EdgeEdgePeering
	}
	return nil
}

func (x *WanInfo) GetEdgeEdgeIgw() *wrapperspb.BoolValue {
	if x != nil {
		return x.EdgeEdgeIgw
	}
	return nil
}

func (x *WanInfo) GetEdgeDedicatedConnect() *wrapperspb.BoolValue {
	if x != nil {
		return x.EdgeDedicatedConnect
	}
	return nil
}

func (x *WanInfo) GetCvpContainerName() *wrapperspb.StringValue {
	if x != nil {
		return x.CvpContainerName
	}
	return nil
}

type ClosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClosName         *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=clos_name,json=closName,proto3" json:"clos_name,omitempty"`
	CpType           CloudProviderType       `protobuf:"varint,2,opt,name=cp_type,json=cpType,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"cp_type,omitempty"`
	Fabric           FabricType              `protobuf:"varint,3,opt,name=fabric,proto3,enum=arista.clouddeploy.v1.FabricType" json:"fabric,omitempty"`     // for Leaf connectivity
	LeafEdgePeering  *wrapperspb.BoolValue   `protobuf:"bytes,4,opt,name=leaf_edge_peering,json=leafEdgePeering,proto3" json:"leaf_edge_peering,omitempty"` // VPC peering b/w leaf and edge
	LeafEdgeIgw      *wrapperspb.BoolValue   `protobuf:"bytes,5,opt,name=leaf_edge_igw,json=leafEdgeIgw,proto3" json:"leaf_edge_igw,omitempty"`             // IGW b/w leaf and edge
	LeafEncryption   *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=leaf_encryption,json=leafEncryption,proto3" json:"leaf_encryption,omitempty"`      // IPSec b/w leaf and edge
	CvpContainerName *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=cvp_container_name,json=cvpContainerName,proto3" json:"cvp_container_name,omitempty"`
}

func (x *ClosInfo) Reset() {
	*x = ClosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosInfo) ProtoMessage() {}

func (x *ClosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosInfo.ProtoReflect.Descriptor instead.
func (*ClosInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{18}
}

func (x *ClosInfo) GetClosName() *wrapperspb.StringValue {
	if x != nil {
		return x.ClosName
	}
	return nil
}

func (x *ClosInfo) GetCpType() CloudProviderType {
	if x != nil {
		return x.CpType
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *ClosInfo) GetFabric() FabricType {
	if x != nil {
		return x.Fabric
	}
	return FabricType_FABRIC_TYPE_UNSPECIFIED
}

func (x *ClosInfo) GetLeafEdgePeering() *wrapperspb.BoolValue {
	if x != nil {
		return x.LeafEdgePeering
	}
	return nil
}

func (x *ClosInfo) GetLeafEdgeIgw() *wrapperspb.BoolValue {
	if x != nil {
		return x.LeafEdgeIgw
	}
	return nil
}

func (x *ClosInfo) GetLeafEncryption() *wrapperspb.BoolValue {
	if x != nil {
		return x.LeafEncryption
	}
	return nil
}

func (x *ClosInfo) GetCvpContainerName() *wrapperspb.StringValue {
	if x != nil {
		return x.CvpContainerName
	}
	return nil
}

type TopologyInfoKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TopologyInfoKey) Reset() {
	*x = TopologyInfoKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoKey) ProtoMessage() {}

func (x *TopologyInfoKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoKey.ProtoReflect.Descriptor instead.
func (*TopologyInfoKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{19}
}

func (x *TopologyInfoKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type TopologyInfoConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                 *TopologyInfoKey        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name                *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	TopoType            TopologyInfoType        `protobuf:"varint,3,opt,name=topo_type,json=topoType,proto3,enum=arista.clouddeploy.v1.TopologyInfoType" json:"topo_type,omitempty"`
	BgpAsnLow           *wrapperspb.Int32Value  `protobuf:"bytes,4,opt,name=bgp_asn_low,json=bgpAsnLow,proto3" json:"bgp_asn_low,omitempty"`
	BgpAsnHigh          *wrapperspb.Int32Value  `protobuf:"bytes,5,opt,name=bgp_asn_high,json=bgpAsnHigh,proto3" json:"bgp_asn_high,omitempty"`
	VtepIpCidr          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=vtep_ip_cidr,json=vtepIpCidr,proto3" json:"vtep_ip_cidr,omitempty"`                              // CIDR block for VTEP IPs on vEOS
	TerminattrIpCidr    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=terminattr_ip_cidr,json=terminattrIpCidr,proto3" json:"terminattr_ip_cidr,omitempty"`            // Loopback IP range on vEOS
	DpsControlPlaneCidr *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=dps_control_plane_cidr,json=dpsControlPlaneCidr,proto3" json:"dps_control_plane_cidr,omitempty"` // Dps Control Plane IP Cidr
	ManagedDevices      *fmp.RepeatedString     `protobuf:"bytes,9,opt,name=managed_devices,json=managedDevices,proto3" json:"managed_devices,omitempty"`                    // Hostnames of existing vEOS instances
	CvaasDomain         *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=cvaas_domain,json=cvaasDomain,proto3" json:"cvaas_domain,omitempty"`                            //CVaaS Domain Name
	CvaasServer         *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=cvaas_server,json=cvaasServer,proto3" json:"cvaas_server,omitempty"`
	WanInfo             *WanInfo                `protobuf:"bytes,12,opt,name=wan_info,json=wanInfo,proto3" json:"wan_info,omitempty"`
	ClosInfo            *ClosInfo               `protobuf:"bytes,13,opt,name=clos_info,json=closInfo,proto3" json:"clos_info,omitempty"`
	Version             *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	DeployMode          *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
}

func (x *TopologyInfoConfig) Reset() {
	*x = TopologyInfoConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfoConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfoConfig) ProtoMessage() {}

func (x *TopologyInfoConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfoConfig.ProtoReflect.Descriptor instead.
func (*TopologyInfoConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{20}
}

func (x *TopologyInfoConfig) GetKey() *TopologyInfoKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *TopologyInfoConfig) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *TopologyInfoConfig) GetTopoType() TopologyInfoType {
	if x != nil {
		return x.TopoType
	}
	return TopologyInfoType_TOPOLOGY_INFO_TYPE_UNSPECIFIED
}

func (x *TopologyInfoConfig) GetBgpAsnLow() *wrapperspb.Int32Value {
	if x != nil {
		return x.BgpAsnLow
	}
	return nil
}

func (x *TopologyInfoConfig) GetBgpAsnHigh() *wrapperspb.Int32Value {
	if x != nil {
		return x.BgpAsnHigh
	}
	return nil
}

func (x *TopologyInfoConfig) GetVtepIpCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.VtepIpCidr
	}
	return nil
}

func (x *TopologyInfoConfig) GetTerminattrIpCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.TerminattrIpCidr
	}
	return nil
}

func (x *TopologyInfoConfig) GetDpsControlPlaneCidr() *wrapperspb.StringValue {
	if x != nil {
		return x.DpsControlPlaneCidr
	}
	return nil
}

func (x *TopologyInfoConfig) GetManagedDevices() *fmp.RepeatedString {
	if x != nil {
		return x.ManagedDevices
	}
	return nil
}

func (x *TopologyInfoConfig) GetCvaasDomain() *wrapperspb.StringValue {
	if x != nil {
		return x.CvaasDomain
	}
	return nil
}

func (x *TopologyInfoConfig) GetCvaasServer() *wrapperspb.StringValue {
	if x != nil {
		return x.CvaasServer
	}
	return nil
}

func (x *TopologyInfoConfig) GetWanInfo() *WanInfo {
	if x != nil {
		return x.WanInfo
	}
	return nil
}

func (x *TopologyInfoConfig) GetClosInfo() *ClosInfo {
	if x != nil {
		return x.ClosInfo
	}
	return nil
}

func (x *TopologyInfoConfig) GetVersion() *wrapperspb.StringValue {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *TopologyInfoConfig) GetDeployMode() *wrapperspb.StringValue {
	if x != nil {
		return x.DeployMode
	}
	return nil
}

type RouteTableIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public   *fmp.RepeatedString `protobuf:"bytes,1,opt,name=public,proto3" json:"public,omitempty"`
	Private  *fmp.RepeatedString `protobuf:"bytes,2,opt,name=private,proto3" json:"private,omitempty"`
	Internal *fmp.RepeatedString `protobuf:"bytes,3,opt,name=internal,proto3" json:"internal,omitempty"`
}

func (x *RouteTableIds) Reset() {
	*x = RouteTableIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableIds) ProtoMessage() {}

func (x *RouteTableIds) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableIds.ProtoReflect.Descriptor instead.
func (*RouteTableIds) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{21}
}

func (x *RouteTableIds) GetPublic() *fmp.RepeatedString {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *RouteTableIds) GetPrivate() *fmp.RepeatedString {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *RouteTableIds) GetInternal() *fmp.RepeatedString {
	if x != nil {
		return x.Internal
	}
	return nil
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	Name          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IntfType      NetworkInterfaceType    `protobuf:"varint,3,opt,name=intf_type,json=intfType,proto3,enum=arista.clouddeploy.v1.NetworkInterfaceType" json:"intf_type,omitempty"`
	PrivateIpAddr *fmp.RepeatedString     `protobuf:"bytes,4,opt,name=private_ip_addr,json=privateIpAddr,proto3" json:"private_ip_addr,omitempty"`
	PublicIpAddr  *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=public_ip_addr,json=publicIpAddr,proto3" json:"public_ip_addr,omitempty"`
	Subnet        *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SecurityGroup *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{22}
}

func (x *NetworkInterface) GetIntfId() *wrapperspb.StringValue {
	if x != nil {
		return x.IntfId
	}
	return nil
}

func (x *NetworkInterface) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *NetworkInterface) GetIntfType() NetworkInterfaceType {
	if x != nil {
		return x.IntfType
	}
	return NetworkInterfaceType_NETWORK_INTERFACE_TYPE_UNSPECIFIED
}

func (x *NetworkInterface) GetPrivateIpAddr() *fmp.RepeatedString {
	if x != nil {
		return x.PrivateIpAddr
	}
	return nil
}

func (x *NetworkInterface) GetPublicIpAddr() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicIpAddr
	}
	return nil
}

func (x *NetworkInterface) GetSubnet() *wrapperspb.StringValue {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *NetworkInterface) GetSecurityGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

type CVInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CloudVision reports status of the deployment
	// using this message. This is ReadOnly for the
	// clients.
	CvStatusCode              CVStatusCode            `protobuf:"varint,1,opt,name=cv_status_code,json=cvStatusCode,proto3,enum=arista.clouddeploy.v1.CVStatusCode" json:"cv_status_code,omitempty"`
	BootstrapCfg              *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=bootstrap_cfg,json=bootstrapCfg,proto3" json:"bootstrap_cfg,omitempty"`
	HaRtrId                   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=ha_rtr_id,json=haRtrId,proto3" json:"ha_rtr_id,omitempty"`
	PeerVpcRtTableId          *fmp.RepeatedString     `protobuf:"bytes,4,opt,name=peer_vpc_rt_table_id,json=peerVpcRtTableId,proto3" json:"peer_vpc_rt_table_id,omitempty"`
	HaRtTableIds              *RouteTableIds          `protobuf:"bytes,5,opt,name=ha_rt_table_ids,json=haRtTableIds,proto3" json:"ha_rt_table_ids,omitempty"`
	CvStatusDesc              *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=cv_status_desc,json=cvStatusDesc,proto3" json:"cv_status_desc,omitempty"`
	CvStatusRecommendedAction *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=cv_status_recommended_action,json=cvStatusRecommendedAction,proto3" json:"cv_status_recommended_action,omitempty"`
	DeviceStatus              DeviceStatusCode        `protobuf:"varint,8,opt,name=device_status,json=deviceStatus,proto3,enum=arista.clouddeploy.v1.DeviceStatusCode" json:"device_status,omitempty"`
}

func (x *CVInfo) Reset() {
	*x = CVInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVInfo) ProtoMessage() {}

func (x *CVInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVInfo.ProtoReflect.Descriptor instead.
func (*CVInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{23}
}

func (x *CVInfo) GetCvStatusCode() CVStatusCode {
	if x != nil {
		return x.CvStatusCode
	}
	return CVStatusCode_CV_STATUS_CODE_UNSPECIFIED
}

func (x *CVInfo) GetBootstrapCfg() *wrapperspb.StringValue {
	if x != nil {
		return x.BootstrapCfg
	}
	return nil
}

func (x *CVInfo) GetHaRtrId() *wrapperspb.StringValue {
	if x != nil {
		return x.HaRtrId
	}
	return nil
}

func (x *CVInfo) GetPeerVpcRtTableId() *fmp.RepeatedString {
	if x != nil {
		return x.PeerVpcRtTableId
	}
	return nil
}

func (x *CVInfo) GetHaRtTableIds() *RouteTableIds {
	if x != nil {
		return x.HaRtTableIds
	}
	return nil
}

func (x *CVInfo) GetCvStatusDesc() *wrapperspb.StringValue {
	if x != nil {
		return x.CvStatusDesc
	}
	return nil
}

func (x *CVInfo) GetCvStatusRecommendedAction() *wrapperspb.StringValue {
	if x != nil {
		return x.CvStatusRecommendedAction
	}
	return nil
}

func (x *CVInfo) GetDeviceStatus() DeviceStatusCode {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatusCode_DEVICE_STATUS_CODE_UNSPECIFIED
}

type AzureRouterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailZone    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	ResGroup     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=res_group,json=resGroup,proto3" json:"res_group,omitempty"`
	InstanceType *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	AvailSet     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=avail_set,json=availSet,proto3" json:"avail_set,omitempty"`
}

func (x *AzureRouterDetail) Reset() {
	*x = AzureRouterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureRouterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureRouterDetail) ProtoMessage() {}

func (x *AzureRouterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureRouterDetail.ProtoReflect.Descriptor instead.
func (*AzureRouterDetail) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{24}
}

func (x *AzureRouterDetail) GetAvailZone() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailZone
	}
	return nil
}

func (x *AzureRouterDetail) GetResGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.ResGroup
	}
	return nil
}

func (x *AzureRouterDetail) GetInstanceType() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceType
	}
	return nil
}

func (x *AzureRouterDetail) GetAvailSet() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailSet
	}
	return nil
}

type AwsRouterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailZone    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	InstanceType *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
}

func (x *AwsRouterDetail) Reset() {
	*x = AwsRouterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRouterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRouterDetail) ProtoMessage() {}

func (x *AwsRouterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRouterDetail.ProtoReflect.Descriptor instead.
func (*AwsRouterDetail) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{25}
}

func (x *AwsRouterDetail) GetAvailZone() *wrapperspb.StringValue {
	if x != nil {
		return x.AvailZone
	}
	return nil
}

func (x *AwsRouterDetail) GetInstanceType() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceType
	}
	return nil
}

// Id is the router key in aeris
type RouterKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// an ID can be generated by the client to track resource
	Id *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *RouterKey) Reset() {
	*x = RouterKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterKey) ProtoMessage() {}

func (x *RouterKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterKey.ProtoReflect.Descriptor instead.
func (*RouterKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{26}
}

func (x *RouterKey) GetId() *wrapperspb.StringValue {
	if x != nil {
		return x.Id
	}
	return nil
}

type RepeatedNetworkInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*NetworkInterface `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *RepeatedNetworkInterfaces) Reset() {
	*x = RepeatedNetworkInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedNetworkInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedNetworkInterfaces) ProtoMessage() {}

func (x *RepeatedNetworkInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedNetworkInterfaces.ProtoReflect.Descriptor instead.
func (*RepeatedNetworkInterfaces) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{27}
}

func (x *RepeatedNetworkInterfaces) GetValues() []*NetworkInterface {
	if x != nil {
		return x.Values
	}
	return nil
}

type RouterConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key        *RouterKey              `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	VpcId      *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	CpT        CloudProviderType       `protobuf:"varint,4,opt,name=cp_t,json=cpT,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"cp_t,omitempty"`
	Region     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=region,proto3" json:"region,omitempty"`
	InstanceId *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	HaName     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=ha_name,json=haName,proto3" json:"ha_name,omitempty"`
	// CNPS tag that identifies vrf
	Cnps *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=cnps,proto3" json:"cnps,omitempty"`
	// Other tags that can be used in queries
	Tags                  *fmp.MapStringString    `protobuf:"bytes,9,opt,name=tags,proto3" json:"tags,omitempty"`
	DeviceEnrollmentToken *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=device_enrollment_token,json=deviceEnrollmentToken,proto3" json:"device_enrollment_token,omitempty"`
	RtTableIds            *RouteTableIds          `protobuf:"bytes,11,opt,name=rt_table_ids,json=rtTableIds,proto3" json:"rt_table_ids,omitempty"`
	RouteReflector        *wrapperspb.BoolValue   `protobuf:"bytes,12,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	// Based upon cp_t, either one of the following two fields will be set
	AwsRtrDetail *AwsRouterDetail           `protobuf:"bytes,13,opt,name=aws_rtr_detail,json=awsRtrDetail,proto3" json:"aws_rtr_detail,omitempty"`
	AzRtrDetail  *AzureRouterDetail         `protobuf:"bytes,14,opt,name=az_rtr_detail,json=azRtrDetail,proto3" json:"az_rtr_detail,omitempty"`
	Intf         *RepeatedNetworkInterfaces `protobuf:"bytes,15,opt,name=intf,proto3" json:"intf,omitempty"`
	DepStatus    DeploymentStatusCode       `protobuf:"varint,16,opt,name=dep_status,json=depStatus,proto3,enum=arista.clouddeploy.v1.DeploymentStatusCode" json:"dep_status,omitempty"`
	// Field filled in by CVP. Client should never set this
	CvInfo *CVInfo `protobuf:"bytes,17,opt,name=cv_info,json=cvInfo,proto3" json:"cv_info,omitempty"`
	// Field set by clouddeploy app for UI, client should never set this
	DeviceSerialNum *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=device_serial_num,json=deviceSerialNum,proto3" json:"device_serial_num,omitempty"`
	// Bgp ASN generated by clouddeploy app, client should never set this
	BgpAsn     *wrapperspb.Int32Value  `protobuf:"bytes,19,opt,name=bgp_asn,json=bgpAsn,proto3" json:"bgp_asn,omitempty"`
	ManagedBy  *wrapperspb.StringValue `protobuf:"bytes,20,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	DeployMode *wrapperspb.StringValue `protobuf:"bytes,21,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
}

func (x *RouterConfig) Reset() {
	*x = RouterConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterConfig) ProtoMessage() {}

func (x *RouterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterConfig.ProtoReflect.Descriptor instead.
func (*RouterConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{28}
}

func (x *RouterConfig) GetKey() *RouterKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *RouterConfig) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RouterConfig) GetVpcId() *wrapperspb.StringValue {
	if x != nil {
		return x.VpcId
	}
	return nil
}

func (x *RouterConfig) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *RouterConfig) GetRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.Region
	}
	return nil
}

func (x *RouterConfig) GetInstanceId() *wrapperspb.StringValue {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *RouterConfig) GetHaName() *wrapperspb.StringValue {
	if x != nil {
		return x.HaName
	}
	return nil
}

func (x *RouterConfig) GetCnps() *wrapperspb.StringValue {
	if x != nil {
		return x.Cnps
	}
	return nil
}

func (x *RouterConfig) GetTags() *fmp.MapStringString {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *RouterConfig) GetDeviceEnrollmentToken() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceEnrollmentToken
	}
	return nil
}

func (x *RouterConfig) GetRtTableIds() *RouteTableIds {
	if x != nil {
		return x.RtTableIds
	}
	return nil
}

func (x *RouterConfig) GetRouteReflector() *wrapperspb.BoolValue {
	if x != nil {
		return x.RouteReflector
	}
	return nil
}

func (x *RouterConfig) GetAwsRtrDetail() *AwsRouterDetail {
	if x != nil {
		return x.AwsRtrDetail
	}
	return nil
}

func (x *RouterConfig) GetAzRtrDetail() *AzureRouterDetail {
	if x != nil {
		return x.AzRtrDetail
	}
	return nil
}

func (x *RouterConfig) GetIntf() *RepeatedNetworkInterfaces {
	if x != nil {
		return x.Intf
	}
	return nil
}

func (x *RouterConfig) GetDepStatus() DeploymentStatusCode {
	if x != nil {
		return x.DepStatus
	}
	return DeploymentStatusCode_DEPLOYMENT_STATUS_CODE_UNSPECIFIED
}

func (x *RouterConfig) GetCvInfo() *CVInfo {
	if x != nil {
		return x.CvInfo
	}
	return nil
}

func (x *RouterConfig) GetDeviceSerialNum() *wrapperspb.StringValue {
	if x != nil {
		return x.DeviceSerialNum
	}
	return nil
}

func (x *RouterConfig) GetBgpAsn() *wrapperspb.Int32Value {
	if x != nil {
		return x.BgpAsn
	}
	return nil
}

func (x *RouterConfig) GetManagedBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ManagedBy
	}
	return nil
}

func (x *RouterConfig) GetDeployMode() *wrapperspb.StringValue {
	if x != nil {
		return x.DeployMode
	}
	return nil
}

type PathKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcVpcUuid    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=src_vpc_uuid,json=srcVpcUuid,proto3" json:"src_vpc_uuid,omitempty"`
	LocalRtrUuid  *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=local_rtr_uuid,json=localRtrUuid,proto3" json:"local_rtr_uuid,omitempty"`
	DstVpcUuid    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=dst_vpc_uuid,json=dstVpcUuid,proto3" json:"dst_vpc_uuid,omitempty"`
	RemoteRtrUuid *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=remote_rtr_uuid,json=remoteRtrUuid,proto3" json:"remote_rtr_uuid,omitempty"`
	UlT           UnderlayConnectionType  `protobuf:"varint,5,opt,name=ul_t,json=ulT,proto3,enum=arista.clouddeploy.v1.UnderlayConnectionType" json:"ul_t,omitempty"`
}

func (x *PathKey) Reset() {
	*x = PathKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathKey) ProtoMessage() {}

func (x *PathKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathKey.ProtoReflect.Descriptor instead.
func (*PathKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{29}
}

func (x *PathKey) GetSrcVpcUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.SrcVpcUuid
	}
	return nil
}

func (x *PathKey) GetLocalRtrUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalRtrUuid
	}
	return nil
}

func (x *PathKey) GetDstVpcUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.DstVpcUuid
	}
	return nil
}

func (x *PathKey) GetRemoteRtrUuid() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteRtrUuid
	}
	return nil
}

func (x *PathKey) GetUlT() UnderlayConnectionType {
	if x != nil {
		return x.UlT
	}
	return UnderlayConnectionType_UNDERLAY_CONNECTION_TYPE_UNSPECIFIED
}

type PathCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyMs *wrapperspb.Int64Value `protobuf:"bytes,1,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	JitterMs  *wrapperspb.Int64Value `protobuf:"bytes,2,opt,name=jitter_ms,json=jitterMs,proto3" json:"jitter_ms,omitempty"`
	PktLossPc *wrapperspb.Int64Value `protobuf:"bytes,3,opt,name=pkt_loss_pc,json=pktLossPc,proto3" json:"pkt_loss_pc,omitempty"`
	BwMbps    *wrapperspb.Int64Value `protobuf:"bytes,4,opt,name=bw_mbps,json=bwMbps,proto3" json:"bw_mbps,omitempty"`
	Up        *wrapperspb.BoolValue  `protobuf:"bytes,5,opt,name=up,proto3" json:"up,omitempty"`
	Uptime    *wrapperspb.Int64Value `protobuf:"bytes,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
}

func (x *PathCharacteristics) Reset() {
	*x = PathCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathCharacteristics) ProtoMessage() {}

func (x *PathCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathCharacteristics.ProtoReflect.Descriptor instead.
func (*PathCharacteristics) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{30}
}

func (x *PathCharacteristics) GetLatencyMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.LatencyMs
	}
	return nil
}

func (x *PathCharacteristics) GetJitterMs() *wrapperspb.Int64Value {
	if x != nil {
		return x.JitterMs
	}
	return nil
}

func (x *PathCharacteristics) GetPktLossPc() *wrapperspb.Int64Value {
	if x != nil {
		return x.PktLossPc
	}
	return nil
}

func (x *PathCharacteristics) GetBwMbps() *wrapperspb.Int64Value {
	if x != nil {
		return x.BwMbps
	}
	return nil
}

func (x *PathCharacteristics) GetUp() *wrapperspb.BoolValue {
	if x != nil {
		return x.Up
	}
	return nil
}

func (x *PathCharacteristics) GetUptime() *wrapperspb.Int64Value {
	if x != nil {
		return x.Uptime
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key              *PathKey                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	SrcVpcCloudId    *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=src_vpc_cloud_id,json=srcVpcCloudId,proto3" json:"src_vpc_cloud_id,omitempty"`
	SrcVpcName       *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=src_vpc_name,json=srcVpcName,proto3" json:"src_vpc_name,omitempty"`
	LocalRtrCloudId  *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=local_rtr_cloud_id,json=localRtrCloudId,proto3" json:"local_rtr_cloud_id,omitempty"`
	LocalRtrName     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=local_rtr_name,json=localRtrName,proto3" json:"local_rtr_name,omitempty"`
	LocalIntfIpAddr  *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=local_intf_ip_addr,json=localIntfIpAddr,proto3" json:"local_intf_ip_addr,omitempty"`
	SrcRegion        *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=src_region,json=srcRegion,proto3" json:"src_region,omitempty"`
	SrcCpT           CloudProviderType       `protobuf:"varint,8,opt,name=src_cp_t,json=srcCpT,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"src_cp_t,omitempty"`
	DstVpcCloudId    *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=dst_vpc_cloud_id,json=dstVpcCloudId,proto3" json:"dst_vpc_cloud_id,omitempty"`
	DstVpcName       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=dst_vpc_name,json=dstVpcName,proto3" json:"dst_vpc_name,omitempty"`
	RemoteRtrCloudId *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=remote_rtr_cloud_id,json=remoteRtrCloudId,proto3" json:"remote_rtr_cloud_id,omitempty"`
	RemoteRtrName    *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=remote_rtr_name,json=remoteRtrName,proto3" json:"remote_rtr_name,omitempty"`
	RemoteIntfIpAddr *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=remote_intf_ip_addr,json=remoteIntfIpAddr,proto3" json:"remote_intf_ip_addr,omitempty"`
	DstRegion        *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=dst_region,json=dstRegion,proto3" json:"dst_region,omitempty"`
	DstCpT           CloudProviderType       `protobuf:"varint,15,opt,name=dst_cp_t,json=dstCpT,proto3,enum=arista.clouddeploy.v1.CloudProviderType" json:"dst_cp_t,omitempty"`
	TopologyName     *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	PathChar         *PathCharacteristics    `protobuf:"bytes,17,opt,name=path_char,json=pathChar,proto3" json:"path_char,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{31}
}

func (x *Path) GetKey() *PathKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *Path) GetSrcVpcCloudId() *wrapperspb.StringValue {
	if x != nil {
		return x.SrcVpcCloudId
	}
	return nil
}

func (x *Path) GetSrcVpcName() *wrapperspb.StringValue {
	if x != nil {
		return x.SrcVpcName
	}
	return nil
}

func (x *Path) GetLocalRtrCloudId() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalRtrCloudId
	}
	return nil
}

func (x *Path) GetLocalRtrName() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalRtrName
	}
	return nil
}

func (x *Path) GetLocalIntfIpAddr() *wrapperspb.StringValue {
	if x != nil {
		return x.LocalIntfIpAddr
	}
	return nil
}

func (x *Path) GetSrcRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.SrcRegion
	}
	return nil
}

func (x *Path) GetSrcCpT() CloudProviderType {
	if x != nil {
		return x.SrcCpT
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *Path) GetDstVpcCloudId() *wrapperspb.StringValue {
	if x != nil {
		return x.DstVpcCloudId
	}
	return nil
}

func (x *Path) GetDstVpcName() *wrapperspb.StringValue {
	if x != nil {
		return x.DstVpcName
	}
	return nil
}

func (x *Path) GetRemoteRtrCloudId() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteRtrCloudId
	}
	return nil
}

func (x *Path) GetRemoteRtrName() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteRtrName
	}
	return nil
}

func (x *Path) GetRemoteIntfIpAddr() *wrapperspb.StringValue {
	if x != nil {
		return x.RemoteIntfIpAddr
	}
	return nil
}

func (x *Path) GetDstRegion() *wrapperspb.StringValue {
	if x != nil {
		return x.DstRegion
	}
	return nil
}

func (x *Path) GetDstCpT() CloudProviderType {
	if x != nil {
		return x.DstCpT
	}
	return CloudProviderType_CLOUD_PROVIDER_TYPE_UNSPECIFIED
}

func (x *Path) GetTopologyName() *wrapperspb.StringValue {
	if x != nil {
		return x.TopologyName
	}
	return nil
}

func (x *Path) GetPathChar() *PathCharacteristics {
	if x != nil {
		return x.PathChar
	}
	return nil
}

var File_arista_clouddeploy_v1_clouddeploy_proto protoreflect.FileDescriptor

var file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70, 0x2f, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x05, 0x0a, 0x09,
	0x49, 0x70, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6b, 0x65,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x69, 0x6b, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0e,
	0x69, 0x6b, 0x65, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0d, 0x69, 0x6b, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x69, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x66, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x69, 0x6b, 0x65, 0x50, 0x66, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x69, 0x6b, 0x65,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x69, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x12, 0x45, 0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x70,
	0x73, 0x65, 0x63, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x66, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x66, 0x73, 0x12, 0x3b,
	0x0a, 0x0a, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64,
	0x70, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x64, 0x70, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0b,
	0x64, 0x70, 0x64, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x64, 0x70, 0x64, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x80, 0x04, 0x0a, 0x0a,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x16, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x41, 0x77, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x12,
	0x42, 0x0a, 0x0e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x67, 0x70,
	0x41, 0x73, 0x6e, 0x12, 0x47, 0x0a, 0x18, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x70, 0x12, 0x41, 0x0a, 0x15,
	0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x41, 0x77, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x70, 0x12,
	0x4c, 0x0a, 0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x68, 0x6f,
	0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x67, 0x70, 0x48, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a,
	0x14, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x50, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a,
	0x0a, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x4b,
	0x0a, 0x0e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x39, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa8, 0x05, 0x0a, 0x0c,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x33, 0x0a, 0x06, 0x74, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05,
	0x74, 0x67, 0x77, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x76, 0x70, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f,
	0x76, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x06, 0x63, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x63,
	0x67, 0x77, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73,
	0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x5f, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f,
	0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x76, 0x70, 0x6e, 0x5f, 0x74, 0x67,
	0x77, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x12, 0x76, 0x70, 0x6e, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x10, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x6e, 0x70, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x76, 0x70,
	0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x76, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x49, 0x64, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x44, 0x0a, 0x09, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x04, 0x74, 0x66, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xf0, 0x04, 0x0a,
	0x08, 0x54, 0x67, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x49, 0x6e, 0x12, 0x39, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x3b, 0x0a,
	0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x49, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x5f, 0x6f, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70,
	0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x4f, 0x75, 0x74, 0x12, 0x5b, 0x0a, 0x1b, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x74, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62,
	0x6c, 0x61, 0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x18, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x68, 0x6f, 0x6c, 0x65, 0x12, 0x58, 0x0a, 0x1a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x5f, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x16, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74,
	0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x12, 0x3f, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x49,
	0x6e, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x5f, 0x6f,
	0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x62, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74,
	0x68, 0x4f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x73, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x9d, 0x04, 0x0a, 0x06, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x16, 0x63, 0x6e, 0x70, 0x73, 0x5f, 0x74,
	0x6f, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x63, 0x6e,
	0x70, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x35, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x67, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x22,
	0x46, 0x0a, 0x09, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x4b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x06,
	0x74, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x74, 0x67, 0x77, 0x49,
	0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0xa8, 0x0b, 0x0a, 0x10, 0x41, 0x57, 0x53, 0x54,
	0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65,
	0x6e, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34,
	0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x67, 0x77, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6e, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12,
	0x3d, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x70,
	0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x31, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x31, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3b, 0x0a, 0x0a, 0x74, 0x75, 0x6e, 0x32, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x74, 0x75, 0x6e, 0x32, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x15, 0x74, 0x75, 0x6e, 0x31, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x6f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75,
	0x6e, 0x31, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65,
	0x12, 0x3f, 0x0a, 0x14, 0x74, 0x75, 0x6e, 0x31, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69,
	0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11,
	0x74, 0x75, 0x6e, 0x31, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64,
	0x65, 0x12, 0x43, 0x0a, 0x16, 0x74, 0x75, 0x6e, 0x31, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x13, 0x74, 0x75, 0x6e, 0x31, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x4f,
	0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x31, 0x5f, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x31, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x49, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x75, 0x6e,
	0x32, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x6f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49,
	0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x32, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x49, 0x70, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x14,
	0x74, 0x75, 0x6e, 0x32, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e,
	0x73, 0x69, 0x64, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x32,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x70, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x43, 0x0a,
	0x16, 0x74, 0x75, 0x6e, 0x32, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f,
	0x6f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x74,
	0x75, 0x6e, 0x32, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x4f, 0x75, 0x74, 0x73, 0x69,
	0x64, 0x65, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x32, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x69, 0x70, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x32, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49, 0x70, 0x49,
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x12, 0x43, 0x0a, 0x13, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x11, 0x70, 0x65, 0x65, 0x72, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x67, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x67, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x74, 0x67, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02,
	0x72, 0x6f, 0x22, 0x5e, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x54, 0x67, 0x77, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0d, 0x61, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0x3f, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12,
	0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80,
	0x8e, 0x19, 0x01, 0x22, 0xd2, 0x03, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x70, 0x54,
	0x12, 0x30, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x69,
	0x64, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x5f, 0x67, 0x77, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x70, 0x72, 0x69, 0x6d, 0x47, 0x77, 0x12, 0x33, 0x0a, 0x06, 0x73,
	0x65, 0x63, 0x5f, 0x67, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x73, 0x65, 0x63, 0x47, 0x77,
	0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x9c, 0x02, 0x0a, 0x0d, 0x41, 0x7a, 0x75,
	0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x03, 0x6e, 0x73,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x03, 0x6e, 0x73,
	0x67, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x30, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0xec, 0x01, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x56,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69,
	0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x30, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04,
	0x63, 0x69, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x06, 0x69, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x69, 0x67, 0x77, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x65, 0x65,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x22, 0x8b, 0x02, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x56,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72,
	0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x52, 0x67, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0e, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x56, 0x6e, 0x65, 0x74,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x6e, 0x65,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x56, 0x6e,
	0x65, 0x74, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x06, 0x56, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x2c,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80, 0x8e,
	0x19, 0x01, 0x22, 0xb7, 0x0a, 0x0a, 0x09, 0x56, 0x70, 0x63, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x63, 0x70, 0x54, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x74, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x6c, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x6c, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x46, 0x0a, 0x0c, 0x61, 0x7a, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x7a,
	0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x0c, 0x61, 0x77, 0x73, 0x5f,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6e, 0x70, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12,
	0x43, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38,
	0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x70, 0x65, 0x65,
	0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x36, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3f, 0x0a, 0x0d, 0x74, 0x67, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x74, 0x67, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x12, 0x36, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xdf, 0x03, 0x0a,
	0x07, 0x57, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x37, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x09, 0x70,
	0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x11, 0x65, 0x64, 0x67, 0x65,
	0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0f, 0x65, 0x64, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x67,
	0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x49, 0x67, 0x77,
	0x12, 0x50, 0x0a, 0x16, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x14, 0x65, 0x64,
	0x67, 0x65, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x76, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x76,
	0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xdc,
	0x03, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x09, 0x63,
	0x6c, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6c,
	0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x70, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x63, 0x70, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x06, 0x66, 0x61, 0x62,
	0x72, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x61,
	0x62, 0x72, 0x69, 0x63, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x64, 0x67,
	0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x66, 0x45, 0x64, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x77, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x6c, 0x65, 0x61, 0x66, 0x45, 0x64, 0x67, 0x65, 0x49, 0x67, 0x77, 0x12, 0x43, 0x0a, 0x0f,
	0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0e, 0x6c, 0x65, 0x61, 0x66, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x76, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x63, 0x76, 0x70,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x45, 0x0a,
	0x0f, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79,
	0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x3a, 0x04,
	0x80, 0x8e, 0x19, 0x01, 0x22, 0xd9, 0x07, 0x0a, 0x12, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x38, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x4b, 0x65, 0x79,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x44, 0x0a, 0x09, 0x74, 0x6f, 0x70, 0x6f, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x74, 0x6f, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a,
	0x0b, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x62, 0x67, 0x70, 0x41, 0x73, 0x6e, 0x4c, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x0c, 0x62, 0x67,
	0x70, 0x5f, 0x61, 0x73, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x62,
	0x67, 0x70, 0x41, 0x73, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x12, 0x3e, 0x0a, 0x0c, 0x76, 0x74, 0x65,
	0x70, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x76,
	0x74, 0x65, 0x70, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x4a, 0x0a, 0x12, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x49,
	0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x51, 0x0a, 0x16, 0x64, 0x70, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x13, 0x64, 0x70, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50,
	0x6c, 0x61, 0x6e, 0x65, 0x43, 0x69, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x76, 0x61, 0x61, 0x73, 0x5f,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x76, 0x61, 0x61,
	0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x76, 0x61, 0x61, 0x73,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x76, 0x61,
	0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x57, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77,
	0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12,
	0x2d, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x2f,
	0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x22,
	0xc1, 0x03, 0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x12, 0x35, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x48, 0x0a,
	0x09, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69,
	0x6e, 0x74, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3b, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x49, 0x70,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x42, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69,
	0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x43,
	0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x22, 0xd3, 0x04, 0x0a, 0x06, 0x43, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x49,
	0x0a, 0x0e, 0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x76, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x62, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x66, 0x67, 0x12, 0x38, 0x0a, 0x09,
	0x68, 0x61, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x68,
	0x61, 0x52, 0x74, 0x72, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56,
	0x70, 0x63, 0x52, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x68,
	0x61, 0x5f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0c, 0x68, 0x61, 0x52, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x42, 0x0a, 0x0e, 0x63, 0x76, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x5d, 0x0a, 0x1c,
	0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x19, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0d, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x41, 0x7a,
	0x75, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x72, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x53, 0x65, 0x74, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x41, 0x77, 0x73, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x76, 0x61,
	0x69, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x69, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01, 0x22, 0x5c, 0x0a, 0x19, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xbb, 0x0a, 0x0a, 0x0c, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x33, 0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76,
	0x70, 0x63, 0x49, 0x64, 0x12, 0x3b, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x70,
	0x54, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x68, 0x61, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x68, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x04, 0x63, 0x6e, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12,
	0x28, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x54, 0x0a, 0x17, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x46, 0x0a, 0x0c, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x72, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x43, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x0e,
	0x61, 0x77, 0x73, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x77, 0x73,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x61, 0x77,
	0x73, 0x52, 0x74, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4c, 0x0a, 0x0d, 0x61, 0x7a,
	0x5f, 0x72, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x61, 0x7a, 0x52,
	0x74, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x44, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x4a,
	0x0a, 0x0a, 0x64, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x64, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x76,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x72,
	0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x56, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x76, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x34, 0x0a, 0x07,
	0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62, 0x67, 0x70, 0x41,
	0x73, 0x6e, 0x12, 0x3b, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x3d, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x3a, 0x06,
	0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0xdb, 0x02, 0x0a, 0x07, 0x50, 0x61, 0x74, 0x68, 0x4b,
	0x65, 0x79, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x70, 0x63, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52,
	0x74, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x76, 0x70,
	0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x73, 0x74, 0x56,
	0x70, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x5f, 0x72, 0x74, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x74, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x40, 0x0a, 0x04,
	0x75, 0x6c, 0x5f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x61, 0x72, 0x69,
	0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x76, 0x31, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x75, 0x6c, 0x54, 0x3a, 0x04,
	0x80, 0x8e, 0x19, 0x01, 0x22, 0xdf, 0x02, 0x0a, 0x13, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x3a, 0x0a, 0x0a,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x6a, 0x69, 0x74, 0x74,
	0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72,
	0x4d, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x70, 0x6b, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x6b, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x63, 0x12,
	0x34, 0x0a, 0x07, 0x62, 0x77, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x62,
	0x77, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x2a, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x75,
	0x70, 0x12, 0x33, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x96, 0x09, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x30, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x45, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x73, 0x72, 0x63, 0x56, 0x70,
	0x63, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x73, 0x72, 0x63, 0x5f,
	0x76, 0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x73, 0x72,
	0x63, 0x56, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x74, 0x72, 0x43, 0x6c, 0x6f, 0x75,
	0x64, 0x49, 0x64, 0x12, 0x42, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x52, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x49, 0x70, 0x41, 0x64,
	0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x73, 0x72, 0x63, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12,
	0x42, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x72, 0x63,
	0x43, 0x70, 0x54, 0x12, 0x45, 0x0a, 0x10, 0x64, 0x73, 0x74, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x64, 0x73, 0x74,
	0x56, 0x70, 0x63, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x73,
	0x74, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x64, 0x73, 0x74, 0x56, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x74, 0x72,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4b, 0x0a,
	0x13, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x66, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0a, 0x64, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x64, 0x73,
	0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f, 0x63,
	0x70, 0x5f, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x06, 0x64, 0x73, 0x74, 0x43, 0x70, 0x54, 0x12, 0x41, 0x0a, 0x0d, 0x74,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x70,
	0x61, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x6f, 0x2a,
	0x8c, 0x01, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x50, 0x4f,
	0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d,
	0x45, 0x54, 0x41, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47,
	0x59, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x4e, 0x10,
	0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x4f, 0x50, 0x4f, 0x4c, 0x4f, 0x47, 0x59, 0x5f, 0x49, 0x4e,
	0x46, 0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x10, 0x03, 0x2a, 0x5f,
	0x0a, 0x0a, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x42,
	0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x5f, 0x4d, 0x45,
	0x53, 0x48, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x48, 0x55, 0x42, 0x5f, 0x53, 0x50, 0x4f, 0x4b, 0x45, 0x10, 0x02, 0x2a,
	0x91, 0x01, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x1f, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f, 0x50,
	0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c,
	0x4f, 0x55, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x4c, 0x4f, 0x55, 0x44,
	0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41,
	0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x4f, 0x55, 0x44, 0x5f,
	0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x03, 0x2a, 0xac, 0x01, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28,
	0x0a, 0x24, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x44, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x47, 0x57, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x55, 0x4e,
	0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x45, 0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x20, 0x0a, 0x1c, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e,
	0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x54, 0x47, 0x57,
	0x10, 0x03, 0x2a, 0xa7, 0x01, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x23,
	0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x50, 0x53, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41,
	0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x56, 0x45,
	0x52, 0x4c, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x4e, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x10, 0x03, 0x2a, 0x62, 0x0a, 0x08,
	0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4c, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x4f, 0x4c, 0x45, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e,
	0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x03,
	0x2a, 0x96, 0x02, 0x0a, 0x0c, 0x43, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44, 0x10,
	0x01, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43,
	0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52,
	0x45, 0x44, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49,
	0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x56, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x50, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x43,
	0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54,
	0x52, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x43, 0x56, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f,
	0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x56, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x49,
	0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x2a, 0x9d, 0x01, 0x0a, 0x10, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x22,
	0x0a, 0x1e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e,
	0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44,
	0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a, 0x14, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x44, 0x45,
	0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x43, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x45, 0x50, 0x4c, 0x4f, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x45, 0x52, 0x52, 0x10, 0x03, 0x2a, 0xaa, 0x01, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x22, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x22, 0x0a, 0x1e, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4e,
	0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46, 0x41, 0x43, 0x45,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x23,
	0x0a, 0x1f, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x46,
	0x41, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41,
	0x4c, 0x10, 0x03, 0x2a, 0x6a, 0x0a, 0x0d, 0x56, 0x70, 0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b, 0x56, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x56, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x42,
	0x4b, 0x5a, 0x49, 0x74, 0x65, 0x72, 0x72, 0x61, 0x66, 0x6f, 0x72, 0x6d, 0x2d, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x2d, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescOnce sync.Once
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData = file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc
)

func file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP() []byte {
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescOnce.Do(func() {
		file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData)
	})
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData
}

var file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_arista_clouddeploy_v1_clouddeploy_proto_goTypes = []interface{}{
	(TopologyInfoType)(0),             // 0: arista.clouddeploy.v1.TopologyInfoType
	(FabricType)(0),                   // 1: arista.clouddeploy.v1.FabricType
	(CloudProviderType)(0),            // 2: arista.clouddeploy.v1.CloudProviderType
	(UnderlayConnectionType)(0),       // 3: arista.clouddeploy.v1.UnderlayConnectionType
	(OverlayConnectionType)(0),        // 4: arista.clouddeploy.v1.OverlayConnectionType
	(RoleType)(0),                     // 5: arista.clouddeploy.v1.RoleType
	(CVStatusCode)(0),                 // 6: arista.clouddeploy.v1.CVStatusCode
	(DeviceStatusCode)(0),             // 7: arista.clouddeploy.v1.DeviceStatusCode
	(DeploymentStatusCode)(0),         // 8: arista.clouddeploy.v1.DeploymentStatusCode
	(NetworkInterfaceType)(0),         // 9: arista.clouddeploy.v1.NetworkInterfaceType
	(VpcStatusCode)(0),                // 10: arista.clouddeploy.v1.VpcStatusCode
	(*IpsecInfo)(nil),                 // 11: arista.clouddeploy.v1.IpsecInfo
	(*TunnelInfo)(nil),                // 12: arista.clouddeploy.v1.TunnelInfo
	(*TunnelInfoList)(nil),            // 13: arista.clouddeploy.v1.TunnelInfoList
	(*AWSVpnConfig)(nil),              // 14: arista.clouddeploy.v1.AWSVpnConfig
	(*AWSVpnKey)(nil),                 // 15: arista.clouddeploy.v1.AWSVpnKey
	(*TgwStats)(nil),                  // 16: arista.clouddeploy.v1.TgwStats
	(*AWSTgw)(nil),                    // 17: arista.clouddeploy.v1.AWSTgw
	(*AWSTgwKey)(nil),                 // 18: arista.clouddeploy.v1.AWSTgwKey
	(*AWSTgwAttachment)(nil),          // 19: arista.clouddeploy.v1.AWSTgwAttachment
	(*AWSTgwAttachmentKey)(nil),       // 20: arista.clouddeploy.v1.AWSTgwAttachmentKey
	(*SubnetKey)(nil),                 // 21: arista.clouddeploy.v1.SubnetKey
	(*SubnetConfig)(nil),              // 22: arista.clouddeploy.v1.SubnetConfig
	(*AzureVnetInfo)(nil),             // 23: arista.clouddeploy.v1.AzureVnetInfo
	(*AwsVpcInfo)(nil),                // 24: arista.clouddeploy.v1.AwsVpcInfo
	(*PeerVpcInfo)(nil),               // 25: arista.clouddeploy.v1.PeerVpcInfo
	(*VpcKey)(nil),                    // 26: arista.clouddeploy.v1.VpcKey
	(*VpcConfig)(nil),                 // 27: arista.clouddeploy.v1.VpcConfig
	(*WanInfo)(nil),                   // 28: arista.clouddeploy.v1.WanInfo
	(*ClosInfo)(nil),                  // 29: arista.clouddeploy.v1.ClosInfo
	(*TopologyInfoKey)(nil),           // 30: arista.clouddeploy.v1.TopologyInfoKey
	(*TopologyInfoConfig)(nil),        // 31: arista.clouddeploy.v1.TopologyInfoConfig
	(*RouteTableIds)(nil),             // 32: arista.clouddeploy.v1.RouteTableIds
	(*NetworkInterface)(nil),          // 33: arista.clouddeploy.v1.NetworkInterface
	(*CVInfo)(nil),                    // 34: arista.clouddeploy.v1.CVInfo
	(*AzureRouterDetail)(nil),         // 35: arista.clouddeploy.v1.AzureRouterDetail
	(*AwsRouterDetail)(nil),           // 36: arista.clouddeploy.v1.AwsRouterDetail
	(*RouterKey)(nil),                 // 37: arista.clouddeploy.v1.RouterKey
	(*RepeatedNetworkInterfaces)(nil), // 38: arista.clouddeploy.v1.RepeatedNetworkInterfaces
	(*RouterConfig)(nil),              // 39: arista.clouddeploy.v1.RouterConfig
	(*PathKey)(nil),                   // 40: arista.clouddeploy.v1.PathKey
	(*PathCharacteristics)(nil),       // 41: arista.clouddeploy.v1.PathCharacteristics
	(*Path)(nil),                      // 42: arista.clouddeploy.v1.Path
	(*wrapperspb.StringValue)(nil),    // 43: google.protobuf.StringValue
	(*fmp.IPAddress)(nil),             // 44: fmp.IPAddress
	(*wrapperspb.DoubleValue)(nil),    // 45: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),     // 46: google.protobuf.Timestamp
	(*fmp.RepeatedString)(nil),        // 47: fmp.RepeatedString
	(*fmp.MapStringString)(nil),       // 48: fmp.MapStringString
	(*wrapperspb.BoolValue)(nil),      // 49: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),     // 50: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),     // 51: google.protobuf.Int64Value
}
var file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs = []int32{
	43,  // 0: arista.clouddeploy.v1.IpsecInfo.ike_integrity:type_name -> google.protobuf.StringValue
	43,  // 1: arista.clouddeploy.v1.IpsecInfo.ike_encryption:type_name -> google.protobuf.StringValue
	43,  // 2: arista.clouddeploy.v1.IpsecInfo.ike_lifetime:type_name -> google.protobuf.StringValue
	43,  // 3: arista.clouddeploy.v1.IpsecInfo.ike_pfs:type_name -> google.protobuf.StringValue
	43,  // 4: arista.clouddeploy.v1.IpsecInfo.ike_preshared_key:type_name -> google.protobuf.StringValue
	43,  // 5: arista.clouddeploy.v1.IpsecInfo.ipsec_integrity:type_name -> google.protobuf.StringValue
	43,  // 6: arista.clouddeploy.v1.IpsecInfo.ipsec_encryption:type_name -> google.protobuf.StringValue
	43,  // 7: arista.clouddeploy.v1.IpsecInfo.ipsec_pfs:type_name -> google.protobuf.StringValue
	43,  // 8: arista.clouddeploy.v1.IpsecInfo.ipsec_mode:type_name -> google.protobuf.StringValue
	43,  // 9: arista.clouddeploy.v1.IpsecInfo.dpd_interval:type_name -> google.protobuf.StringValue
	43,  // 10: arista.clouddeploy.v1.IpsecInfo.dpd_retries:type_name -> google.protobuf.StringValue
	44,  // 11: arista.clouddeploy.v1.TunnelInfo.tunnel_aws_endpoint_ip:type_name -> fmp.IPAddress
	43,  // 12: arista.clouddeploy.v1.TunnelInfo.tunnel_bgp_asn:type_name -> google.protobuf.StringValue
	44,  // 13: arista.clouddeploy.v1.TunnelInfo.tunnel_router_overlay_ip:type_name -> fmp.IPAddress
	44,  // 14: arista.clouddeploy.v1.TunnelInfo.tunnel_aws_overlay_ip:type_name -> fmp.IPAddress
	43,  // 15: arista.clouddeploy.v1.TunnelInfo.tunnel_bgp_holdtime:type_name -> google.protobuf.StringValue
	43,  // 16: arista.clouddeploy.v1.TunnelInfo.tunnel_preshared_key:type_name -> google.protobuf.StringValue
	11,  // 17: arista.clouddeploy.v1.TunnelInfo.ipsec_info:type_name -> arista.clouddeploy.v1.IpsecInfo
	12,  // 18: arista.clouddeploy.v1.TunnelInfoList.values:type_name -> arista.clouddeploy.v1.TunnelInfo
	15,  // 19: arista.clouddeploy.v1.AWSVpnConfig.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	43,  // 20: arista.clouddeploy.v1.AWSVpnConfig.tgw_id:type_name -> google.protobuf.StringValue
	43,  // 21: arista.clouddeploy.v1.AWSVpnConfig.vpn_connection_id:type_name -> google.protobuf.StringValue
	43,  // 22: arista.clouddeploy.v1.AWSVpnConfig.cgw_id:type_name -> google.protobuf.StringValue
	43,  // 23: arista.clouddeploy.v1.AWSVpnConfig.cloudeos_router_id:type_name -> google.protobuf.StringValue
	43,  // 24: arista.clouddeploy.v1.AWSVpnConfig.cloudeos_vpc_id:type_name -> google.protobuf.StringValue
	43,  // 25: arista.clouddeploy.v1.AWSVpnConfig.vpn_tgw_attachment_id:type_name -> google.protobuf.StringValue
	13,  // 26: arista.clouddeploy.v1.AWSVpnConfig.tunnel_info_list:type_name -> arista.clouddeploy.v1.TunnelInfoList
	43,  // 27: arista.clouddeploy.v1.AWSVpnConfig.cnps:type_name -> google.protobuf.StringValue
	43,  // 28: arista.clouddeploy.v1.AWSVpnConfig.vpn_gateway_id:type_name -> google.protobuf.StringValue
	43,  // 29: arista.clouddeploy.v1.AWSVpnKey.tf_id:type_name -> google.protobuf.StringValue
	45,  // 30: arista.clouddeploy.v1.TgwStats.bytes_in:type_name -> google.protobuf.DoubleValue
	45,  // 31: arista.clouddeploy.v1.TgwStats.bytes_out:type_name -> google.protobuf.DoubleValue
	45,  // 32: arista.clouddeploy.v1.TgwStats.packets_in:type_name -> google.protobuf.DoubleValue
	45,  // 33: arista.clouddeploy.v1.TgwStats.packets_out:type_name -> google.protobuf.DoubleValue
	45,  // 34: arista.clouddeploy.v1.TgwStats.packet_drop_count_blackhole:type_name -> google.protobuf.DoubleValue
	45,  // 35: arista.clouddeploy.v1.TgwStats.packet_drop_count_no_route:type_name -> google.protobuf.DoubleValue
	45,  // 36: arista.clouddeploy.v1.TgwStats.bandwidth_in:type_name -> google.protobuf.DoubleValue
	45,  // 37: arista.clouddeploy.v1.TgwStats.bandwidth_out:type_name -> google.protobuf.DoubleValue
	46,  // 38: arista.clouddeploy.v1.TgwStats.stats_time:type_name -> google.protobuf.Timestamp
	18,  // 39: arista.clouddeploy.v1.AWSTgw.key:type_name -> arista.clouddeploy.v1.AWSTgwKey
	43,  // 40: arista.clouddeploy.v1.AWSTgw.name:type_name -> google.protobuf.StringValue
	43,  // 41: arista.clouddeploy.v1.AWSTgw.state:type_name -> google.protobuf.StringValue
	43,  // 42: arista.clouddeploy.v1.AWSTgw.region:type_name -> google.protobuf.StringValue
	43,  // 43: arista.clouddeploy.v1.AWSTgw.account_id:type_name -> google.protobuf.StringValue
	43,  // 44: arista.clouddeploy.v1.AWSTgw.topology_name:type_name -> google.protobuf.StringValue
	47,  // 45: arista.clouddeploy.v1.AWSTgw.attachment_ids:type_name -> fmp.RepeatedString
	48,  // 46: arista.clouddeploy.v1.AWSTgw.cnps_to_route_table_id:type_name -> fmp.MapStringString
	16,  // 47: arista.clouddeploy.v1.AWSTgw.stats:type_name -> arista.clouddeploy.v1.TgwStats
	43,  // 48: arista.clouddeploy.v1.AWSTgwKey.tgw_id:type_name -> google.protobuf.StringValue
	20,  // 49: arista.clouddeploy.v1.AWSTgwAttachment.key:type_name -> arista.clouddeploy.v1.AWSTgwAttachmentKey
	43,  // 50: arista.clouddeploy.v1.AWSTgwAttachment.state:type_name -> google.protobuf.StringValue
	43,  // 51: arista.clouddeploy.v1.AWSTgwAttachment.region:type_name -> google.protobuf.StringValue
	43,  // 52: arista.clouddeploy.v1.AWSTgwAttachment.account_id:type_name -> google.protobuf.StringValue
	43,  // 53: arista.clouddeploy.v1.AWSTgwAttachment.topology_name:type_name -> google.protobuf.StringValue
	43,  // 54: arista.clouddeploy.v1.AWSTgwAttachment.tgw_id:type_name -> google.protobuf.StringValue
	43,  // 55: arista.clouddeploy.v1.AWSTgwAttachment.route_table_id:type_name -> google.protobuf.StringValue
	43,  // 56: arista.clouddeploy.v1.AWSTgwAttachment.cnps:type_name -> google.protobuf.StringValue
	43,  // 57: arista.clouddeploy.v1.AWSTgwAttachment.resource_id:type_name -> google.protobuf.StringValue
	43,  // 58: arista.clouddeploy.v1.AWSTgwAttachment.vpc_id:type_name -> google.protobuf.StringValue
	43,  // 59: arista.clouddeploy.v1.AWSTgwAttachment.tun1_state:type_name -> google.protobuf.StringValue
	43,  // 60: arista.clouddeploy.v1.AWSTgwAttachment.tun2_state:type_name -> google.protobuf.StringValue
	44,  // 61: arista.clouddeploy.v1.AWSTgwAttachment.tun1_local_ip_outside:type_name -> fmp.IPAddress
	44,  // 62: arista.clouddeploy.v1.AWSTgwAttachment.tun1_local_ip_inside:type_name -> fmp.IPAddress
	44,  // 63: arista.clouddeploy.v1.AWSTgwAttachment.tun1_remote_ip_outside:type_name -> fmp.IPAddress
	44,  // 64: arista.clouddeploy.v1.AWSTgwAttachment.tun1_remote_ip_inside:type_name -> fmp.IPAddress
	44,  // 65: arista.clouddeploy.v1.AWSTgwAttachment.tun2_local_ip_outside:type_name -> fmp.IPAddress
	44,  // 66: arista.clouddeploy.v1.AWSTgwAttachment.tun2_local_ip_inside:type_name -> fmp.IPAddress
	44,  // 67: arista.clouddeploy.v1.AWSTgwAttachment.tun2_remote_ip_outside:type_name -> fmp.IPAddress
	44,  // 68: arista.clouddeploy.v1.AWSTgwAttachment.tun2_remote_ip_inside:type_name -> fmp.IPAddress
	47,  // 69: arista.clouddeploy.v1.AWSTgwAttachment.peer_attachment_ids:type_name -> fmp.RepeatedString
	16,  // 70: arista.clouddeploy.v1.AWSTgwAttachment.stats:type_name -> arista.clouddeploy.v1.TgwStats
	43,  // 71: arista.clouddeploy.v1.AWSTgwAttachment.tgw_name:type_name -> google.protobuf.StringValue
	43,  // 72: arista.clouddeploy.v1.AWSTgwAttachmentKey.attachment_id:type_name -> google.protobuf.StringValue
	43,  // 73: arista.clouddeploy.v1.SubnetKey.id:type_name -> google.protobuf.StringValue
	21,  // 74: arista.clouddeploy.v1.SubnetConfig.key:type_name -> arista.clouddeploy.v1.SubnetKey
	43,  // 75: arista.clouddeploy.v1.SubnetConfig.subnet_id:type_name -> google.protobuf.StringValue
	2,   // 76: arista.clouddeploy.v1.SubnetConfig.cp_t:type_name -> arista.clouddeploy.v1.CloudProviderType
	43,  // 77: arista.clouddeploy.v1.SubnetConfig.cidr:type_name -> google.protobuf.StringValue
	43,  // 78: arista.clouddeploy.v1.SubnetConfig.vpc_id:type_name -> google.protobuf.StringValue
	43,  // 79: arista.clouddeploy.v1.SubnetConfig.avail_zone:type_name -> google.protobuf.StringValue
	43,  // 80: arista.clouddeploy.v1.SubnetConfig.prim_gw:type_name -> google.protobuf.StringValue
	43,  // 81: arista.clouddeploy.v1.SubnetConfig.sec_gw:type_name -> google.protobuf.StringValue
	47,  // 82: arista.clouddeploy.v1.AzureVnetInfo.nsg:type_name -> fmp.RepeatedString
	43,  // 83: arista.clouddeploy.v1.AzureVnetInfo.resource_group:type_name -> google.protobuf.StringValue
	43,  // 84: arista.clouddeploy.v1.AzureVnetInfo.cidr:type_name -> google.protobuf.StringValue
	47,  // 85: arista.clouddeploy.v1.AzureVnetInfo.avail_set:type_name -> fmp.RepeatedString
	47,  // 86: arista.clouddeploy.v1.AzureVnetInfo.peering_conn_id:type_name -> fmp.RepeatedString
	47,  // 87: arista.clouddeploy.v1.AwsVpcInfo.security_group:type_name -> fmp.RepeatedString
	43,  // 88: arista.clouddeploy.v1.AwsVpcInfo.cidr:type_name -> google.protobuf.StringValue
	43,  // 89: arista.clouddeploy.v1.AwsVpcInfo.igw_id:type_name -> google.protobuf.StringValue
	47,  // 90: arista.clouddeploy.v1.AwsVpcInfo.peering_conn_id:type_name -> fmp.RepeatedString
	48,  // 91: arista.clouddeploy.v1.PeerVpcInfo.peer_vpc_cidr:type_name -> fmp.MapStringString
	43,  // 92: arista.clouddeploy.v1.PeerVpcInfo.peer_rg_name:type_name -> google.protobuf.StringValue
	43,  // 93: arista.clouddeploy.v1.PeerVpcInfo.peer_vnet_name:type_name -> google.protobuf.StringValue
	43,  // 94: arista.clouddeploy.v1.PeerVpcInfo.peer_vnet_id:type_name -> google.protobuf.StringValue
	43,  // 95: arista.clouddeploy.v1.VpcKey.id:type_name -> google.protobuf.StringValue
	26,  // 96: arista.clouddeploy.v1.VpcConfig.key:type_name -> arista.clouddeploy.v1.VpcKey
	43,  // 97: arista.clouddeploy.v1.VpcConfig.name:type_name -> google.protobuf.StringValue
	43,  // 98: arista.clouddeploy.v1.VpcConfig.vpc_id:type_name -> google.protobuf.StringValue
	2,   // 99: arista.clouddeploy.v1.VpcConfig.cp_t:type_name -> arista.clouddeploy.v1.CloudProviderType
	43,  // 100: arista.clouddeploy.v1.VpcConfig.region:type_name -> google.protobuf.StringValue
	5,   // 101: arista.clouddeploy.v1.VpcConfig.role_type:type_name -> arista.clouddeploy.v1.RoleType
	43,  // 102: arista.clouddeploy.v1.VpcConfig.topology_name:type_name -> google.protobuf.StringValue
	43,  // 103: arista.clouddeploy.v1.VpcConfig.clos_name:type_name -> google.protobuf.StringValue
	43,  // 104: arista.clouddeploy.v1.VpcConfig.wan_name:type_name -> google.protobuf.StringValue
	23,  // 105: arista.clouddeploy.v1.VpcConfig.az_vnet_info:type_name -> arista.clouddeploy.v1.AzureVnetInfo
	24,  // 106: arista.clouddeploy.v1.VpcConfig.aws_vpc_info:type_name -> arista.clouddeploy.v1.AwsVpcInfo
	43,  // 107: arista.clouddeploy.v1.VpcConfig.cnps:type_name -> google.protobuf.StringValue
	49,  // 108: arista.clouddeploy.v1.VpcConfig.route_reflector:type_name -> google.protobuf.BoolValue
	48,  // 109: arista.clouddeploy.v1.VpcConfig.tags:type_name -> fmp.MapStringString
	48,  // 110: arista.clouddeploy.v1.VpcConfig.peer_vpc_cidr:type_name -> fmp.MapStringString
	10,  // 111: arista.clouddeploy.v1.VpcConfig.status_code:type_name -> arista.clouddeploy.v1.VpcStatusCode
	43,  // 112: arista.clouddeploy.v1.VpcConfig.account:type_name -> google.protobuf.StringValue
	25,  // 113: arista.clouddeploy.v1.VpcConfig.peer_vpc_info:type_name -> arista.clouddeploy.v1.PeerVpcInfo
	49,  // 114: arista.clouddeploy.v1.VpcConfig.tgw_connected:type_name -> google.protobuf.BoolValue
	49,  // 115: arista.clouddeploy.v1.VpcConfig.cloudeos:type_name -> google.protobuf.BoolValue
	43,  // 116: arista.clouddeploy.v1.VpcConfig.managed_by:type_name -> google.protobuf.StringValue
	43,  // 117: arista.clouddeploy.v1.VpcConfig.deploy_mode:type_name -> google.protobuf.StringValue
	43,  // 118: arista.clouddeploy.v1.WanInfo.wan_name:type_name -> google.protobuf.StringValue
	2,   // 119: arista.clouddeploy.v1.WanInfo.cp_type:type_name -> arista.clouddeploy.v1.CloudProviderType
	47,  // 120: arista.clouddeploy.v1.WanInfo.peer_names:type_name -> fmp.RepeatedString
	49,  // 121: arista.clouddeploy.v1.WanInfo.edge_edge_peering:type_name -> google.protobuf.BoolValue
	49,  // 122: arista.clouddeploy.v1.WanInfo.edge_edge_igw:type_name -> google.protobuf.BoolValue
	49,  // 123: arista.clouddeploy.v1.WanInfo.edge_dedicated_connect:type_name -> google.protobuf.BoolValue
	43,  // 124: arista.clouddeploy.v1.WanInfo.cvp_container_name:type_name -> google.protobuf.StringValue
	43,  // 125: arista.clouddeploy.v1.ClosInfo.clos_name:type_name -> google.protobuf.StringValue
	2,   // 126: arista.clouddeploy.v1.ClosInfo.cp_type:type_name -> arista.clouddeploy.v1.CloudProviderType
	1,   // 127: arista.clouddeploy.v1.ClosInfo.fabric:type_name -> arista.clouddeploy.v1.FabricType
	49,  // 128: arista.clouddeploy.v1.ClosInfo.leaf_edge_peering:type_name -> google.protobuf.BoolValue
	49,  // 129: arista.clouddeploy.v1.ClosInfo.leaf_edge_igw:type_name -> google.protobuf.BoolValue
	49,  // 130: arista.clouddeploy.v1.ClosInfo.leaf_encryption:type_name -> google.protobuf.BoolValue
	43,  // 131: arista.clouddeploy.v1.ClosInfo.cvp_container_name:type_name -> google.protobuf.StringValue
	43,  // 132: arista.clouddeploy.v1.TopologyInfoKey.id:type_name -> google.protobuf.StringValue
	30,  // 133: arista.clouddeploy.v1.TopologyInfoConfig.key:type_name -> arista.clouddeploy.v1.TopologyInfoKey
	43,  // 134: arista.clouddeploy.v1.TopologyInfoConfig.name:type_name -> google.protobuf.StringValue
	0,   // 135: arista.clouddeploy.v1.TopologyInfoConfig.topo_type:type_name -> arista.clouddeploy.v1.TopologyInfoType
	50,  // 136: arista.clouddeploy.v1.TopologyInfoConfig.bgp_asn_low:type_name -> google.protobuf.Int32Value
	50,  // 137: arista.clouddeploy.v1.TopologyInfoConfig.bgp_asn_high:type_name -> google.protobuf.Int32Value
	43,  // 138: arista.clouddeploy.v1.TopologyInfoConfig.vtep_ip_cidr:type_name -> google.protobuf.StringValue
	43,  // 139: arista.clouddeploy.v1.TopologyInfoConfig.terminattr_ip_cidr:type_name -> google.protobuf.StringValue
	43,  // 140: arista.clouddeploy.v1.TopologyInfoConfig.dps_control_plane_cidr:type_name -> google.protobuf.StringValue
	47,  // 141: arista.clouddeploy.v1.TopologyInfoConfig.managed_devices:type_name -> fmp.RepeatedString
	43,  // 142: arista.clouddeploy.v1.TopologyInfoConfig.cvaas_domain:type_name -> google.protobuf.StringValue
	43,  // 143: arista.clouddeploy.v1.TopologyInfoConfig.cvaas_server:type_name -> google.protobuf.StringValue
	28,  // 144: arista.clouddeploy.v1.TopologyInfoConfig.wan_info:type_name -> arista.clouddeploy.v1.WanInfo
	29,  // 145: arista.clouddeploy.v1.TopologyInfoConfig.clos_info:type_name -> arista.clouddeploy.v1.ClosInfo
	43,  // 146: arista.clouddeploy.v1.TopologyInfoConfig.version:type_name -> google.protobuf.StringValue
	43,  // 147: arista.clouddeploy.v1.TopologyInfoConfig.deploy_mode:type_name -> google.protobuf.StringValue
	47,  // 148: arista.clouddeploy.v1.RouteTableIds.public:type_name -> fmp.RepeatedString
	47,  // 149: arista.clouddeploy.v1.RouteTableIds.private:type_name -> fmp.RepeatedString
	47,  // 150: arista.clouddeploy.v1.RouteTableIds.internal:type_name -> fmp.RepeatedString
	43,  // 151: arista.clouddeploy.v1.NetworkInterface.intf_id:type_name -> google.protobuf.StringValue
	43,  // 152: arista.clouddeploy.v1.NetworkInterface.name:type_name -> google.protobuf.StringValue
	9,   // 153: arista.clouddeploy.v1.NetworkInterface.intf_type:type_name -> arista.clouddeploy.v1.NetworkInterfaceType
	47,  // 154: arista.clouddeploy.v1.NetworkInterface.private_ip_addr:type_name -> fmp.RepeatedString
	43,  // 155: arista.clouddeploy.v1.NetworkInterface.public_ip_addr:type_name -> google.protobuf.StringValue
	43,  // 156: arista.clouddeploy.v1.NetworkInterface.subnet:type_name -> google.protobuf.StringValue
	43,  // 157: arista.clouddeploy.v1.NetworkInterface.security_group:type_name -> google.protobuf.StringValue
	6,   // 158: arista.clouddeploy.v1.CVInfo.cv_status_code:type_name -> arista.clouddeploy.v1.CVStatusCode
	43,  // 159: arista.clouddeploy.v1.CVInfo.bootstrap_cfg:type_name -> google.protobuf.StringValue
	43,  // 160: arista.clouddeploy.v1.CVInfo.ha_rtr_id:type_name -> google.protobuf.StringValue
	47,  // 161: arista.clouddeploy.v1.CVInfo.peer_vpc_rt_table_id:type_name -> fmp.RepeatedString
	32,  // 162: arista.clouddeploy.v1.CVInfo.ha_rt_table_ids:type_name -> arista.clouddeploy.v1.RouteTableIds
	43,  // 163: arista.clouddeploy.v1.CVInfo.cv_status_desc:type_name -> google.protobuf.StringValue
	43,  // 164: arista.clouddeploy.v1.CVInfo.cv_status_recommended_action:type_name -> google.protobuf.StringValue
	7,   // 165: arista.clouddeploy.v1.CVInfo.device_status:type_name -> arista.clouddeploy.v1.DeviceStatusCode
	43,  // 166: arista.clouddeploy.v1.AzureRouterDetail.avail_zone:type_name -> google.protobuf.StringValue
	43,  // 167: arista.clouddeploy.v1.AzureRouterDetail.res_group:type_name -> google.protobuf.StringValue
	43,  // 168: arista.clouddeploy.v1.AzureRouterDetail.instance_type:type_name -> google.protobuf.StringValue
	43,  // 169: arista.clouddeploy.v1.AzureRouterDetail.avail_set:type_name -> google.protobuf.StringValue
	43,  // 170: arista.clouddeploy.v1.AwsRouterDetail.avail_zone:type_name -> google.protobuf.StringValue
	43,  // 171: arista.clouddeploy.v1.AwsRouterDetail.instance_type:type_name -> google.protobuf.StringValue
	43,  // 172: arista.clouddeploy.v1.RouterKey.id:type_name -> google.protobuf.StringValue
	33,  // 173: arista.clouddeploy.v1.RepeatedNetworkInterfaces.values:type_name -> arista.clouddeploy.v1.NetworkInterface
	37,  // 174: arista.clouddeploy.v1.RouterConfig.key:type_name -> arista.clouddeploy.v1.RouterKey
	43,  // 175: arista.clouddeploy.v1.RouterConfig.name:type_name -> google.protobuf.StringValue
	43,  // 176: arista.clouddeploy.v1.RouterConfig.vpc_id:type_name -> google.protobuf.StringValue
	2,   // 177: arista.clouddeploy.v1.RouterConfig.cp_t:type_name -> arista.clouddeploy.v1.CloudProviderType
	43,  // 178: arista.clouddeploy.v1.RouterConfig.region:type_name -> google.protobuf.StringValue
	43,  // 179: arista.clouddeploy.v1.RouterConfig.instance_id:type_name -> google.protobuf.StringValue
	43,  // 180: arista.clouddeploy.v1.RouterConfig.ha_name:type_name -> google.protobuf.StringValue
	43,  // 181: arista.clouddeploy.v1.RouterConfig.cnps:type_name -> google.protobuf.StringValue
	48,  // 182: arista.clouddeploy.v1.RouterConfig.tags:type_name -> fmp.MapStringString
	43,  // 183: arista.clouddeploy.v1.RouterConfig.device_enrollment_token:type_name -> google.protobuf.StringValue
	32,  // 184: arista.clouddeploy.v1.RouterConfig.rt_table_ids:type_name -> arista.clouddeploy.v1.RouteTableIds
	49,  // 185: arista.clouddeploy.v1.RouterConfig.route_reflector:type_name -> google.protobuf.BoolValue
	36,  // 186: arista.clouddeploy.v1.RouterConfig.aws_rtr_detail:type_name -> arista.clouddeploy.v1.AwsRouterDetail
	35,  // 187: arista.clouddeploy.v1.RouterConfig.az_rtr_detail:type_name -> arista.clouddeploy.v1.AzureRouterDetail
	38,  // 188: arista.clouddeploy.v1.RouterConfig.intf:type_name -> arista.clouddeploy.v1.RepeatedNetworkInterfaces
	8,   // 189: arista.clouddeploy.v1.RouterConfig.dep_status:type_name -> arista.clouddeploy.v1.DeploymentStatusCode
	34,  // 190: arista.clouddeploy.v1.RouterConfig.cv_info:type_name -> arista.clouddeploy.v1.CVInfo
	43,  // 191: arista.clouddeploy.v1.RouterConfig.device_serial_num:type_name -> google.protobuf.StringValue
	50,  // 192: arista.clouddeploy.v1.RouterConfig.bgp_asn:type_name -> google.protobuf.Int32Value
	43,  // 193: arista.clouddeploy.v1.RouterConfig.managed_by:type_name -> google.protobuf.StringValue
	43,  // 194: arista.clouddeploy.v1.RouterConfig.deploy_mode:type_name -> google.protobuf.StringValue
	43,  // 195: arista.clouddeploy.v1.PathKey.src_vpc_uuid:type_name -> google.protobuf.StringValue
	43,  // 196: arista.clouddeploy.v1.PathKey.local_rtr_uuid:type_name -> google.protobuf.StringValue
	43,  // 197: arista.clouddeploy.v1.PathKey.dst_vpc_uuid:type_name -> google.protobuf.StringValue
	43,  // 198: arista.clouddeploy.v1.PathKey.remote_rtr_uuid:type_name -> google.protobuf.StringValue
	3,   // 199: arista.clouddeploy.v1.PathKey.ul_t:type_name -> arista.clouddeploy.v1.UnderlayConnectionType
	51,  // 200: arista.clouddeploy.v1.PathCharacteristics.latency_ms:type_name -> google.protobuf.Int64Value
	51,  // 201: arista.clouddeploy.v1.PathCharacteristics.jitter_ms:type_name -> google.protobuf.Int64Value
	51,  // 202: arista.clouddeploy.v1.PathCharacteristics.pkt_loss_pc:type_name -> google.protobuf.Int64Value
	51,  // 203: arista.clouddeploy.v1.PathCharacteristics.bw_mbps:type_name -> google.protobuf.Int64Value
	49,  // 204: arista.clouddeploy.v1.PathCharacteristics.up:type_name -> google.protobuf.BoolValue
	51,  // 205: arista.clouddeploy.v1.PathCharacteristics.uptime:type_name -> google.protobuf.Int64Value
	40,  // 206: arista.clouddeploy.v1.Path.key:type_name -> arista.clouddeploy.v1.PathKey
	43,  // 207: arista.clouddeploy.v1.Path.src_vpc_cloud_id:type_name -> google.protobuf.StringValue
	43,  // 208: arista.clouddeploy.v1.Path.src_vpc_name:type_name -> google.protobuf.StringValue
	43,  // 209: arista.clouddeploy.v1.Path.local_rtr_cloud_id:type_name -> google.protobuf.StringValue
	43,  // 210: arista.clouddeploy.v1.Path.local_rtr_name:type_name -> google.protobuf.StringValue
	43,  // 211: arista.clouddeploy.v1.Path.local_intf_ip_addr:type_name -> google.protobuf.StringValue
	43,  // 212: arista.clouddeploy.v1.Path.src_region:type_name -> google.protobuf.StringValue
	2,   // 213: arista.clouddeploy.v1.Path.src_cp_t:type_name -> arista.clouddeploy.v1.CloudProviderType
	43,  // 214: arista.clouddeploy.v1.Path.dst_vpc_cloud_id:type_name -> google.protobuf.StringValue
	43,  // 215: arista.clouddeploy.v1.Path.dst_vpc_name:type_name -> google.protobuf.StringValue
	43,  // 216: arista.clouddeploy.v1.Path.remote_rtr_cloud_id:type_name -> google.protobuf.StringValue
	43,  // 217: arista.clouddeploy.v1.Path.remote_rtr_name:type_name -> google.protobuf.StringValue
	43,  // 218: arista.clouddeploy.v1.Path.remote_intf_ip_addr:type_name -> google.protobuf.StringValue
	43,  // 219: arista.clouddeploy.v1.Path.dst_region:type_name -> google.protobuf.StringValue
	2,   // 220: arista.clouddeploy.v1.Path.dst_cp_t:type_name -> arista.clouddeploy.v1.CloudProviderType
	43,  // 221: arista.clouddeploy.v1.Path.topology_name:type_name -> google.protobuf.StringValue
	41,  // 222: arista.clouddeploy.v1.Path.path_char:type_name -> arista.clouddeploy.v1.PathCharacteristics
	223, // [223:223] is the sub-list for method output_type
	223, // [223:223] is the sub-list for method input_type
	223, // [223:223] is the sub-list for extension type_name
	223, // [223:223] is the sub-list for extension extendee
	0,   // [0:223] is the sub-list for field type_name
}

func init() { file_arista_clouddeploy_v1_clouddeploy_proto_init() }
func file_arista_clouddeploy_v1_clouddeploy_proto_init() {
	if File_arista_clouddeploy_v1_clouddeploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TgwStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgw); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSTgwAttachmentKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubnetConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureVnetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsVpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerVpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VpcConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfoConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureRouterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsRouterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedNetworkInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_clouddeploy_v1_clouddeploy_proto_goTypes,
		DependencyIndexes: file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs,
		EnumInfos:         file_arista_clouddeploy_v1_clouddeploy_proto_enumTypes,
		MessageInfos:      file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes,
	}.Build()
	File_arista_clouddeploy_v1_clouddeploy_proto = out.File
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc = nil
	file_arista_clouddeploy_v1_clouddeploy_proto_goTypes = nil
	file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs = nil
}
