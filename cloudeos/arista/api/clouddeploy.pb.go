// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/terraform-providers/terraform-provider-cloudeos/cloudeos/internal/clouddeploy.proto

package clouddeploy_v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	time "terraform-provider-cloudeos/cloudeos/arista/time"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CloudProviderType int32

const (
	CloudProviderType_CP_UNSPECIFIED CloudProviderType = 0
	CloudProviderType_CP_AWS         CloudProviderType = 1
	CloudProviderType_CP_AZURE       CloudProviderType = 2
	CloudProviderType_CP_GCP         CloudProviderType = 3
)

// Enum value maps for CloudProviderType.
var (
	CloudProviderType_name = map[int32]string{
		0: "CP_UNSPECIFIED",
		1: "CP_AWS",
		2: "CP_AZURE",
		3: "CP_GCP",
	}
	CloudProviderType_value = map[string]int32{
		"CP_UNSPECIFIED": 0,
		"CP_AWS":         1,
		"CP_AZURE":       2,
		"CP_GCP":         3,
	}
)

func (x CloudProviderType) Enum() *CloudProviderType {
	p := new(CloudProviderType)
	*p = x
	return p
}

func (x CloudProviderType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CloudProviderType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[0].Descriptor()
}

func (CloudProviderType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[0]
}

func (x CloudProviderType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CloudProviderType.Descriptor instead.
func (CloudProviderType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{0}
}

type TopologyType int32

const (
	TopologyType_TOPO_UNSPECIFIED TopologyType = 0
	TopologyType_TOPO_CLOS        TopologyType = 1
	TopologyType_TOPO_WAN         TopologyType = 2
)

// Enum value maps for TopologyType.
var (
	TopologyType_name = map[int32]string{
		0: "TOPO_UNSPECIFIED",
		1: "TOPO_CLOS",
		2: "TOPO_WAN",
	}
	TopologyType_value = map[string]int32{
		"TOPO_UNSPECIFIED": 0,
		"TOPO_CLOS":        1,
		"TOPO_WAN":         2,
	}
)

func (x TopologyType) Enum() *TopologyType {
	p := new(TopologyType)
	*p = x
	return p
}

func (x TopologyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[1].Descriptor()
}

func (TopologyType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[1]
}

func (x TopologyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyType.Descriptor instead.
func (TopologyType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{1}
}

type UnderlayConnectionType int32

const (
	UnderlayConnectionType_UL_NA      UnderlayConnectionType = 0
	UnderlayConnectionType_UL_IGW     UnderlayConnectionType = 1
	UnderlayConnectionType_UL_PEERING UnderlayConnectionType = 2
	UnderlayConnectionType_UL_TGW     UnderlayConnectionType = 3
)

// Enum value maps for UnderlayConnectionType.
var (
	UnderlayConnectionType_name = map[int32]string{
		0: "UL_NA",
		1: "UL_IGW",
		2: "UL_PEERING",
		3: "UL_TGW",
	}
	UnderlayConnectionType_value = map[string]int32{
		"UL_NA":      0,
		"UL_IGW":     1,
		"UL_PEERING": 2,
		"UL_TGW":     3,
	}
)

func (x UnderlayConnectionType) Enum() *UnderlayConnectionType {
	p := new(UnderlayConnectionType)
	*p = x
	return p
}

func (x UnderlayConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UnderlayConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[2].Descriptor()
}

func (UnderlayConnectionType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[2]
}

func (x UnderlayConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UnderlayConnectionType.Descriptor instead.
func (UnderlayConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{2}
}

type OverlayConnectionType int32

const (
	OverlayConnectionType_OL_NA    OverlayConnectionType = 0
	OverlayConnectionType_OL_DPS   OverlayConnectionType = 1
	OverlayConnectionType_OL_VXLAN OverlayConnectionType = 2
	OverlayConnectionType_OL_IPSEC OverlayConnectionType = 3
)

// Enum value maps for OverlayConnectionType.
var (
	OverlayConnectionType_name = map[int32]string{
		0: "OL_NA",
		1: "OL_DPS",
		2: "OL_VXLAN",
		3: "OL_IPSEC",
	}
	OverlayConnectionType_value = map[string]int32{
		"OL_NA":    0,
		"OL_DPS":   1,
		"OL_VXLAN": 2,
		"OL_IPSEC": 3,
	}
)

func (x OverlayConnectionType) Enum() *OverlayConnectionType {
	p := new(OverlayConnectionType)
	*p = x
	return p
}

func (x OverlayConnectionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OverlayConnectionType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[3].Descriptor()
}

func (OverlayConnectionType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[3]
}

func (x OverlayConnectionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OverlayConnectionType.Descriptor instead.
func (OverlayConnectionType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{3}
}

type RoleType int32

const (
	RoleType_ROLE_UNSPECIFIED RoleType = 0
	RoleType_ROLE_EDGE        RoleType = 1
	RoleType_ROLE_SPINE       RoleType = 2
	RoleType_ROLE_LEAF        RoleType = 3
)

// Enum value maps for RoleType.
var (
	RoleType_name = map[int32]string{
		0: "ROLE_UNSPECIFIED",
		1: "ROLE_EDGE",
		2: "ROLE_SPINE",
		3: "ROLE_LEAF",
	}
	RoleType_value = map[string]int32{
		"ROLE_UNSPECIFIED": 0,
		"ROLE_EDGE":        1,
		"ROLE_SPINE":       2,
		"ROLE_LEAF":        3,
	}
)

func (x RoleType) Enum() *RoleType {
	p := new(RoleType)
	*p = x
	return p
}

func (x RoleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoleType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[4].Descriptor()
}

func (RoleType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[4]
}

func (x RoleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoleType.Descriptor instead.
func (RoleType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{4}
}

type DeploymentStatusCode int32

const (
	// TF or any other client that invokes Router message
	// should inform about deployment status
	// of the router instance
	DeploymentStatusCode_DEP_STATUS_UNSPECIFIED DeploymentStatusCode = 0
	DeploymentStatusCode_DEP_STATUS_IN_PROGRESS DeploymentStatusCode = 1
	DeploymentStatusCode_DEP_STATUS_SUCCESS     DeploymentStatusCode = 2
	DeploymentStatusCode_DEP_STATUS_ERR         DeploymentStatusCode = 3
)

// Enum value maps for DeploymentStatusCode.
var (
	DeploymentStatusCode_name = map[int32]string{
		0: "DEP_STATUS_UNSPECIFIED",
		1: "DEP_STATUS_IN_PROGRESS",
		2: "DEP_STATUS_SUCCESS",
		3: "DEP_STATUS_ERR",
	}
	DeploymentStatusCode_value = map[string]int32{
		"DEP_STATUS_UNSPECIFIED": 0,
		"DEP_STATUS_IN_PROGRESS": 1,
		"DEP_STATUS_SUCCESS":     2,
		"DEP_STATUS_ERR":         3,
	}
)

func (x DeploymentStatusCode) Enum() *DeploymentStatusCode {
	p := new(DeploymentStatusCode)
	*p = x
	return p
}

func (x DeploymentStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeploymentStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[5].Descriptor()
}

func (DeploymentStatusCode) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[5]
}

func (x DeploymentStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeploymentStatusCode.Descriptor instead.
func (DeploymentStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{5}
}

type CVStatusCode int32

const (
	CVStatusCode_CV_STATUS_UNSPECIFIED     CVStatusCode = 0
	CVStatusCode_CV_STATUS_RTR_CREATED     CVStatusCode = 1 // Rtr object is created. Waiting for router to start streaming
	CVStatusCode_CV_STATUS_RTR_DISCOVERED  CVStatusCode = 2 // Router is streaming, waiting for router to be provisioned
	CVStatusCode_CV_STATUS_RTR_PROVISIONED CVStatusCode = 3 // Router is provisioned. It is in the undefined container
	CVStatusCode_CV_STATUS_RTR_CONFIG_WIP  CVStatusCode = 4 // A config is being applied to the router
	CVStatusCode_CV_STATUS_RTR_READY       CVStatusCode = 5 // Rtr is ready for futher action/operation
	CVStatusCode_CV_STATUS_RTR_FAILED      CVStatusCode = 6 // Rtr could not be created
	CVStatusCode_CV_STATUS_RTR_INACTIVE    CVStatusCode = 7 // Rtr stopped streaming after it is provisioned
)

// Enum value maps for CVStatusCode.
var (
	CVStatusCode_name = map[int32]string{
		0: "CV_STATUS_UNSPECIFIED",
		1: "CV_STATUS_RTR_CREATED",
		2: "CV_STATUS_RTR_DISCOVERED",
		3: "CV_STATUS_RTR_PROVISIONED",
		4: "CV_STATUS_RTR_CONFIG_WIP",
		5: "CV_STATUS_RTR_READY",
		6: "CV_STATUS_RTR_FAILED",
		7: "CV_STATUS_RTR_INACTIVE",
	}
	CVStatusCode_value = map[string]int32{
		"CV_STATUS_UNSPECIFIED":     0,
		"CV_STATUS_RTR_CREATED":     1,
		"CV_STATUS_RTR_DISCOVERED":  2,
		"CV_STATUS_RTR_PROVISIONED": 3,
		"CV_STATUS_RTR_CONFIG_WIP":  4,
		"CV_STATUS_RTR_READY":       5,
		"CV_STATUS_RTR_FAILED":      6,
		"CV_STATUS_RTR_INACTIVE":    7,
	}
)

func (x CVStatusCode) Enum() *CVStatusCode {
	p := new(CVStatusCode)
	*p = x
	return p
}

func (x CVStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CVStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[6].Descriptor()
}

func (CVStatusCode) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[6]
}

func (x CVStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CVStatusCode.Descriptor instead.
func (CVStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{6}
}

type DeviceStatusCode int32

const (
	DeviceStatusCode_DEVICE_STATUS_UNSPECIFIED      DeviceStatusCode = 0
	DeviceStatusCode_DEVICE_STATUS_WORK_IN_PROGRESS DeviceStatusCode = 1
	DeviceStatusCode_DEVICE_STATUS_SUCCESS          DeviceStatusCode = 2
	DeviceStatusCode_DEVICE_STATUS_ERROR            DeviceStatusCode = 3
)

// Enum value maps for DeviceStatusCode.
var (
	DeviceStatusCode_name = map[int32]string{
		0: "DEVICE_STATUS_UNSPECIFIED",
		1: "DEVICE_STATUS_WORK_IN_PROGRESS",
		2: "DEVICE_STATUS_SUCCESS",
		3: "DEVICE_STATUS_ERROR",
	}
	DeviceStatusCode_value = map[string]int32{
		"DEVICE_STATUS_UNSPECIFIED":      0,
		"DEVICE_STATUS_WORK_IN_PROGRESS": 1,
		"DEVICE_STATUS_SUCCESS":          2,
		"DEVICE_STATUS_ERROR":            3,
	}
)

func (x DeviceStatusCode) Enum() *DeviceStatusCode {
	p := new(DeviceStatusCode)
	*p = x
	return p
}

func (x DeviceStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeviceStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[7].Descriptor()
}

func (DeviceStatusCode) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[7]
}

func (x DeviceStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeviceStatusCode.Descriptor instead.
func (DeviceStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{7}
}

type NetworkInterfaceType int32

const (
	NetworkInterfaceType_INTF_TYPE_UNSPECIFIED NetworkInterfaceType = 0
	NetworkInterfaceType_INTF_TYPE_PRIVATE     NetworkInterfaceType = 1
	NetworkInterfaceType_INTF_TYPE_PUBLIC      NetworkInterfaceType = 2
	NetworkInterfaceType_INTF_TYPE_INTERNAL    NetworkInterfaceType = 3
)

// Enum value maps for NetworkInterfaceType.
var (
	NetworkInterfaceType_name = map[int32]string{
		0: "INTF_TYPE_UNSPECIFIED",
		1: "INTF_TYPE_PRIVATE",
		2: "INTF_TYPE_PUBLIC",
		3: "INTF_TYPE_INTERNAL",
	}
	NetworkInterfaceType_value = map[string]int32{
		"INTF_TYPE_UNSPECIFIED": 0,
		"INTF_TYPE_PRIVATE":     1,
		"INTF_TYPE_PUBLIC":      2,
		"INTF_TYPE_INTERNAL":    3,
	}
)

func (x NetworkInterfaceType) Enum() *NetworkInterfaceType {
	p := new(NetworkInterfaceType)
	*p = x
	return p
}

func (x NetworkInterfaceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NetworkInterfaceType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[8].Descriptor()
}

func (NetworkInterfaceType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[8]
}

func (x NetworkInterfaceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NetworkInterfaceType.Descriptor instead.
func (NetworkInterfaceType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{8}
}

type TopologyInfoType int32

const (
	TopologyInfoType_TOPO_INFO_TYPE_UNSPECIFIED TopologyInfoType = 0
	TopologyInfoType_TOPO_INFO_META             TopologyInfoType = 1 // Topology meta info
	TopologyInfoType_TOPO_INFO_WAN              TopologyInfoType = 2
	TopologyInfoType_TOPO_INFO_CLOS             TopologyInfoType = 3
)

// Enum value maps for TopologyInfoType.
var (
	TopologyInfoType_name = map[int32]string{
		0: "TOPO_INFO_TYPE_UNSPECIFIED",
		1: "TOPO_INFO_META",
		2: "TOPO_INFO_WAN",
		3: "TOPO_INFO_CLOS",
	}
	TopologyInfoType_value = map[string]int32{
		"TOPO_INFO_TYPE_UNSPECIFIED": 0,
		"TOPO_INFO_META":             1,
		"TOPO_INFO_WAN":              2,
		"TOPO_INFO_CLOS":             3,
	}
)

func (x TopologyInfoType) Enum() *TopologyInfoType {
	p := new(TopologyInfoType)
	*p = x
	return p
}

func (x TopologyInfoType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TopologyInfoType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[9].Descriptor()
}

func (TopologyInfoType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[9]
}

func (x TopologyInfoType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TopologyInfoType.Descriptor instead.
func (TopologyInfoType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{9}
}

type FabricType int32

const (
	FabricType_FABRIC_TYPE_UNSPECIFIED FabricType = 0
	FabricType_FULL_MESH               FabricType = 1
	FabricType_HUB_SPOKE               FabricType = 2
)

// Enum value maps for FabricType.
var (
	FabricType_name = map[int32]string{
		0: "FABRIC_TYPE_UNSPECIFIED",
		1: "FULL_MESH",
		2: "HUB_SPOKE",
	}
	FabricType_value = map[string]int32{
		"FABRIC_TYPE_UNSPECIFIED": 0,
		"FULL_MESH":               1,
		"HUB_SPOKE":               2,
	}
)

func (x FabricType) Enum() *FabricType {
	p := new(FabricType)
	*p = x
	return p
}

func (x FabricType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FabricType) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[10].Descriptor()
}

func (FabricType) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[10]
}

func (x FabricType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FabricType.Descriptor instead.
func (FabricType) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{10}
}

type VpcStatusCode int32

const (
	VpcStatusCode_VPC_STATUS_UNSPECIFIED VpcStatusCode = 0
	VpcStatusCode_VPC_STATUS_ADD_SUCCESS VpcStatusCode = 1
	VpcStatusCode_VPC_STATUS_ADD_FAILURE VpcStatusCode = 2
)

// Enum value maps for VpcStatusCode.
var (
	VpcStatusCode_name = map[int32]string{
		0: "VPC_STATUS_UNSPECIFIED",
		1: "VPC_STATUS_ADD_SUCCESS",
		2: "VPC_STATUS_ADD_FAILURE",
	}
	VpcStatusCode_value = map[string]int32{
		"VPC_STATUS_UNSPECIFIED": 0,
		"VPC_STATUS_ADD_SUCCESS": 1,
		"VPC_STATUS_ADD_FAILURE": 2,
	}
)

func (x VpcStatusCode) Enum() *VpcStatusCode {
	p := new(VpcStatusCode)
	*p = x
	return p
}

func (x VpcStatusCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VpcStatusCode) Descriptor() protoreflect.EnumDescriptor {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[11].Descriptor()
}

func (VpcStatusCode) Type() protoreflect.EnumType {
	return &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes[11]
}

func (x VpcStatusCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VpcStatusCode.Descriptor instead.
func (VpcStatusCode) EnumDescriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{11}
}

type RouteTableIds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Public    []string               `protobuf:"bytes,1,rep,name=public,proto3" json:"public,omitempty"`
	Private   []string               `protobuf:"bytes,2,rep,name=private,proto3" json:"private,omitempty"`
	Internal  []string               `protobuf:"bytes,3,rep,name=internal,proto3" json:"internal,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *RouteTableIds) Reset() {
	*x = RouteTableIds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouteTableIds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteTableIds) ProtoMessage() {}

func (x *RouteTableIds) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteTableIds.ProtoReflect.Descriptor instead.
func (*RouteTableIds) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{0}
}

func (x *RouteTableIds) GetPublic() []string {
	if x != nil {
		return x.Public
	}
	return nil
}

func (x *RouteTableIds) GetPrivate() []string {
	if x != nil {
		return x.Private
	}
	return nil
}

func (x *RouteTableIds) GetInternal() []string {
	if x != nil {
		return x.Internal
	}
	return nil
}

func (x *RouteTableIds) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IntfId        string                 `protobuf:"bytes,1,opt,name=intf_id,json=intfId,proto3" json:"intf_id,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IntfType      NetworkInterfaceType   `protobuf:"varint,3,opt,name=intf_type,json=intfType,proto3,enum=clouddeploy.NetworkInterfaceType" json:"intf_type,omitempty"`
	PrivateIpAddr []string               `protobuf:"bytes,4,rep,name=private_ip_addr,json=privateIpAddr,proto3" json:"private_ip_addr,omitempty"`
	PublicIpAddr  string                 `protobuf:"bytes,5,opt,name=public_ip_addr,json=publicIpAddr,proto3" json:"public_ip_addr,omitempty"`
	Subnet        string                 `protobuf:"bytes,6,opt,name=subnet,proto3" json:"subnet,omitempty"`
	SecurityGroup string                 `protobuf:"bytes,7,opt,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{1}
}

func (x *NetworkInterface) GetIntfId() string {
	if x != nil {
		return x.IntfId
	}
	return ""
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetIntfType() NetworkInterfaceType {
	if x != nil {
		return x.IntfType
	}
	return NetworkInterfaceType_INTF_TYPE_UNSPECIFIED
}

func (x *NetworkInterface) GetPrivateIpAddr() []string {
	if x != nil {
		return x.PrivateIpAddr
	}
	return nil
}

func (x *NetworkInterface) GetPublicIpAddr() string {
	if x != nil {
		return x.PublicIpAddr
	}
	return ""
}

func (x *NetworkInterface) GetSubnet() string {
	if x != nil {
		return x.Subnet
	}
	return ""
}

func (x *NetworkInterface) GetSecurityGroup() string {
	if x != nil {
		return x.SecurityGroup
	}
	return ""
}

func (x *NetworkInterface) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type CVInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// CloudVision reports status of the deployment
	// using this message. This is ReadOnly for the
	// clients.
	CvStatusCode              CVStatusCode           `protobuf:"varint,1,opt,name=cv_status_code,json=cvStatusCode,proto3,enum=clouddeploy.CVStatusCode" json:"cv_status_code,omitempty"`
	BootstrapCfg              string                 `protobuf:"bytes,2,opt,name=bootstrap_cfg,json=bootstrapCfg,proto3" json:"bootstrap_cfg,omitempty"`
	HaRtrId                   string                 `protobuf:"bytes,3,opt,name=ha_rtr_id,json=haRtrId,proto3" json:"ha_rtr_id,omitempty"`
	PeerVpcRtTableId          []string               `protobuf:"bytes,4,rep,name=peer_vpc_rt_table_id,json=peerVpcRtTableId,proto3" json:"peer_vpc_rt_table_id,omitempty"`
	HaRtTableIds              *RouteTableIds         `protobuf:"bytes,5,opt,name=ha_rt_table_ids,json=haRtTableIds,proto3" json:"ha_rt_table_ids,omitempty"`
	CvStatusDesc              string                 `protobuf:"bytes,6,opt,name=cv_status_desc,json=cvStatusDesc,proto3" json:"cv_status_desc,omitempty"`
	CvStatusRecommendedAction string                 `protobuf:"bytes,7,opt,name=cv_status_recommended_action,json=cvStatusRecommendedAction,proto3" json:"cv_status_recommended_action,omitempty"`
	DeviceStatus              DeviceStatusCode       `protobuf:"varint,8,opt,name=device_status,json=deviceStatus,proto3,enum=clouddeploy.DeviceStatusCode" json:"device_status,omitempty"`
	FieldMask                 *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *CVInfo) Reset() {
	*x = CVInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CVInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CVInfo) ProtoMessage() {}

func (x *CVInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CVInfo.ProtoReflect.Descriptor instead.
func (*CVInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{2}
}

func (x *CVInfo) GetCvStatusCode() CVStatusCode {
	if x != nil {
		return x.CvStatusCode
	}
	return CVStatusCode_CV_STATUS_UNSPECIFIED
}

func (x *CVInfo) GetBootstrapCfg() string {
	if x != nil {
		return x.BootstrapCfg
	}
	return ""
}

func (x *CVInfo) GetHaRtrId() string {
	if x != nil {
		return x.HaRtrId
	}
	return ""
}

func (x *CVInfo) GetPeerVpcRtTableId() []string {
	if x != nil {
		return x.PeerVpcRtTableId
	}
	return nil
}

func (x *CVInfo) GetHaRtTableIds() *RouteTableIds {
	if x != nil {
		return x.HaRtTableIds
	}
	return nil
}

func (x *CVInfo) GetCvStatusDesc() string {
	if x != nil {
		return x.CvStatusDesc
	}
	return ""
}

func (x *CVInfo) GetCvStatusRecommendedAction() string {
	if x != nil {
		return x.CvStatusRecommendedAction
	}
	return ""
}

func (x *CVInfo) GetDeviceStatus() DeviceStatusCode {
	if x != nil {
		return x.DeviceStatus
	}
	return DeviceStatusCode_DEVICE_STATUS_UNSPECIFIED
}

func (x *CVInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AzureRouterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailZone    string                 `protobuf:"bytes,1,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	ResGroup     string                 `protobuf:"bytes,2,opt,name=res_group,json=resGroup,proto3" json:"res_group,omitempty"`
	InstanceType string                 `protobuf:"bytes,3,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	AvailSet     string                 `protobuf:"bytes,4,opt,name=avail_set,json=availSet,proto3" json:"avail_set,omitempty"`
	FieldMask    *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *AzureRouterDetail) Reset() {
	*x = AzureRouterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureRouterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureRouterDetail) ProtoMessage() {}

func (x *AzureRouterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureRouterDetail.ProtoReflect.Descriptor instead.
func (*AzureRouterDetail) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{3}
}

func (x *AzureRouterDetail) GetAvailZone() string {
	if x != nil {
		return x.AvailZone
	}
	return ""
}

func (x *AzureRouterDetail) GetResGroup() string {
	if x != nil {
		return x.ResGroup
	}
	return ""
}

func (x *AzureRouterDetail) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AzureRouterDetail) GetAvailSet() string {
	if x != nil {
		return x.AvailSet
	}
	return ""
}

func (x *AzureRouterDetail) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AwsRouterDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AvailZone    string                 `protobuf:"bytes,1,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	InstanceType string                 `protobuf:"bytes,2,opt,name=instance_type,json=instanceType,proto3" json:"instance_type,omitempty"`
	FieldMask    *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *AwsRouterDetail) Reset() {
	*x = AwsRouterDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsRouterDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsRouterDetail) ProtoMessage() {}

func (x *AwsRouterDetail) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsRouterDetail.ProtoReflect.Descriptor instead.
func (*AwsRouterDetail) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{4}
}

func (x *AwsRouterDetail) GetAvailZone() string {
	if x != nil {
		return x.AvailZone
	}
	return ""
}

func (x *AwsRouterDetail) GetInstanceType() string {
	if x != nil {
		return x.InstanceType
	}
	return ""
}

func (x *AwsRouterDetail) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type Router struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name + vpc_id + cp_t will be used as primary key
	Name                  string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VpcId                 string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	CpT                   CloudProviderType `protobuf:"varint,3,opt,name=cp_t,json=cpT,proto3,enum=clouddeploy.CloudProviderType" json:"cp_t,omitempty"`
	Region                string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	InstanceId            string            `protobuf:"bytes,5,opt,name=instance_id,json=instanceId,proto3" json:"instance_id,omitempty"`
	HaName                string            `protobuf:"bytes,6,opt,name=ha_name,json=haName,proto3" json:"ha_name,omitempty"`
	Id                    string            `protobuf:"bytes,7,opt,name=id,proto3" json:"id,omitempty"`                                                                                             // an ID can be generated by the client to track resource
	Cnps                  string            `protobuf:"bytes,8,opt,name=cnps,proto3" json:"cnps,omitempty"`                                                                                         // CNPS tag that identifies vrf
	Tags                  map[string]string `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Other tags that can be used in queries
	DeviceEnrollmentToken string            `protobuf:"bytes,10,opt,name=device_enrollment_token,json=deviceEnrollmentToken,proto3" json:"device_enrollment_token,omitempty"`
	RtTableIds            *RouteTableIds    `protobuf:"bytes,11,opt,name=rt_table_ids,json=rtTableIds,proto3" json:"rt_table_ids,omitempty"`
	RouteReflector        bool              `protobuf:"varint,12,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	// Based upon cp_t, either one of the following two fields will be set
	AwsRtrDetail    *AwsRouterDetail     `protobuf:"bytes,13,opt,name=aws_rtr_detail,json=awsRtrDetail,proto3" json:"aws_rtr_detail,omitempty"`
	AzRtrDetail     *AzureRouterDetail   `protobuf:"bytes,14,opt,name=az_rtr_detail,json=azRtrDetail,proto3" json:"az_rtr_detail,omitempty"`
	Intf            []*NetworkInterface  `protobuf:"bytes,15,rep,name=intf,proto3" json:"intf,omitempty"`
	DepStatus       DeploymentStatusCode `protobuf:"varint,16,opt,name=dep_status,json=depStatus,proto3,enum=clouddeploy.DeploymentStatusCode" json:"dep_status,omitempty"`
	CvInfo          *CVInfo              `protobuf:"bytes,17,opt,name=cv_info,json=cvInfo,proto3" json:"cv_info,omitempty"`                              // Field filled in by CVP. Client should never set this
	DeviceSerialNum string               `protobuf:"bytes,18,opt,name=device_serial_num,json=deviceSerialNum,proto3" json:"device_serial_num,omitempty"` // Field set by clouddeploy app for UI,
	//client should never set this
	BgpAsn     uint32                 `protobuf:"varint,19,opt,name=bgp_asn,json=bgpAsn,proto3" json:"bgp_asn,omitempty"` // Bgp ASN generated by clouddeploy app, client should never set this
	ManagedBy  string                 `protobuf:"bytes,20,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	DeployMode string                 `protobuf:"bytes,21,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
	FieldMask  *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *Router) Reset() {
	*x = Router{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Router) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Router) ProtoMessage() {}

func (x *Router) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Router.ProtoReflect.Descriptor instead.
func (*Router) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{5}
}

func (x *Router) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Router) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *Router) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *Router) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Router) GetInstanceId() string {
	if x != nil {
		return x.InstanceId
	}
	return ""
}

func (x *Router) GetHaName() string {
	if x != nil {
		return x.HaName
	}
	return ""
}

func (x *Router) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Router) GetCnps() string {
	if x != nil {
		return x.Cnps
	}
	return ""
}

func (x *Router) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Router) GetDeviceEnrollmentToken() string {
	if x != nil {
		return x.DeviceEnrollmentToken
	}
	return ""
}

func (x *Router) GetRtTableIds() *RouteTableIds {
	if x != nil {
		return x.RtTableIds
	}
	return nil
}

func (x *Router) GetRouteReflector() bool {
	if x != nil {
		return x.RouteReflector
	}
	return false
}

func (x *Router) GetAwsRtrDetail() *AwsRouterDetail {
	if x != nil {
		return x.AwsRtrDetail
	}
	return nil
}

func (x *Router) GetAzRtrDetail() *AzureRouterDetail {
	if x != nil {
		return x.AzRtrDetail
	}
	return nil
}

func (x *Router) GetIntf() []*NetworkInterface {
	if x != nil {
		return x.Intf
	}
	return nil
}

func (x *Router) GetDepStatus() DeploymentStatusCode {
	if x != nil {
		return x.DepStatus
	}
	return DeploymentStatusCode_DEP_STATUS_UNSPECIFIED
}

func (x *Router) GetCvInfo() *CVInfo {
	if x != nil {
		return x.CvInfo
	}
	return nil
}

func (x *Router) GetDeviceSerialNum() string {
	if x != nil {
		return x.DeviceSerialNum
	}
	return ""
}

func (x *Router) GetBgpAsn() uint32 {
	if x != nil {
		return x.BgpAsn
	}
	return 0
}

func (x *Router) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *Router) GetDeployMode() string {
	if x != nil {
		return x.DeployMode
	}
	return ""
}

func (x *Router) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AddRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *AddRouterRequest) Reset() {
	*x = AddRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouterRequest) ProtoMessage() {}

func (x *AddRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouterRequest.ProtoReflect.Descriptor instead.
func (*AddRouterRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{6}
}

func (x *AddRouterRequest) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

type AddRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router    *Router                `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddRouterResponse) Reset() {
	*x = AddRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddRouterResponse) ProtoMessage() {}

func (x *AddRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddRouterResponse.ProtoReflect.Descriptor instead.
func (*AddRouterResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{7}
}

func (x *AddRouterResponse) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *AddRouterResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpdateRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *UpdateRouterRequest) Reset() {
	*x = UpdateRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouterRequest) ProtoMessage() {}

func (x *UpdateRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouterRequest.ProtoReflect.Descriptor instead.
func (*UpdateRouterRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateRouterRequest) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

type UpdateRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router                `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *UpdateRouterResponse) Reset() {
	*x = UpdateRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRouterResponse) ProtoMessage() {}

func (x *UpdateRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRouterResponse.ProtoReflect.Descriptor instead.
func (*UpdateRouterResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateRouterResponse) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *UpdateRouterResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type DeleteRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
}

func (x *DeleteRouterRequest) Reset() {
	*x = DeleteRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouterRequest) ProtoMessage() {}

func (x *DeleteRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouterRequest.ProtoReflect.Descriptor instead.
func (*DeleteRouterRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteRouterRequest) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

type DeleteRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteRouterResponse) Reset() {
	*x = DeleteRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRouterResponse) ProtoMessage() {}

func (x *DeleteRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRouterResponse.ProtoReflect.Descriptor instead.
func (*DeleteRouterResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{11}
}

type GetRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router                `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetRouterRequest) Reset() {
	*x = GetRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouterRequest) ProtoMessage() {}

func (x *GetRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouterRequest.ProtoReflect.Descriptor instead.
func (*GetRouterRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{12}
}

func (x *GetRouterRequest) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *GetRouterRequest) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type GetRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router                `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetRouterResponse) Reset() {
	*x = GetRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRouterResponse) ProtoMessage() {}

func (x *GetRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRouterResponse.ProtoReflect.Descriptor instead.
func (*GetRouterResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{13}
}

func (x *GetRouterResponse) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *GetRouterResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type ListRouterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    []*Router              `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	AtTime    *time.RequestAtTime    `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Watch     bool                   `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListRouterRequest) Reset() {
	*x = ListRouterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouterRequest) ProtoMessage() {}

func (x *ListRouterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouterRequest.ProtoReflect.Descriptor instead.
func (*ListRouterRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{14}
}

func (x *ListRouterRequest) GetFilter() []*Router {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListRouterRequest) GetAtTime() *time.RequestAtTime {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *ListRouterRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListRouterRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListRouterResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Router *Router                `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *ListRouterResponse) Reset() {
	*x = ListRouterResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRouterResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRouterResponse) ProtoMessage() {}

func (x *ListRouterResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRouterResponse.ProtoReflect.Descriptor instead.
func (*ListRouterResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{15}
}

func (x *ListRouterResponse) GetRouter() *Router {
	if x != nil {
		return x.Router
	}
	return nil
}

func (x *ListRouterResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type WanInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WanName              string                 `protobuf:"bytes,1,opt,name=wan_name,json=wanName,proto3" json:"wan_name,omitempty"`
	CpType               CloudProviderType      `protobuf:"varint,2,opt,name=cp_type,json=cpType,proto3,enum=clouddeploy.CloudProviderType" json:"cp_type,omitempty"`
	PeerNames            []string               `protobuf:"bytes,3,rep,name=peer_names,json=peerNames,proto3" json:"peer_names,omitempty"`
	EdgeEdgePeering      bool                   `protobuf:"varint,4,opt,name=edge_edge_peering,json=edgeEdgePeering,proto3" json:"edge_edge_peering,omitempty"`
	EdgeEdgeIgw          bool                   `protobuf:"varint,5,opt,name=edge_edge_igw,json=edgeEdgeIgw,proto3" json:"edge_edge_igw,omitempty"`
	EdgeDedicatedConnect bool                   `protobuf:"varint,6,opt,name=edge_dedicated_connect,json=edgeDedicatedConnect,proto3" json:"edge_dedicated_connect,omitempty"` // DirectConnect
	CvpContainerName     string                 `protobuf:"bytes,7,opt,name=cvp_container_name,json=cvpContainerName,proto3" json:"cvp_container_name,omitempty"`
	FieldMask            *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *WanInfo) Reset() {
	*x = WanInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WanInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WanInfo) ProtoMessage() {}

func (x *WanInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WanInfo.ProtoReflect.Descriptor instead.
func (*WanInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{16}
}

func (x *WanInfo) GetWanName() string {
	if x != nil {
		return x.WanName
	}
	return ""
}

func (x *WanInfo) GetCpType() CloudProviderType {
	if x != nil {
		return x.CpType
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *WanInfo) GetPeerNames() []string {
	if x != nil {
		return x.PeerNames
	}
	return nil
}

func (x *WanInfo) GetEdgeEdgePeering() bool {
	if x != nil {
		return x.EdgeEdgePeering
	}
	return false
}

func (x *WanInfo) GetEdgeEdgeIgw() bool {
	if x != nil {
		return x.EdgeEdgeIgw
	}
	return false
}

func (x *WanInfo) GetEdgeDedicatedConnect() bool {
	if x != nil {
		return x.EdgeDedicatedConnect
	}
	return false
}

func (x *WanInfo) GetCvpContainerName() string {
	if x != nil {
		return x.CvpContainerName
	}
	return ""
}

func (x *WanInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ClosInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClosName         string                 `protobuf:"bytes,1,opt,name=clos_name,json=closName,proto3" json:"clos_name,omitempty"`
	CpType           CloudProviderType      `protobuf:"varint,2,opt,name=cp_type,json=cpType,proto3,enum=clouddeploy.CloudProviderType" json:"cp_type,omitempty"`
	Fabric           FabricType             `protobuf:"varint,3,opt,name=fabric,proto3,enum=clouddeploy.FabricType" json:"fabric,omitempty"`                // for Leaf connectivity
	LeafEdgePeering  bool                   `protobuf:"varint,4,opt,name=leaf_edge_peering,json=leafEdgePeering,proto3" json:"leaf_edge_peering,omitempty"` // VPC peering b/w leaf and edge
	LeafEdgeIgw      bool                   `protobuf:"varint,5,opt,name=leaf_edge_igw,json=leafEdgeIgw,proto3" json:"leaf_edge_igw,omitempty"`             // IGW b/w leaf and edge
	LeafEncryption   bool                   `protobuf:"varint,6,opt,name=leaf_encryption,json=leafEncryption,proto3" json:"leaf_encryption,omitempty"`      // IPSec b/w leaf and edge
	CvpContainerName string                 `protobuf:"bytes,7,opt,name=cvp_container_name,json=cvpContainerName,proto3" json:"cvp_container_name,omitempty"`
	FieldMask        *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ClosInfo) Reset() {
	*x = ClosInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClosInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClosInfo) ProtoMessage() {}

func (x *ClosInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClosInfo.ProtoReflect.Descriptor instead.
func (*ClosInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{17}
}

func (x *ClosInfo) GetClosName() string {
	if x != nil {
		return x.ClosName
	}
	return ""
}

func (x *ClosInfo) GetCpType() CloudProviderType {
	if x != nil {
		return x.CpType
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *ClosInfo) GetFabric() FabricType {
	if x != nil {
		return x.Fabric
	}
	return FabricType_FABRIC_TYPE_UNSPECIFIED
}

func (x *ClosInfo) GetLeafEdgePeering() bool {
	if x != nil {
		return x.LeafEdgePeering
	}
	return false
}

func (x *ClosInfo) GetLeafEdgeIgw() bool {
	if x != nil {
		return x.LeafEdgeIgw
	}
	return false
}

func (x *ClosInfo) GetLeafEncryption() bool {
	if x != nil {
		return x.LeafEncryption
	}
	return false
}

func (x *ClosInfo) GetCvpContainerName() string {
	if x != nil {
		return x.CvpContainerName
	}
	return ""
}

func (x *ClosInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type TopologyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Topology meta info
	Name                string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id                  string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	TopoType            TopologyInfoType       `protobuf:"varint,3,opt,name=topo_type,json=topoType,proto3,enum=clouddeploy.TopologyInfoType" json:"topo_type,omitempty"`
	BgpAsnLow           uint32                 `protobuf:"varint,4,opt,name=bgp_asn_low,json=bgpAsnLow,proto3" json:"bgp_asn_low,omitempty"`
	BgpAsnHigh          uint32                 `protobuf:"varint,5,opt,name=bgp_asn_high,json=bgpAsnHigh,proto3" json:"bgp_asn_high,omitempty"`
	VtepIpCidr          string                 `protobuf:"bytes,6,opt,name=vtep_ip_cidr,json=vtepIpCidr,proto3" json:"vtep_ip_cidr,omitempty"`                              // CIDR block for VTEP IPs on vEOS
	TerminattrIpCidr    string                 `protobuf:"bytes,7,opt,name=terminattr_ip_cidr,json=terminattrIpCidr,proto3" json:"terminattr_ip_cidr,omitempty"`            // Loopback IP range on vEOS
	DpsControlPlaneCidr string                 `protobuf:"bytes,8,opt,name=dps_control_plane_cidr,json=dpsControlPlaneCidr,proto3" json:"dps_control_plane_cidr,omitempty"` // Dps Control Plane IP Cidr
	ManagedDevices      []string               `protobuf:"bytes,9,rep,name=managed_devices,json=managedDevices,proto3" json:"managed_devices,omitempty"`                    // Hostnames of existing vEOS instances
	CvaasDomain         string                 `protobuf:"bytes,10,opt,name=cvaas_domain,json=cvaasDomain,proto3" json:"cvaas_domain,omitempty"`                            //CVaaS Domain Name
	CvaasServer         string                 `protobuf:"bytes,11,opt,name=cvaas_server,json=cvaasServer,proto3" json:"cvaas_server,omitempty"`
	WanInfo             *WanInfo               `protobuf:"bytes,12,opt,name=wan_info,json=wanInfo,proto3" json:"wan_info,omitempty"`
	ClosInfo            *ClosInfo              `protobuf:"bytes,13,opt,name=clos_info,json=closInfo,proto3" json:"clos_info,omitempty"`
	Version             string                 `protobuf:"bytes,14,opt,name=version,proto3" json:"version,omitempty"`
	DeployMode          string                 `protobuf:"bytes,15,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
	FieldMask           *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *TopologyInfo) Reset() {
	*x = TopologyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TopologyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopologyInfo) ProtoMessage() {}

func (x *TopologyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopologyInfo.ProtoReflect.Descriptor instead.
func (*TopologyInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{18}
}

func (x *TopologyInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TopologyInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TopologyInfo) GetTopoType() TopologyInfoType {
	if x != nil {
		return x.TopoType
	}
	return TopologyInfoType_TOPO_INFO_TYPE_UNSPECIFIED
}

func (x *TopologyInfo) GetBgpAsnLow() uint32 {
	if x != nil {
		return x.BgpAsnLow
	}
	return 0
}

func (x *TopologyInfo) GetBgpAsnHigh() uint32 {
	if x != nil {
		return x.BgpAsnHigh
	}
	return 0
}

func (x *TopologyInfo) GetVtepIpCidr() string {
	if x != nil {
		return x.VtepIpCidr
	}
	return ""
}

func (x *TopologyInfo) GetTerminattrIpCidr() string {
	if x != nil {
		return x.TerminattrIpCidr
	}
	return ""
}

func (x *TopologyInfo) GetDpsControlPlaneCidr() string {
	if x != nil {
		return x.DpsControlPlaneCidr
	}
	return ""
}

func (x *TopologyInfo) GetManagedDevices() []string {
	if x != nil {
		return x.ManagedDevices
	}
	return nil
}

func (x *TopologyInfo) GetCvaasDomain() string {
	if x != nil {
		return x.CvaasDomain
	}
	return ""
}

func (x *TopologyInfo) GetCvaasServer() string {
	if x != nil {
		return x.CvaasServer
	}
	return ""
}

func (x *TopologyInfo) GetWanInfo() *WanInfo {
	if x != nil {
		return x.WanInfo
	}
	return nil
}

func (x *TopologyInfo) GetClosInfo() *ClosInfo {
	if x != nil {
		return x.ClosInfo
	}
	return nil
}

func (x *TopologyInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TopologyInfo) GetDeployMode() string {
	if x != nil {
		return x.DeployMode
	}
	return ""
}

func (x *TopologyInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AddTopologyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
}

func (x *AddTopologyInfoRequest) Reset() {
	*x = AddTopologyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopologyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopologyInfoRequest) ProtoMessage() {}

func (x *AddTopologyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopologyInfoRequest.ProtoReflect.Descriptor instead.
func (*AddTopologyInfoRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{19}
}

func (x *AddTopologyInfoRequest) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

type AddTopologyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo          `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	CreatedAt    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddTopologyInfoResponse) Reset() {
	*x = AddTopologyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTopologyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTopologyInfoResponse) ProtoMessage() {}

func (x *AddTopologyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTopologyInfoResponse.ProtoReflect.Descriptor instead.
func (*AddTopologyInfoResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{20}
}

func (x *AddTopologyInfoResponse) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *AddTopologyInfoResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpdateTopologyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
}

func (x *UpdateTopologyInfoRequest) Reset() {
	*x = UpdateTopologyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopologyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopologyInfoRequest) ProtoMessage() {}

func (x *UpdateTopologyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopologyInfoRequest.ProtoReflect.Descriptor instead.
func (*UpdateTopologyInfoRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{21}
}

func (x *UpdateTopologyInfoRequest) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

type UpdateTopologyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo          `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	AtTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *UpdateTopologyInfoResponse) Reset() {
	*x = UpdateTopologyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateTopologyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateTopologyInfoResponse) ProtoMessage() {}

func (x *UpdateTopologyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateTopologyInfoResponse.ProtoReflect.Descriptor instead.
func (*UpdateTopologyInfoResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{22}
}

func (x *UpdateTopologyInfoResponse) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *UpdateTopologyInfoResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type DeleteTopologyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
}

func (x *DeleteTopologyInfoRequest) Reset() {
	*x = DeleteTopologyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopologyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopologyInfoRequest) ProtoMessage() {}

func (x *DeleteTopologyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopologyInfoRequest.ProtoReflect.Descriptor instead.
func (*DeleteTopologyInfoRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteTopologyInfoRequest) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

type DeleteTopologyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTopologyInfoResponse) Reset() {
	*x = DeleteTopologyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopologyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopologyInfoResponse) ProtoMessage() {}

func (x *DeleteTopologyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopologyInfoResponse.ProtoReflect.Descriptor instead.
func (*DeleteTopologyInfoResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{24}
}

type GetTopologyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo          `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	AtTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetTopologyInfoRequest) Reset() {
	*x = GetTopologyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyInfoRequest) ProtoMessage() {}

func (x *GetTopologyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTopologyInfoRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{25}
}

func (x *GetTopologyInfoRequest) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *GetTopologyInfoRequest) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type GetTopologyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo          `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	AtTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetTopologyInfoResponse) Reset() {
	*x = GetTopologyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopologyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopologyInfoResponse) ProtoMessage() {}

func (x *GetTopologyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopologyInfoResponse.ProtoReflect.Descriptor instead.
func (*GetTopologyInfoResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{26}
}

func (x *GetTopologyInfoResponse) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *GetTopologyInfoResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type ListTopologyInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    []*TopologyInfo        `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	AtTime    *time.RequestAtTime    `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Watch     bool                   `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,4,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListTopologyInfoRequest) Reset() {
	*x = ListTopologyInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopologyInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopologyInfoRequest) ProtoMessage() {}

func (x *ListTopologyInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopologyInfoRequest.ProtoReflect.Descriptor instead.
func (*ListTopologyInfoRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{27}
}

func (x *ListTopologyInfoRequest) GetFilter() []*TopologyInfo {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListTopologyInfoRequest) GetAtTime() *time.RequestAtTime {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *ListTopologyInfoRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListTopologyInfoRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListTopologyInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopologyInfo *TopologyInfo          `protobuf:"bytes,1,opt,name=topology_info,json=topologyInfo,proto3" json:"topology_info,omitempty"`
	AtTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *ListTopologyInfoResponse) Reset() {
	*x = ListTopologyInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopologyInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopologyInfoResponse) ProtoMessage() {}

func (x *ListTopologyInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopologyInfoResponse.ProtoReflect.Descriptor instead.
func (*ListTopologyInfoResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{28}
}

func (x *ListTopologyInfoResponse) GetTopologyInfo() *TopologyInfo {
	if x != nil {
		return x.TopologyInfo
	}
	return nil
}

func (x *ListTopologyInfoResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type AzureVnetInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nsg           []string               `protobuf:"bytes,1,rep,name=nsg,proto3" json:"nsg,omitempty"`
	ResourceGroup string                 `protobuf:"bytes,2,opt,name=resource_group,json=resourceGroup,proto3" json:"resource_group,omitempty"`
	Cidr          string                 `protobuf:"bytes,3,opt,name=cidr,proto3" json:"cidr,omitempty"`
	AvailSet      []string               `protobuf:"bytes,4,rep,name=avail_set,json=availSet,proto3" json:"avail_set,omitempty"`
	PeeringConnId []string               `protobuf:"bytes,5,rep,name=peering_conn_id,json=peeringConnId,proto3" json:"peering_conn_id,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *AzureVnetInfo) Reset() {
	*x = AzureVnetInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AzureVnetInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AzureVnetInfo) ProtoMessage() {}

func (x *AzureVnetInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AzureVnetInfo.ProtoReflect.Descriptor instead.
func (*AzureVnetInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{29}
}

func (x *AzureVnetInfo) GetNsg() []string {
	if x != nil {
		return x.Nsg
	}
	return nil
}

func (x *AzureVnetInfo) GetResourceGroup() string {
	if x != nil {
		return x.ResourceGroup
	}
	return ""
}

func (x *AzureVnetInfo) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *AzureVnetInfo) GetAvailSet() []string {
	if x != nil {
		return x.AvailSet
	}
	return nil
}

func (x *AzureVnetInfo) GetPeeringConnId() []string {
	if x != nil {
		return x.PeeringConnId
	}
	return nil
}

func (x *AzureVnetInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AwsVpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SecurityGroup []string               `protobuf:"bytes,1,rep,name=security_group,json=securityGroup,proto3" json:"security_group,omitempty"`
	Cidr          string                 `protobuf:"bytes,2,opt,name=cidr,proto3" json:"cidr,omitempty"`
	IgwId         string                 `protobuf:"bytes,3,opt,name=igw_id,json=igwId,proto3" json:"igw_id,omitempty"`
	PeeringConnId []string               `protobuf:"bytes,4,rep,name=peering_conn_id,json=peeringConnId,proto3" json:"peering_conn_id,omitempty"`
	FieldMask     *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *AwsVpcInfo) Reset() {
	*x = AwsVpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AwsVpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AwsVpcInfo) ProtoMessage() {}

func (x *AwsVpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AwsVpcInfo.ProtoReflect.Descriptor instead.
func (*AwsVpcInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{30}
}

func (x *AwsVpcInfo) GetSecurityGroup() []string {
	if x != nil {
		return x.SecurityGroup
	}
	return nil
}

func (x *AwsVpcInfo) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *AwsVpcInfo) GetIgwId() string {
	if x != nil {
		return x.IgwId
	}
	return ""
}

func (x *AwsVpcInfo) GetPeeringConnId() []string {
	if x != nil {
		return x.PeeringConnId
	}
	return nil
}

func (x *AwsVpcInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type PeerVpcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerVpcCidr  map[string]string      `protobuf:"bytes,1,rep,name=peer_vpc_cidr,json=peerVpcCidr,proto3" json:"peer_vpc_cidr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	PeerRgName   string                 `protobuf:"bytes,2,opt,name=peer_rg_name,json=peerRgName,proto3" json:"peer_rg_name,omitempty"`
	PeerVnetName string                 `protobuf:"bytes,3,opt,name=peer_vnet_name,json=peerVnetName,proto3" json:"peer_vnet_name,omitempty"`
	PeerVnetId   string                 `protobuf:"bytes,4,opt,name=peer_vnet_id,json=peerVnetId,proto3" json:"peer_vnet_id,omitempty"`
	FieldMask    *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *PeerVpcInfo) Reset() {
	*x = PeerVpcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PeerVpcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerVpcInfo) ProtoMessage() {}

func (x *PeerVpcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerVpcInfo.ProtoReflect.Descriptor instead.
func (*PeerVpcInfo) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{31}
}

func (x *PeerVpcInfo) GetPeerVpcCidr() map[string]string {
	if x != nil {
		return x.PeerVpcCidr
	}
	return nil
}

func (x *PeerVpcInfo) GetPeerRgName() string {
	if x != nil {
		return x.PeerRgName
	}
	return ""
}

func (x *PeerVpcInfo) GetPeerVnetName() string {
	if x != nil {
		return x.PeerVnetName
	}
	return ""
}

func (x *PeerVpcInfo) GetPeerVnetId() string {
	if x != nil {
		return x.PeerVnetId
	}
	return ""
}

func (x *PeerVpcInfo) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type Vpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name + vpc_id + cp_t is the primary key
	Name   string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	VpcId  string            `protobuf:"bytes,2,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	CpT    CloudProviderType `protobuf:"varint,3,opt,name=cp_t,json=cpT,proto3,enum=clouddeploy.CloudProviderType" json:"cp_t,omitempty"`
	Region string            `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
	Id     string            `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"` // an ID can be generated by the client to track resource
	// Topology related attributes
	RoleType       RoleType          `protobuf:"varint,6,opt,name=role_type,json=roleType,proto3,enum=clouddeploy.RoleType" json:"role_type,omitempty"`
	TopologyName   string            `protobuf:"bytes,7,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	ClosName       string            `protobuf:"bytes,8,opt,name=clos_name,json=closName,proto3" json:"clos_name,omitempty"`
	WanName        string            `protobuf:"bytes,9,opt,name=wan_name,json=wanName,proto3" json:"wan_name,omitempty"`
	AzVnetInfo     *AzureVnetInfo    `protobuf:"bytes,10,opt,name=az_vnet_info,json=azVnetInfo,proto3" json:"az_vnet_info,omitempty"`
	AwsVpcInfo     *AwsVpcInfo       `protobuf:"bytes,11,opt,name=aws_vpc_info,json=awsVpcInfo,proto3" json:"aws_vpc_info,omitempty"`
	Cnps           string            `protobuf:"bytes,12,opt,name=cnps,proto3" json:"cnps,omitempty"`
	RouteReflector bool              `protobuf:"varint,13,opt,name=route_reflector,json=routeReflector,proto3" json:"route_reflector,omitempty"`
	Tags           map[string]string `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Other tags that can be used in queries
	// Client should not set these attributes
	PeerVpcCidr  map[string]string      `protobuf:"bytes,15,rep,name=peer_vpc_cidr,json=peerVpcCidr,proto3" json:"peer_vpc_cidr,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // mapping between vpc_id -> cidr
	StatusCode   VpcStatusCode          `protobuf:"varint,16,opt,name=status_code,json=statusCode,proto3,enum=clouddeploy.VpcStatusCode" json:"status_code,omitempty"`                                                              // Vpc creation status
	Account      string                 `protobuf:"bytes,17,opt,name=account,proto3" json:"account,omitempty"`                                                                                                                      // account information
	PeerVpcInfo  *PeerVpcInfo           `protobuf:"bytes,18,opt,name=peer_vpc_info,json=peerVpcInfo,proto3" json:"peer_vpc_info,omitempty"`
	TgwConnected bool                   `protobuf:"varint,19,opt,name=tgw_connected,json=tgwConnected,proto3" json:"tgw_connected,omitempty"`
	Cloudeos     bool                   `protobuf:"varint,20,opt,name=cloudeos,proto3" json:"cloudeos,omitempty"`
	ManagedBy    string                 `protobuf:"bytes,21,opt,name=managed_by,json=managedBy,proto3" json:"managed_by,omitempty"`
	DeployMode   string                 `protobuf:"bytes,22,opt,name=deploy_mode,json=deployMode,proto3" json:"deploy_mode,omitempty"`
	FieldMask    *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *Vpc) Reset() {
	*x = Vpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vpc) ProtoMessage() {}

func (x *Vpc) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vpc.ProtoReflect.Descriptor instead.
func (*Vpc) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{32}
}

func (x *Vpc) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Vpc) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *Vpc) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *Vpc) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *Vpc) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Vpc) GetRoleType() RoleType {
	if x != nil {
		return x.RoleType
	}
	return RoleType_ROLE_UNSPECIFIED
}

func (x *Vpc) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *Vpc) GetClosName() string {
	if x != nil {
		return x.ClosName
	}
	return ""
}

func (x *Vpc) GetWanName() string {
	if x != nil {
		return x.WanName
	}
	return ""
}

func (x *Vpc) GetAzVnetInfo() *AzureVnetInfo {
	if x != nil {
		return x.AzVnetInfo
	}
	return nil
}

func (x *Vpc) GetAwsVpcInfo() *AwsVpcInfo {
	if x != nil {
		return x.AwsVpcInfo
	}
	return nil
}

func (x *Vpc) GetCnps() string {
	if x != nil {
		return x.Cnps
	}
	return ""
}

func (x *Vpc) GetRouteReflector() bool {
	if x != nil {
		return x.RouteReflector
	}
	return false
}

func (x *Vpc) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Vpc) GetPeerVpcCidr() map[string]string {
	if x != nil {
		return x.PeerVpcCidr
	}
	return nil
}

func (x *Vpc) GetStatusCode() VpcStatusCode {
	if x != nil {
		return x.StatusCode
	}
	return VpcStatusCode_VPC_STATUS_UNSPECIFIED
}

func (x *Vpc) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *Vpc) GetPeerVpcInfo() *PeerVpcInfo {
	if x != nil {
		return x.PeerVpcInfo
	}
	return nil
}

func (x *Vpc) GetTgwConnected() bool {
	if x != nil {
		return x.TgwConnected
	}
	return false
}

func (x *Vpc) GetCloudeos() bool {
	if x != nil {
		return x.Cloudeos
	}
	return false
}

func (x *Vpc) GetManagedBy() string {
	if x != nil {
		return x.ManagedBy
	}
	return ""
}

func (x *Vpc) GetDeployMode() string {
	if x != nil {
		return x.DeployMode
	}
	return ""
}

func (x *Vpc) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AddVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *Vpc `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *AddVpcRequest) Reset() {
	*x = AddVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVpcRequest) ProtoMessage() {}

func (x *AddVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVpcRequest.ProtoReflect.Descriptor instead.
func (*AddVpcRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{33}
}

func (x *AddVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type AddVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc       *Vpc                   `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddVpcResponse) Reset() {
	*x = AddVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddVpcResponse) ProtoMessage() {}

func (x *AddVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddVpcResponse.ProtoReflect.Descriptor instead.
func (*AddVpcResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{34}
}

func (x *AddVpcResponse) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *AddVpcResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpdateVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *Vpc `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *UpdateVpcRequest) Reset() {
	*x = UpdateVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpcRequest) ProtoMessage() {}

func (x *UpdateVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpcRequest.ProtoReflect.Descriptor instead.
func (*UpdateVpcRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{35}
}

func (x *UpdateVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type UpdateVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc    *Vpc                   `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *UpdateVpcResponse) Reset() {
	*x = UpdateVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVpcResponse) ProtoMessage() {}

func (x *UpdateVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVpcResponse.ProtoReflect.Descriptor instead.
func (*UpdateVpcResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{36}
}

func (x *UpdateVpcResponse) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *UpdateVpcResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type DeleteVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc *Vpc `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
}

func (x *DeleteVpcRequest) Reset() {
	*x = DeleteVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpcRequest) ProtoMessage() {}

func (x *DeleteVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpcRequest.ProtoReflect.Descriptor instead.
func (*DeleteVpcRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{37}
}

func (x *DeleteVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

type DeleteVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteVpcResponse) Reset() {
	*x = DeleteVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVpcResponse) ProtoMessage() {}

func (x *DeleteVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVpcResponse.ProtoReflect.Descriptor instead.
func (*DeleteVpcResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{38}
}

type GetVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc    *Vpc                   `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetVpcRequest) Reset() {
	*x = GetVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVpcRequest) ProtoMessage() {}

func (x *GetVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVpcRequest.ProtoReflect.Descriptor instead.
func (*GetVpcRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{39}
}

func (x *GetVpcRequest) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *GetVpcRequest) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type GetVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc    *Vpc                   `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetVpcResponse) Reset() {
	*x = GetVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVpcResponse) ProtoMessage() {}

func (x *GetVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVpcResponse.ProtoReflect.Descriptor instead.
func (*GetVpcResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{40}
}

func (x *GetVpcResponse) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *GetVpcResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type ListVpcRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    []*Vpc                 `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	AtTime    *time.RequestAtTime    `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Watch     bool                   `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListVpcRequest) Reset() {
	*x = ListVpcRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVpcRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcRequest) ProtoMessage() {}

func (x *ListVpcRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcRequest.ProtoReflect.Descriptor instead.
func (*ListVpcRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{41}
}

func (x *ListVpcRequest) GetFilter() []*Vpc {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListVpcRequest) GetAtTime() *time.RequestAtTime {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *ListVpcRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListVpcRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListVpcResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vpc    *Vpc                   `protobuf:"bytes,1,opt,name=vpc,proto3" json:"vpc,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *ListVpcResponse) Reset() {
	*x = ListVpcResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListVpcResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVpcResponse) ProtoMessage() {}

func (x *ListVpcResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVpcResponse.ProtoReflect.Descriptor instead.
func (*ListVpcResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{42}
}

func (x *ListVpcResponse) GetVpc() *Vpc {
	if x != nil {
		return x.Vpc
	}
	return nil
}

func (x *ListVpcResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

// Resource Subnet
type Subnet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SubnetId  string                 `protobuf:"bytes,1,opt,name=subnet_id,json=subnetId,proto3" json:"subnet_id,omitempty"`
	CpT       CloudProviderType      `protobuf:"varint,2,opt,name=cp_t,json=cpT,proto3,enum=clouddeploy.CloudProviderType" json:"cp_t,omitempty"`
	Id        string                 `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"` // an ID can be generated by the client to track resource
	Cidr      string                 `protobuf:"bytes,4,opt,name=cidr,proto3" json:"cidr,omitempty"`
	VpcId     string                 `protobuf:"bytes,5,opt,name=vpc_id,json=vpcId,proto3" json:"vpc_id,omitempty"`
	AvailZone string                 `protobuf:"bytes,6,opt,name=avail_zone,json=availZone,proto3" json:"avail_zone,omitempty"`
	PrimGw    string                 `protobuf:"bytes,7,opt,name=prim_gw,json=primGw,proto3" json:"prim_gw,omitempty"`
	SecGw     string                 `protobuf:"bytes,8,opt,name=sec_gw,json=secGw,proto3" json:"sec_gw,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{43}
}

func (x *Subnet) GetSubnetId() string {
	if x != nil {
		return x.SubnetId
	}
	return ""
}

func (x *Subnet) GetCpT() CloudProviderType {
	if x != nil {
		return x.CpT
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *Subnet) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Subnet) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *Subnet) GetVpcId() string {
	if x != nil {
		return x.VpcId
	}
	return ""
}

func (x *Subnet) GetAvailZone() string {
	if x != nil {
		return x.AvailZone
	}
	return ""
}

func (x *Subnet) GetPrimGw() string {
	if x != nil {
		return x.PrimGw
	}
	return ""
}

func (x *Subnet) GetSecGw() string {
	if x != nil {
		return x.SecGw
	}
	return ""
}

func (x *Subnet) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type AddSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *AddSubnetRequest) Reset() {
	*x = AddSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetRequest) ProtoMessage() {}

func (x *AddSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetRequest.ProtoReflect.Descriptor instead.
func (*AddSubnetRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{44}
}

func (x *AddSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type AddSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet    *Subnet                `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *AddSubnetResponse) Reset() {
	*x = AddSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddSubnetResponse) ProtoMessage() {}

func (x *AddSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddSubnetResponse.ProtoReflect.Descriptor instead.
func (*AddSubnetResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{45}
}

func (x *AddSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *AddSubnetResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpdateSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *UpdateSubnetRequest) Reset() {
	*x = UpdateSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetRequest) ProtoMessage() {}

func (x *UpdateSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubnetRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{46}
}

func (x *UpdateSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type UpdateSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet                `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *UpdateSubnetResponse) Reset() {
	*x = UpdateSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubnetResponse) ProtoMessage() {}

func (x *UpdateSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubnetResponse.ProtoReflect.Descriptor instead.
func (*UpdateSubnetResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *UpdateSubnetResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type DeleteSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
}

func (x *DeleteSubnetRequest) Reset() {
	*x = DeleteSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetRequest) ProtoMessage() {}

func (x *DeleteSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetRequest.ProtoReflect.Descriptor instead.
func (*DeleteSubnetRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{48}
}

func (x *DeleteSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

type DeleteSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteSubnetResponse) Reset() {
	*x = DeleteSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteSubnetResponse) ProtoMessage() {}

func (x *DeleteSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteSubnetResponse.ProtoReflect.Descriptor instead.
func (*DeleteSubnetResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{49}
}

type GetSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet                `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetSubnetRequest) Reset() {
	*x = GetSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetRequest) ProtoMessage() {}

func (x *GetSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetRequest.ProtoReflect.Descriptor instead.
func (*GetSubnetRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{50}
}

func (x *GetSubnetRequest) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnetRequest) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type GetSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet                `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetSubnetResponse) Reset() {
	*x = GetSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubnetResponse) ProtoMessage() {}

func (x *GetSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubnetResponse.ProtoReflect.Descriptor instead.
func (*GetSubnetResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{51}
}

func (x *GetSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *GetSubnetResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type ListSubnetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    []*Subnet              `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	AtTime    *time.RequestAtTime    `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Watch     bool                   `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListSubnetRequest) Reset() {
	*x = ListSubnetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetRequest) ProtoMessage() {}

func (x *ListSubnetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetRequest.ProtoReflect.Descriptor instead.
func (*ListSubnetRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{52}
}

func (x *ListSubnetRequest) GetFilter() []*Subnet {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListSubnetRequest) GetAtTime() *time.RequestAtTime {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *ListSubnetRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListSubnetRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListSubnetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subnet *Subnet                `protobuf:"bytes,1,opt,name=subnet,proto3" json:"subnet,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *ListSubnetResponse) Reset() {
	*x = ListSubnetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSubnetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSubnetResponse) ProtoMessage() {}

func (x *ListSubnetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSubnetResponse.ProtoReflect.Descriptor instead.
func (*ListSubnetResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{53}
}

func (x *ListSubnetResponse) GetSubnet() *Subnet {
	if x != nil {
		return x.Subnet
	}
	return nil
}

func (x *ListSubnetResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

// Resource Paths
type PathCharacteristics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LatencyMs uint64                 `protobuf:"varint,1,opt,name=latency_ms,json=latencyMs,proto3" json:"latency_ms,omitempty"`
	JitterMs  uint64                 `protobuf:"varint,2,opt,name=jitter_ms,json=jitterMs,proto3" json:"jitter_ms,omitempty"`
	PktLossPc uint64                 `protobuf:"varint,3,opt,name=pkt_loss_pc,json=pktLossPc,proto3" json:"pkt_loss_pc,omitempty"`
	BwMbps    uint64                 `protobuf:"varint,4,opt,name=bw_mbps,json=bwMbps,proto3" json:"bw_mbps,omitempty"`
	Up        bool                   `protobuf:"varint,5,opt,name=up,proto3" json:"up,omitempty"`
	Uptime    uint64                 `protobuf:"varint,6,opt,name=uptime,proto3" json:"uptime,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *PathCharacteristics) Reset() {
	*x = PathCharacteristics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathCharacteristics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathCharacteristics) ProtoMessage() {}

func (x *PathCharacteristics) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathCharacteristics.ProtoReflect.Descriptor instead.
func (*PathCharacteristics) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{54}
}

func (x *PathCharacteristics) GetLatencyMs() uint64 {
	if x != nil {
		return x.LatencyMs
	}
	return 0
}

func (x *PathCharacteristics) GetJitterMs() uint64 {
	if x != nil {
		return x.JitterMs
	}
	return 0
}

func (x *PathCharacteristics) GetPktLossPc() uint64 {
	if x != nil {
		return x.PktLossPc
	}
	return 0
}

func (x *PathCharacteristics) GetBwMbps() uint64 {
	if x != nil {
		return x.BwMbps
	}
	return 0
}

func (x *PathCharacteristics) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

func (x *PathCharacteristics) GetUptime() uint64 {
	if x != nil {
		return x.Uptime
	}
	return 0
}

func (x *PathCharacteristics) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type Path struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SrcVpcCloudId    string                 `protobuf:"bytes,1,opt,name=src_vpc_cloud_id,json=srcVpcCloudId,proto3" json:"src_vpc_cloud_id,omitempty"`
	SrcVpcName       string                 `protobuf:"bytes,2,opt,name=src_vpc_name,json=srcVpcName,proto3" json:"src_vpc_name,omitempty"`
	SrcVpcUuid       string                 `protobuf:"bytes,3,opt,name=src_vpc_uuid,json=srcVpcUuid,proto3" json:"src_vpc_uuid,omitempty"`
	LocalRtrCloudId  string                 `protobuf:"bytes,4,opt,name=local_rtr_cloud_id,json=localRtrCloudId,proto3" json:"local_rtr_cloud_id,omitempty"`
	LocalRtrName     string                 `protobuf:"bytes,5,opt,name=local_rtr_name,json=localRtrName,proto3" json:"local_rtr_name,omitempty"`
	LocalRtrUuid     string                 `protobuf:"bytes,6,opt,name=local_rtr_uuid,json=localRtrUuid,proto3" json:"local_rtr_uuid,omitempty"`
	LocalIntfIpAddr  string                 `protobuf:"bytes,7,opt,name=local_intf_ip_addr,json=localIntfIpAddr,proto3" json:"local_intf_ip_addr,omitempty"`
	SrcRegion        string                 `protobuf:"bytes,8,opt,name=src_region,json=srcRegion,proto3" json:"src_region,omitempty"`
	SrcCpT           CloudProviderType      `protobuf:"varint,9,opt,name=src_cp_t,json=srcCpT,proto3,enum=clouddeploy.CloudProviderType" json:"src_cp_t,omitempty"`
	DstVpcCloudId    string                 `protobuf:"bytes,10,opt,name=dst_vpc_cloud_id,json=dstVpcCloudId,proto3" json:"dst_vpc_cloud_id,omitempty"`
	DstVpcName       string                 `protobuf:"bytes,11,opt,name=dst_vpc_name,json=dstVpcName,proto3" json:"dst_vpc_name,omitempty"`
	DstVpcUuid       string                 `protobuf:"bytes,12,opt,name=dst_vpc_uuid,json=dstVpcUuid,proto3" json:"dst_vpc_uuid,omitempty"`
	RemoteRtrCloudId string                 `protobuf:"bytes,13,opt,name=remote_rtr_cloud_id,json=remoteRtrCloudId,proto3" json:"remote_rtr_cloud_id,omitempty"`
	RemoteRtrName    string                 `protobuf:"bytes,14,opt,name=remote_rtr_name,json=remoteRtrName,proto3" json:"remote_rtr_name,omitempty"`
	RemoteRtrUuid    string                 `protobuf:"bytes,15,opt,name=remote_rtr_uuid,json=remoteRtrUuid,proto3" json:"remote_rtr_uuid,omitempty"`
	RemoteIntfIpAddr string                 `protobuf:"bytes,16,opt,name=remote_intf_ip_addr,json=remoteIntfIpAddr,proto3" json:"remote_intf_ip_addr,omitempty"`
	DstRegion        string                 `protobuf:"bytes,17,opt,name=dst_region,json=dstRegion,proto3" json:"dst_region,omitempty"`
	DstCpT           CloudProviderType      `protobuf:"varint,18,opt,name=dst_cp_t,json=dstCpT,proto3,enum=clouddeploy.CloudProviderType" json:"dst_cp_t,omitempty"`
	TopologyName     string                 `protobuf:"bytes,19,opt,name=topology_name,json=topologyName,proto3" json:"topology_name,omitempty"`
	UlT              UnderlayConnectionType `protobuf:"varint,20,opt,name=ul_t,json=ulT,proto3,enum=clouddeploy.UnderlayConnectionType" json:"ul_t,omitempty"`
	PathChar         *PathCharacteristics   `protobuf:"bytes,21,opt,name=path_char,json=pathChar,proto3" json:"path_char,omitempty"`
	FieldMask        *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *Path) Reset() {
	*x = Path{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Path) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Path) ProtoMessage() {}

func (x *Path) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Path.ProtoReflect.Descriptor instead.
func (*Path) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{55}
}

func (x *Path) GetSrcVpcCloudId() string {
	if x != nil {
		return x.SrcVpcCloudId
	}
	return ""
}

func (x *Path) GetSrcVpcName() string {
	if x != nil {
		return x.SrcVpcName
	}
	return ""
}

func (x *Path) GetSrcVpcUuid() string {
	if x != nil {
		return x.SrcVpcUuid
	}
	return ""
}

func (x *Path) GetLocalRtrCloudId() string {
	if x != nil {
		return x.LocalRtrCloudId
	}
	return ""
}

func (x *Path) GetLocalRtrName() string {
	if x != nil {
		return x.LocalRtrName
	}
	return ""
}

func (x *Path) GetLocalRtrUuid() string {
	if x != nil {
		return x.LocalRtrUuid
	}
	return ""
}

func (x *Path) GetLocalIntfIpAddr() string {
	if x != nil {
		return x.LocalIntfIpAddr
	}
	return ""
}

func (x *Path) GetSrcRegion() string {
	if x != nil {
		return x.SrcRegion
	}
	return ""
}

func (x *Path) GetSrcCpT() CloudProviderType {
	if x != nil {
		return x.SrcCpT
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *Path) GetDstVpcCloudId() string {
	if x != nil {
		return x.DstVpcCloudId
	}
	return ""
}

func (x *Path) GetDstVpcName() string {
	if x != nil {
		return x.DstVpcName
	}
	return ""
}

func (x *Path) GetDstVpcUuid() string {
	if x != nil {
		return x.DstVpcUuid
	}
	return ""
}

func (x *Path) GetRemoteRtrCloudId() string {
	if x != nil {
		return x.RemoteRtrCloudId
	}
	return ""
}

func (x *Path) GetRemoteRtrName() string {
	if x != nil {
		return x.RemoteRtrName
	}
	return ""
}

func (x *Path) GetRemoteRtrUuid() string {
	if x != nil {
		return x.RemoteRtrUuid
	}
	return ""
}

func (x *Path) GetRemoteIntfIpAddr() string {
	if x != nil {
		return x.RemoteIntfIpAddr
	}
	return ""
}

func (x *Path) GetDstRegion() string {
	if x != nil {
		return x.DstRegion
	}
	return ""
}

func (x *Path) GetDstCpT() CloudProviderType {
	if x != nil {
		return x.DstCpT
	}
	return CloudProviderType_CP_UNSPECIFIED
}

func (x *Path) GetTopologyName() string {
	if x != nil {
		return x.TopologyName
	}
	return ""
}

func (x *Path) GetUlT() UnderlayConnectionType {
	if x != nil {
		return x.UlT
	}
	return UnderlayConnectionType_UL_NA
}

func (x *Path) GetPathChar() *PathCharacteristics {
	if x != nil {
		return x.PathChar
	}
	return nil
}

func (x *Path) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type GetPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   *Path                  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetPathRequest) Reset() {
	*x = GetPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathRequest) ProtoMessage() {}

func (x *GetPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathRequest.ProtoReflect.Descriptor instead.
func (*GetPathRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{56}
}

func (x *GetPathRequest) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetPathRequest) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type GetPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   *Path                  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *GetPathResponse) Reset() {
	*x = GetPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPathResponse) ProtoMessage() {}

func (x *GetPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPathResponse.ProtoReflect.Descriptor instead.
func (*GetPathResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{57}
}

func (x *GetPathResponse) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *GetPathResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

type ListPathRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter    []*Path                `protobuf:"bytes,1,rep,name=filter,proto3" json:"filter,omitempty"`
	AtTime    *time.RequestAtTime    `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
	Watch     bool                   `protobuf:"varint,3,opt,name=watch,proto3" json:"watch,omitempty"`
	FieldMask *fieldmaskpb.FieldMask `protobuf:"bytes,100,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *ListPathRequest) Reset() {
	*x = ListPathRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPathRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPathRequest) ProtoMessage() {}

func (x *ListPathRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPathRequest.ProtoReflect.Descriptor instead.
func (*ListPathRequest) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{58}
}

func (x *ListPathRequest) GetFilter() []*Path {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *ListPathRequest) GetAtTime() *time.RequestAtTime {
	if x != nil {
		return x.AtTime
	}
	return nil
}

func (x *ListPathRequest) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *ListPathRequest) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type ListPathResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path   *Path                  `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	AtTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=at_time,json=atTime,proto3" json:"at_time,omitempty"`
}

func (x *ListPathResponse) Reset() {
	*x = ListPathResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPathResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPathResponse) ProtoMessage() {}

func (x *ListPathResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPathResponse.ProtoReflect.Descriptor instead.
func (*ListPathResponse) Descriptor() ([]byte, []int) {
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{59}
}

func (x *ListPathResponse) GetPath() *Path {
	if x != nil {
		return x.Path
	}
	return nil
}

func (x *ListPathResponse) GetAtTime() *timestamppb.Timestamp {
	if x != nil {
		return x.AtTime
	}
	return nil
}

var File_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto protoreflect.FileDescriptor

var file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDesc = []byte{
	0x0a, 0x45, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61, 0x65, 0x72, 0x69, 0x73, 0x2f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07,
	0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70,
	0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xc7, 0x02,
	0x0a, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x74, 0x66, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x26, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64,
	0x64, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xe3, 0x03, 0x0a, 0x06, 0x43, 0x56, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0e, 0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70,
	0x5f, 0x63, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x43, 0x66, 0x67, 0x12, 0x1a, 0x0a, 0x09, 0x68, 0x61, 0x5f, 0x72,
	0x74, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x61, 0x52,
	0x74, 0x72, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x14, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x70, 0x63,
	0x5f, 0x72, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x10, 0x70, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x52, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x0f, 0x68, 0x61, 0x5f, 0x72, 0x74, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0c, 0x68, 0x61, 0x52, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x76, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x73, 0x63, 0x12, 0x3f, 0x0a,
	0x1c, 0x63, 0x76, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42,
	0x0a, 0x0d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61,
	0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xcc, 0x01,
	0x0a, 0x11, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5a, 0x6f,
	0x6e, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x53, 0x65,
	0x74, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x90, 0x01, 0x0a,
	0x0f, 0x41, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61,
	0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22,
	0xd2, 0x07, 0x0a, 0x06, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15,
	0x0a, 0x06, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x70, 0x63, 0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x63, 0x70, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x68, 0x61, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6e,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12, 0x31,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x12, 0x36, 0x0a, 0x17, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x72, 0x6f,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x45, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x74, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x52, 0x0a, 0x72, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x12, 0x42, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x77, 0x73, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x52, 0x74, 0x72, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x42, 0x0a, 0x0d, 0x61, 0x7a, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x61, 0x7a, 0x52,
	0x74, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x0a, 0x04, 0x69, 0x6e, 0x74, 0x66,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x66, 0x61, 0x63, 0x65, 0x52, 0x04, 0x69, 0x6e, 0x74, 0x66, 0x12, 0x40, 0x0a, 0x0a, 0x64,
	0x65, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x09, 0x64, 0x65, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2c, 0x0a,
	0x07, 0x63, 0x76, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x56, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x63, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2a, 0x0a, 0x11, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x62, 0x67, 0x70, 0x5f, 0x61,
	0x73, 0x6e, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x62, 0x67, 0x70, 0x41, 0x73, 0x6e,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x3f, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x7b, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06,
	0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b,
	0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x42, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x74, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbf, 0x01, 0x0a, 0x11, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07,
	0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x76, 0x0a, 0x12, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x33,
	0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xeb, 0x02, 0x0a, 0x07, 0x57, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f,
	0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x65,
	0x64, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0d, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69, 0x67, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x64, 0x67, 0x65, 0x45, 0x64, 0x67, 0x65, 0x49,
	0x67, 0x77, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x14, 0x65, 0x64, 0x67, 0x65, 0x44, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x64, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x76, 0x70, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x76, 0x70, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0xf3, 0x02, 0x0a, 0x08, 0x43, 0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x63,
	0x70, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x70,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x66, 0x61, 0x62, 0x72, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66,
	0x61, 0x62, 0x72, 0x69, 0x63, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x64,
	0x67, 0x65, 0x5f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x6c, 0x65, 0x61, 0x66, 0x45, 0x64, 0x67, 0x65, 0x50, 0x65, 0x65, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x64, 0x67, 0x65, 0x5f, 0x69,
	0x67, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x66, 0x45, 0x64,
	0x67, 0x65, 0x49, 0x67, 0x77, 0x12, 0x27, 0x0a, 0x0f, 0x6c, 0x65, 0x61, 0x66, 0x5f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e,
	0x6c, 0x65, 0x61, 0x66, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x12, 0x63, 0x76, 0x70, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x76, 0x70, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xff, 0x04, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a, 0x0a, 0x09,
	0x74, 0x6f, 0x70, 0x6f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x74, 0x6f, 0x70, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x62, 0x67, 0x70, 0x5f,
	0x61, 0x73, 0x6e, 0x5f, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x62,
	0x67, 0x70, 0x41, 0x73, 0x6e, 0x4c, 0x6f, 0x77, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x67, 0x70, 0x5f,
	0x61, 0x73, 0x6e, 0x5f, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a,
	0x62, 0x67, 0x70, 0x41, 0x73, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x76, 0x74,
	0x65, 0x70, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x76, 0x74, 0x65, 0x70, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x2c, 0x0a, 0x12,
	0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x74, 0x72, 0x5f, 0x69, 0x70, 0x5f, 0x63, 0x69,
	0x64, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x74, 0x74, 0x72, 0x49, 0x70, 0x43, 0x69, 0x64, 0x72, 0x12, 0x33, 0x0a, 0x16, 0x64, 0x70,
	0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x64, 0x70, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x6e, 0x65, 0x43, 0x69, 0x64, 0x72, 0x12,
	0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x64, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x76, 0x61, 0x61,
	0x73, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x76, 0x61, 0x61, 0x73, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x76, 0x61, 0x61, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x76, 0x61, 0x61, 0x73, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x2f,
	0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x57,
	0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x32, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x58, 0x0a, 0x16, 0x41, 0x64, 0x64,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5b, 0x0a, 0x19, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f,
	0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5b, 0x0a, 0x19, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f,
	0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x8e, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xdc, 0x01, 0x0a, 0x0d, 0x41, 0x7a, 0x75, 0x72,
	0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x73, 0x67,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x6e, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f,
	0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x53, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63,
	0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xc1, 0x01, 0x0a, 0x0a, 0x41, 0x77, 0x73, 0x56, 0x70,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74,
	0x79, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x73,
	0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72,
	0x12, 0x15, 0x0a, 0x06, 0x69, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x67, 0x77, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x65, 0x65, 0x72, 0x69,
	0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x49, 0x64, 0x12,
	0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xc1, 0x02, 0x0a, 0x0b, 0x50,
	0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4d, 0x0a, 0x0d, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x69, 0x64, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x50, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x50, 0x65, 0x65, 0x72,
	0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70, 0x65,
	0x65, 0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65,
	0x72, 0x5f, 0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x52, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x70,
	0x65, 0x65, 0x72, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x56, 0x6e, 0x65, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x56, 0x6e, 0x65,
	0x74, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x3e,
	0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93,
	0x08, 0x0a, 0x03, 0x56, 0x70, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70,
	0x63, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49,
	0x64, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x6c,
	0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x63, 0x70, 0x54, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x32, 0x0a, 0x09,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x52, 0x6f,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x73, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x77, 0x61, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x0c, 0x61, 0x7a, 0x5f, 0x76, 0x6e, 0x65, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x41, 0x7a, 0x75, 0x72, 0x65, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0a, 0x61, 0x7a, 0x56, 0x6e, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x39, 0x0a, 0x0c, 0x61,
	0x77, 0x73, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x41, 0x77, 0x73, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x61, 0x77, 0x73, 0x56,
	0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x56, 0x70, 0x63, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x70, 0x63, 0x5f,
	0x63, 0x69, 0x64, 0x72, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x2e, 0x50, 0x65, 0x65,
	0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x70,
	0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x43, 0x69, 0x64, 0x72, 0x12, 0x3b, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70,
	0x63, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x70, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x23, 0x0a, 0x0d, 0x74, 0x67, 0x77, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x74, 0x67, 0x77, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x64, 0x42, 0x79, 0x12,
	0x1f, 0x0a, 0x0b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x37, 0x0a, 0x09, 0x54,
	0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x50, 0x65, 0x65, 0x72, 0x56, 0x70, 0x63, 0x43,
	0x69, 0x64, 0x72, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0x6f, 0x0a, 0x0e, 0x41, 0x64, 0x64,
	0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x76,
	0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x36, 0x0a, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76,
	0x70, 0x63, 0x22, 0x6c, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x61,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x36, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x22, 0x13, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x68, 0x0a,
	0x0d, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22,
	0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76,
	0x70, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x69, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x70,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x70, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x33, 0x0a,
	0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x22, 0xb9, 0x01, 0x0a, 0x0e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6a,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x03, 0x76, 0x70, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x56, 0x70, 0x63,
	0x52, 0x03, 0x76, 0x70, 0x63, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x9d, 0x02, 0x0a, 0x06, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x70, 0x5f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43,
	0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x03, 0x63, 0x70, 0x54, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x64, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x15, 0x0a, 0x06, 0x76, 0x70, 0x63,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x70, 0x63, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x5f, 0x67, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x72, 0x69, 0x6d, 0x47, 0x77, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x5f,
	0x67, 0x77, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x65, 0x63, 0x47, 0x77, 0x12,
	0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x3f, 0x0a, 0x10, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x7b, 0x0a, 0x11, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x39, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x42, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x78, 0x0a, 0x14,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x74, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x75, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e,
	0x65, 0x74, 0x52, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xbf, 0x01, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x76, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x73, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x06, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x13, 0x50, 0x61,
	0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4d, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x6a, 0x69, 0x74, 0x74, 0x65, 0x72, 0x4d, 0x73, 0x12, 0x1e, 0x0a,
	0x0b, 0x70, 0x6b, 0x74, 0x5f, 0x6c, 0x6f, 0x73, 0x73, 0x5f, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x70, 0x6b, 0x74, 0x4c, 0x6f, 0x73, 0x73, 0x50, 0x63, 0x12, 0x17, 0x0a,
	0x07, 0x62, 0x77, 0x5f, 0x6d, 0x62, 0x70, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x62, 0x77, 0x4d, 0x62, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0xbd, 0x07, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x27, 0x0a, 0x10, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x72,
	0x63, 0x56, 0x70, 0x63, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x73,
	0x72, 0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0c, 0x73, 0x72, 0x63, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x72, 0x63, 0x56, 0x70, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x52, 0x74, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x74, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x74, 0x72, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x52, 0x74, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x12, 0x6c, 0x6f, 0x63, 0x61,
	0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x74, 0x66, 0x49,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x72, 0x63, 0x52, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x73, 0x72, 0x63, 0x5f, 0x63, 0x70, 0x5f, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x73, 0x72, 0x63, 0x43, 0x70, 0x54, 0x12, 0x27,
	0x0a, 0x10, 0x64, 0x73, 0x74, 0x5f, 0x76, 0x70, 0x63, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x73, 0x74, 0x56, 0x70, 0x63,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74, 0x5f, 0x76,
	0x70, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64,
	0x73, 0x74, 0x56, 0x70, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x64, 0x73, 0x74,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x73, 0x74, 0x56, 0x70, 0x63, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x52, 0x74, 0x72, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x74, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x52, 0x74, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x72, 0x74, 0x72,
	0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x74, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x66, 0x5f, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x49,
	0x6e, 0x74, 0x66, 0x49, 0x70, 0x41, 0x64, 0x64, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x64, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64,
	0x73, 0x74, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x08, 0x64, 0x73, 0x74, 0x5f,
	0x63, 0x70, 0x5f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x64, 0x73, 0x74, 0x43,
	0x70, 0x54, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x6f, 0x70, 0x6f, 0x6c,
	0x6f, 0x67, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x75, 0x6c, 0x5f, 0x74, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x75, 0x6c, 0x54, 0x12,
	0x3d, 0x0a, 0x09, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x50, 0x61, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x52, 0x08, 0x70, 0x61, 0x74, 0x68, 0x43, 0x68, 0x61, 0x72, 0x12, 0x39,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6c, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x06, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6d, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x50, 0x61,
	0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06,
	0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbb, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x06, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x06, 0x61, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x77, 0x61, 0x74, 0x63, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4d, 0x61, 0x73, 0x6b, 0x22, 0x6e, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x50, 0x61, 0x74, 0x68, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x33, 0x0a, 0x07, 0x61, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x61, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x2a, 0x4d, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x50, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x50, 0x5f, 0x41, 0x57, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x50, 0x5f,
	0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x50, 0x5f, 0x47, 0x43,
	0x50, 0x10, 0x03, 0x2a, 0x41, 0x0a, 0x0c, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x4f, 0x50,
	0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x57, 0x41, 0x4e, 0x10, 0x02, 0x2a, 0x4b, 0x0a, 0x16, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x09, 0x0a, 0x05, 0x55, 0x4c, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55,
	0x4c, 0x5f, 0x49, 0x47, 0x57, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4c, 0x5f, 0x50, 0x45,
	0x45, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x4c, 0x5f, 0x54, 0x47,
	0x57, 0x10, 0x03, 0x2a, 0x4a, 0x0a, 0x15, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x4c, 0x5f, 0x4e, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x4c, 0x5f, 0x44, 0x50,
	0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4c, 0x5f, 0x56, 0x58, 0x4c, 0x41, 0x4e, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x4c, 0x5f, 0x49, 0x50, 0x53, 0x45, 0x43, 0x10, 0x03, 0x2a,
	0x4e, 0x0a, 0x08, 0x52, 0x6f, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x52,
	0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x45, 0x44, 0x47, 0x45, 0x10, 0x01,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x53, 0x50, 0x49, 0x4e, 0x45, 0x10, 0x02,
	0x12, 0x0d, 0x0a, 0x09, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4c, 0x45, 0x41, 0x46, 0x10, 0x03, 0x2a,
	0x7a, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12,
	0x16, 0x0a, 0x12, 0x44, 0x45, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x45, 0x50, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x10, 0x03, 0x2a, 0xee, 0x01, 0x0a, 0x0c,
	0x43, 0x56, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x56, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x52, 0x54, 0x52, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x54,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x54, 0x52,
	0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x57, 0x49, 0x50, 0x10, 0x04, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x52,
	0x45, 0x41, 0x44, 0x59, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x52, 0x54, 0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x06,
	0x12, 0x1a, 0x0a, 0x16, 0x43, 0x56, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x54,
	0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x07, 0x2a, 0x89, 0x01, 0x0a,
	0x10, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x1d, 0x0a, 0x19, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x2a, 0x76, 0x0a, 0x14, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49,
	0x4e, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x46, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x55, 0x42, 0x4c, 0x49, 0x43, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x54, 0x46,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x10, 0x03,
	0x2a, 0x6d, 0x0a, 0x10, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x46,
	0x4f, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x50, 0x4f,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x57, 0x41, 0x4e, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x4f, 0x50, 0x4f, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x10, 0x03, 0x2a,
	0x47, 0x0a, 0x0a, 0x46, 0x61, 0x62, 0x72, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a,
	0x17, 0x46, 0x41, 0x42, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x55,
	0x4c, 0x4c, 0x5f, 0x4d, 0x45, 0x53, 0x48, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x55, 0x42,
	0x5f, 0x53, 0x50, 0x4f, 0x4b, 0x45, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0d, 0x56, 0x70, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x50, 0x43,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x01, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x50, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x02, 0x32, 0x9c, 0x03,
	0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x41, 0x64, 0x64,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f,
	0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xfc, 0x03, 0x0a,
	0x0d, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x69, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x5c,
	0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x65, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70,
	0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f,
	0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x27, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c, 0x0a, 0x0f, 0x47, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x61, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x6f, 0x6c, 0x6f, 0x67, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xec, 0x02, 0x0a, 0x04,
	0x56, 0x70, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x12, 0x1a,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x70, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x70, 0x63, 0x12, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x41, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x56, 0x70, 0x63, 0x12, 0x1a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x70, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64, 0x64, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12,
	0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a,
	0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56, 0x70, 0x63, 0x12, 0x1d, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x56, 0x70, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x56,
	0x70, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x9c, 0x03, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x6e, 0x65, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x2e, 0x47, 0x65, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x4a, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74,
	0x12, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41,
	0x64, 0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x41, 0x64,
	0x64, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x0c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x12,
	0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x62, 0x6e, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x98, 0x01, 0x0a, 0x05, 0x50, 0x61,
	0x74, 0x68, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x08, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x74, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x30, 0x01, 0x42, 0x35, 0x5a, 0x33, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x61,
	0x65, 0x72, 0x69, 0x73, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescOnce sync.Once
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescData = file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDesc
)

func file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescGZIP() []byte {
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescOnce.Do(func() {
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescData)
	})
	return file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDescData
}

var file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes = make([]protoimpl.MessageInfo, 64)
var file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_goTypes = []interface{}{
	(CloudProviderType)(0),             // 0: clouddeploy.CloudProviderType
	(TopologyType)(0),                  // 1: clouddeploy.TopologyType
	(UnderlayConnectionType)(0),        // 2: clouddeploy.UnderlayConnectionType
	(OverlayConnectionType)(0),         // 3: clouddeploy.OverlayConnectionType
	(RoleType)(0),                      // 4: clouddeploy.RoleType
	(DeploymentStatusCode)(0),          // 5: clouddeploy.DeploymentStatusCode
	(CVStatusCode)(0),                  // 6: clouddeploy.CVStatusCode
	(DeviceStatusCode)(0),              // 7: clouddeploy.DeviceStatusCode
	(NetworkInterfaceType)(0),          // 8: clouddeploy.NetworkInterfaceType
	(TopologyInfoType)(0),              // 9: clouddeploy.TopologyInfoType
	(FabricType)(0),                    // 10: clouddeploy.FabricType
	(VpcStatusCode)(0),                 // 11: clouddeploy.VpcStatusCode
	(*RouteTableIds)(nil),              // 12: clouddeploy.RouteTableIds
	(*NetworkInterface)(nil),           // 13: clouddeploy.NetworkInterface
	(*CVInfo)(nil),                     // 14: clouddeploy.CVInfo
	(*AzureRouterDetail)(nil),          // 15: clouddeploy.AzureRouterDetail
	(*AwsRouterDetail)(nil),            // 16: clouddeploy.AwsRouterDetail
	(*Router)(nil),                     // 17: clouddeploy.Router
	(*AddRouterRequest)(nil),           // 18: clouddeploy.AddRouterRequest
	(*AddRouterResponse)(nil),          // 19: clouddeploy.AddRouterResponse
	(*UpdateRouterRequest)(nil),        // 20: clouddeploy.UpdateRouterRequest
	(*UpdateRouterResponse)(nil),       // 21: clouddeploy.UpdateRouterResponse
	(*DeleteRouterRequest)(nil),        // 22: clouddeploy.DeleteRouterRequest
	(*DeleteRouterResponse)(nil),       // 23: clouddeploy.DeleteRouterResponse
	(*GetRouterRequest)(nil),           // 24: clouddeploy.GetRouterRequest
	(*GetRouterResponse)(nil),          // 25: clouddeploy.GetRouterResponse
	(*ListRouterRequest)(nil),          // 26: clouddeploy.ListRouterRequest
	(*ListRouterResponse)(nil),         // 27: clouddeploy.ListRouterResponse
	(*WanInfo)(nil),                    // 28: clouddeploy.WanInfo
	(*ClosInfo)(nil),                   // 29: clouddeploy.ClosInfo
	(*TopologyInfo)(nil),               // 30: clouddeploy.TopologyInfo
	(*AddTopologyInfoRequest)(nil),     // 31: clouddeploy.AddTopologyInfoRequest
	(*AddTopologyInfoResponse)(nil),    // 32: clouddeploy.AddTopologyInfoResponse
	(*UpdateTopologyInfoRequest)(nil),  // 33: clouddeploy.UpdateTopologyInfoRequest
	(*UpdateTopologyInfoResponse)(nil), // 34: clouddeploy.UpdateTopologyInfoResponse
	(*DeleteTopologyInfoRequest)(nil),  // 35: clouddeploy.DeleteTopologyInfoRequest
	(*DeleteTopologyInfoResponse)(nil), // 36: clouddeploy.DeleteTopologyInfoResponse
	(*GetTopologyInfoRequest)(nil),     // 37: clouddeploy.GetTopologyInfoRequest
	(*GetTopologyInfoResponse)(nil),    // 38: clouddeploy.GetTopologyInfoResponse
	(*ListTopologyInfoRequest)(nil),    // 39: clouddeploy.ListTopologyInfoRequest
	(*ListTopologyInfoResponse)(nil),   // 40: clouddeploy.ListTopologyInfoResponse
	(*AzureVnetInfo)(nil),              // 41: clouddeploy.AzureVnetInfo
	(*AwsVpcInfo)(nil),                 // 42: clouddeploy.AwsVpcInfo
	(*PeerVpcInfo)(nil),                // 43: clouddeploy.PeerVpcInfo
	(*Vpc)(nil),                        // 44: clouddeploy.Vpc
	(*AddVpcRequest)(nil),              // 45: clouddeploy.AddVpcRequest
	(*AddVpcResponse)(nil),             // 46: clouddeploy.AddVpcResponse
	(*UpdateVpcRequest)(nil),           // 47: clouddeploy.UpdateVpcRequest
	(*UpdateVpcResponse)(nil),          // 48: clouddeploy.UpdateVpcResponse
	(*DeleteVpcRequest)(nil),           // 49: clouddeploy.DeleteVpcRequest
	(*DeleteVpcResponse)(nil),          // 50: clouddeploy.DeleteVpcResponse
	(*GetVpcRequest)(nil),              // 51: clouddeploy.GetVpcRequest
	(*GetVpcResponse)(nil),             // 52: clouddeploy.GetVpcResponse
	(*ListVpcRequest)(nil),             // 53: clouddeploy.ListVpcRequest
	(*ListVpcResponse)(nil),            // 54: clouddeploy.ListVpcResponse
	(*Subnet)(nil),                     // 55: clouddeploy.Subnet
	(*AddSubnetRequest)(nil),           // 56: clouddeploy.AddSubnetRequest
	(*AddSubnetResponse)(nil),          // 57: clouddeploy.AddSubnetResponse
	(*UpdateSubnetRequest)(nil),        // 58: clouddeploy.UpdateSubnetRequest
	(*UpdateSubnetResponse)(nil),       // 59: clouddeploy.UpdateSubnetResponse
	(*DeleteSubnetRequest)(nil),        // 60: clouddeploy.DeleteSubnetRequest
	(*DeleteSubnetResponse)(nil),       // 61: clouddeploy.DeleteSubnetResponse
	(*GetSubnetRequest)(nil),           // 62: clouddeploy.GetSubnetRequest
	(*GetSubnetResponse)(nil),          // 63: clouddeploy.GetSubnetResponse
	(*ListSubnetRequest)(nil),          // 64: clouddeploy.ListSubnetRequest
	(*ListSubnetResponse)(nil),         // 65: clouddeploy.ListSubnetResponse
	(*PathCharacteristics)(nil),        // 66: clouddeploy.PathCharacteristics
	(*Path)(nil),                       // 67: clouddeploy.Path
	(*GetPathRequest)(nil),             // 68: clouddeploy.GetPathRequest
	(*GetPathResponse)(nil),            // 69: clouddeploy.GetPathResponse
	(*ListPathRequest)(nil),            // 70: clouddeploy.ListPathRequest
	(*ListPathResponse)(nil),           // 71: clouddeploy.ListPathResponse
	nil,                                // 72: clouddeploy.Router.TagsEntry
	nil,                                // 73: clouddeploy.PeerVpcInfo.PeerVpcCidrEntry
	nil,                                // 74: clouddeploy.Vpc.TagsEntry
	nil,                                // 75: clouddeploy.Vpc.PeerVpcCidrEntry
	(*fieldmaskpb.FieldMask)(nil),      // 76: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),      // 77: google.protobuf.Timestamp
	(*time.RequestAtTime)(nil),         // 78: time.RequestAtTime
}
var file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_depIdxs = []int32{
	76,  // 0: clouddeploy.RouteTableIds.field_mask:type_name -> google.protobuf.FieldMask
	8,   // 1: clouddeploy.NetworkInterface.intf_type:type_name -> clouddeploy.NetworkInterfaceType
	76,  // 2: clouddeploy.NetworkInterface.field_mask:type_name -> google.protobuf.FieldMask
	6,   // 3: clouddeploy.CVInfo.cv_status_code:type_name -> clouddeploy.CVStatusCode
	12,  // 4: clouddeploy.CVInfo.ha_rt_table_ids:type_name -> clouddeploy.RouteTableIds
	7,   // 5: clouddeploy.CVInfo.device_status:type_name -> clouddeploy.DeviceStatusCode
	76,  // 6: clouddeploy.CVInfo.field_mask:type_name -> google.protobuf.FieldMask
	76,  // 7: clouddeploy.AzureRouterDetail.field_mask:type_name -> google.protobuf.FieldMask
	76,  // 8: clouddeploy.AwsRouterDetail.field_mask:type_name -> google.protobuf.FieldMask
	0,   // 9: clouddeploy.Router.cp_t:type_name -> clouddeploy.CloudProviderType
	72,  // 10: clouddeploy.Router.tags:type_name -> clouddeploy.Router.TagsEntry
	12,  // 11: clouddeploy.Router.rt_table_ids:type_name -> clouddeploy.RouteTableIds
	16,  // 12: clouddeploy.Router.aws_rtr_detail:type_name -> clouddeploy.AwsRouterDetail
	15,  // 13: clouddeploy.Router.az_rtr_detail:type_name -> clouddeploy.AzureRouterDetail
	13,  // 14: clouddeploy.Router.intf:type_name -> clouddeploy.NetworkInterface
	5,   // 15: clouddeploy.Router.dep_status:type_name -> clouddeploy.DeploymentStatusCode
	14,  // 16: clouddeploy.Router.cv_info:type_name -> clouddeploy.CVInfo
	76,  // 17: clouddeploy.Router.field_mask:type_name -> google.protobuf.FieldMask
	17,  // 18: clouddeploy.AddRouterRequest.router:type_name -> clouddeploy.Router
	17,  // 19: clouddeploy.AddRouterResponse.router:type_name -> clouddeploy.Router
	77,  // 20: clouddeploy.AddRouterResponse.created_at:type_name -> google.protobuf.Timestamp
	17,  // 21: clouddeploy.UpdateRouterRequest.router:type_name -> clouddeploy.Router
	17,  // 22: clouddeploy.UpdateRouterResponse.router:type_name -> clouddeploy.Router
	77,  // 23: clouddeploy.UpdateRouterResponse.at_time:type_name -> google.protobuf.Timestamp
	17,  // 24: clouddeploy.DeleteRouterRequest.router:type_name -> clouddeploy.Router
	17,  // 25: clouddeploy.GetRouterRequest.router:type_name -> clouddeploy.Router
	77,  // 26: clouddeploy.GetRouterRequest.at_time:type_name -> google.protobuf.Timestamp
	17,  // 27: clouddeploy.GetRouterResponse.router:type_name -> clouddeploy.Router
	77,  // 28: clouddeploy.GetRouterResponse.at_time:type_name -> google.protobuf.Timestamp
	17,  // 29: clouddeploy.ListRouterRequest.filter:type_name -> clouddeploy.Router
	78,  // 30: clouddeploy.ListRouterRequest.at_time:type_name -> time.RequestAtTime
	76,  // 31: clouddeploy.ListRouterRequest.field_mask:type_name -> google.protobuf.FieldMask
	17,  // 32: clouddeploy.ListRouterResponse.router:type_name -> clouddeploy.Router
	77,  // 33: clouddeploy.ListRouterResponse.at_time:type_name -> google.protobuf.Timestamp
	0,   // 34: clouddeploy.WanInfo.cp_type:type_name -> clouddeploy.CloudProviderType
	76,  // 35: clouddeploy.WanInfo.field_mask:type_name -> google.protobuf.FieldMask
	0,   // 36: clouddeploy.ClosInfo.cp_type:type_name -> clouddeploy.CloudProviderType
	10,  // 37: clouddeploy.ClosInfo.fabric:type_name -> clouddeploy.FabricType
	76,  // 38: clouddeploy.ClosInfo.field_mask:type_name -> google.protobuf.FieldMask
	9,   // 39: clouddeploy.TopologyInfo.topo_type:type_name -> clouddeploy.TopologyInfoType
	28,  // 40: clouddeploy.TopologyInfo.wan_info:type_name -> clouddeploy.WanInfo
	29,  // 41: clouddeploy.TopologyInfo.clos_info:type_name -> clouddeploy.ClosInfo
	76,  // 42: clouddeploy.TopologyInfo.field_mask:type_name -> google.protobuf.FieldMask
	30,  // 43: clouddeploy.AddTopologyInfoRequest.topology_info:type_name -> clouddeploy.TopologyInfo
	30,  // 44: clouddeploy.AddTopologyInfoResponse.topology_info:type_name -> clouddeploy.TopologyInfo
	77,  // 45: clouddeploy.AddTopologyInfoResponse.created_at:type_name -> google.protobuf.Timestamp
	30,  // 46: clouddeploy.UpdateTopologyInfoRequest.topology_info:type_name -> clouddeploy.TopologyInfo
	30,  // 47: clouddeploy.UpdateTopologyInfoResponse.topology_info:type_name -> clouddeploy.TopologyInfo
	77,  // 48: clouddeploy.UpdateTopologyInfoResponse.at_time:type_name -> google.protobuf.Timestamp
	30,  // 49: clouddeploy.DeleteTopologyInfoRequest.topology_info:type_name -> clouddeploy.TopologyInfo
	30,  // 50: clouddeploy.GetTopologyInfoRequest.topology_info:type_name -> clouddeploy.TopologyInfo
	77,  // 51: clouddeploy.GetTopologyInfoRequest.at_time:type_name -> google.protobuf.Timestamp
	30,  // 52: clouddeploy.GetTopologyInfoResponse.topology_info:type_name -> clouddeploy.TopologyInfo
	77,  // 53: clouddeploy.GetTopologyInfoResponse.at_time:type_name -> google.protobuf.Timestamp
	30,  // 54: clouddeploy.ListTopologyInfoRequest.filter:type_name -> clouddeploy.TopologyInfo
	78,  // 55: clouddeploy.ListTopologyInfoRequest.at_time:type_name -> time.RequestAtTime
	76,  // 56: clouddeploy.ListTopologyInfoRequest.field_mask:type_name -> google.protobuf.FieldMask
	30,  // 57: clouddeploy.ListTopologyInfoResponse.topology_info:type_name -> clouddeploy.TopologyInfo
	77,  // 58: clouddeploy.ListTopologyInfoResponse.at_time:type_name -> google.protobuf.Timestamp
	76,  // 59: clouddeploy.AzureVnetInfo.field_mask:type_name -> google.protobuf.FieldMask
	76,  // 60: clouddeploy.AwsVpcInfo.field_mask:type_name -> google.protobuf.FieldMask
	73,  // 61: clouddeploy.PeerVpcInfo.peer_vpc_cidr:type_name -> clouddeploy.PeerVpcInfo.PeerVpcCidrEntry
	76,  // 62: clouddeploy.PeerVpcInfo.field_mask:type_name -> google.protobuf.FieldMask
	0,   // 63: clouddeploy.Vpc.cp_t:type_name -> clouddeploy.CloudProviderType
	4,   // 64: clouddeploy.Vpc.role_type:type_name -> clouddeploy.RoleType
	41,  // 65: clouddeploy.Vpc.az_vnet_info:type_name -> clouddeploy.AzureVnetInfo
	42,  // 66: clouddeploy.Vpc.aws_vpc_info:type_name -> clouddeploy.AwsVpcInfo
	74,  // 67: clouddeploy.Vpc.tags:type_name -> clouddeploy.Vpc.TagsEntry
	75,  // 68: clouddeploy.Vpc.peer_vpc_cidr:type_name -> clouddeploy.Vpc.PeerVpcCidrEntry
	11,  // 69: clouddeploy.Vpc.status_code:type_name -> clouddeploy.VpcStatusCode
	43,  // 70: clouddeploy.Vpc.peer_vpc_info:type_name -> clouddeploy.PeerVpcInfo
	76,  // 71: clouddeploy.Vpc.field_mask:type_name -> google.protobuf.FieldMask
	44,  // 72: clouddeploy.AddVpcRequest.vpc:type_name -> clouddeploy.Vpc
	44,  // 73: clouddeploy.AddVpcResponse.vpc:type_name -> clouddeploy.Vpc
	77,  // 74: clouddeploy.AddVpcResponse.created_at:type_name -> google.protobuf.Timestamp
	44,  // 75: clouddeploy.UpdateVpcRequest.vpc:type_name -> clouddeploy.Vpc
	44,  // 76: clouddeploy.UpdateVpcResponse.vpc:type_name -> clouddeploy.Vpc
	77,  // 77: clouddeploy.UpdateVpcResponse.at_time:type_name -> google.protobuf.Timestamp
	44,  // 78: clouddeploy.DeleteVpcRequest.vpc:type_name -> clouddeploy.Vpc
	44,  // 79: clouddeploy.GetVpcRequest.vpc:type_name -> clouddeploy.Vpc
	77,  // 80: clouddeploy.GetVpcRequest.at_time:type_name -> google.protobuf.Timestamp
	44,  // 81: clouddeploy.GetVpcResponse.vpc:type_name -> clouddeploy.Vpc
	77,  // 82: clouddeploy.GetVpcResponse.at_time:type_name -> google.protobuf.Timestamp
	44,  // 83: clouddeploy.ListVpcRequest.filter:type_name -> clouddeploy.Vpc
	78,  // 84: clouddeploy.ListVpcRequest.at_time:type_name -> time.RequestAtTime
	76,  // 85: clouddeploy.ListVpcRequest.field_mask:type_name -> google.protobuf.FieldMask
	44,  // 86: clouddeploy.ListVpcResponse.vpc:type_name -> clouddeploy.Vpc
	77,  // 87: clouddeploy.ListVpcResponse.at_time:type_name -> google.protobuf.Timestamp
	0,   // 88: clouddeploy.Subnet.cp_t:type_name -> clouddeploy.CloudProviderType
	76,  // 89: clouddeploy.Subnet.field_mask:type_name -> google.protobuf.FieldMask
	55,  // 90: clouddeploy.AddSubnetRequest.subnet:type_name -> clouddeploy.Subnet
	55,  // 91: clouddeploy.AddSubnetResponse.subnet:type_name -> clouddeploy.Subnet
	77,  // 92: clouddeploy.AddSubnetResponse.created_at:type_name -> google.protobuf.Timestamp
	55,  // 93: clouddeploy.UpdateSubnetRequest.subnet:type_name -> clouddeploy.Subnet
	55,  // 94: clouddeploy.UpdateSubnetResponse.subnet:type_name -> clouddeploy.Subnet
	77,  // 95: clouddeploy.UpdateSubnetResponse.at_time:type_name -> google.protobuf.Timestamp
	55,  // 96: clouddeploy.DeleteSubnetRequest.subnet:type_name -> clouddeploy.Subnet
	55,  // 97: clouddeploy.GetSubnetRequest.subnet:type_name -> clouddeploy.Subnet
	77,  // 98: clouddeploy.GetSubnetRequest.at_time:type_name -> google.protobuf.Timestamp
	55,  // 99: clouddeploy.GetSubnetResponse.subnet:type_name -> clouddeploy.Subnet
	77,  // 100: clouddeploy.GetSubnetResponse.at_time:type_name -> google.protobuf.Timestamp
	55,  // 101: clouddeploy.ListSubnetRequest.filter:type_name -> clouddeploy.Subnet
	78,  // 102: clouddeploy.ListSubnetRequest.at_time:type_name -> time.RequestAtTime
	76,  // 103: clouddeploy.ListSubnetRequest.field_mask:type_name -> google.protobuf.FieldMask
	55,  // 104: clouddeploy.ListSubnetResponse.subnet:type_name -> clouddeploy.Subnet
	77,  // 105: clouddeploy.ListSubnetResponse.at_time:type_name -> google.protobuf.Timestamp
	76,  // 106: clouddeploy.PathCharacteristics.field_mask:type_name -> google.protobuf.FieldMask
	0,   // 107: clouddeploy.Path.src_cp_t:type_name -> clouddeploy.CloudProviderType
	0,   // 108: clouddeploy.Path.dst_cp_t:type_name -> clouddeploy.CloudProviderType
	2,   // 109: clouddeploy.Path.ul_t:type_name -> clouddeploy.UnderlayConnectionType
	66,  // 110: clouddeploy.Path.path_char:type_name -> clouddeploy.PathCharacteristics
	76,  // 111: clouddeploy.Path.field_mask:type_name -> google.protobuf.FieldMask
	67,  // 112: clouddeploy.GetPathRequest.path:type_name -> clouddeploy.Path
	77,  // 113: clouddeploy.GetPathRequest.at_time:type_name -> google.protobuf.Timestamp
	67,  // 114: clouddeploy.GetPathResponse.path:type_name -> clouddeploy.Path
	77,  // 115: clouddeploy.GetPathResponse.at_time:type_name -> google.protobuf.Timestamp
	67,  // 116: clouddeploy.ListPathRequest.filter:type_name -> clouddeploy.Path
	78,  // 117: clouddeploy.ListPathRequest.at_time:type_name -> time.RequestAtTime
	76,  // 118: clouddeploy.ListPathRequest.field_mask:type_name -> google.protobuf.FieldMask
	67,  // 119: clouddeploy.ListPathResponse.path:type_name -> clouddeploy.Path
	77,  // 120: clouddeploy.ListPathResponse.at_time:type_name -> google.protobuf.Timestamp
	18,  // 121: clouddeploy.Routers.AddRouter:input_type -> clouddeploy.AddRouterRequest
	20,  // 122: clouddeploy.Routers.UpdateRouter:input_type -> clouddeploy.UpdateRouterRequest
	22,  // 123: clouddeploy.Routers.DeleteRouter:input_type -> clouddeploy.DeleteRouterRequest
	24,  // 124: clouddeploy.Routers.GetRouter:input_type -> clouddeploy.GetRouterRequest
	26,  // 125: clouddeploy.Routers.ListRouter:input_type -> clouddeploy.ListRouterRequest
	31,  // 126: clouddeploy.Topologyinfos.AddTopologyInfo:input_type -> clouddeploy.AddTopologyInfoRequest
	33,  // 127: clouddeploy.Topologyinfos.UpdateTopologyInfo:input_type -> clouddeploy.UpdateTopologyInfoRequest
	35,  // 128: clouddeploy.Topologyinfos.DeleteTopologyInfo:input_type -> clouddeploy.DeleteTopologyInfoRequest
	37,  // 129: clouddeploy.Topologyinfos.GetTopologyInfo:input_type -> clouddeploy.GetTopologyInfoRequest
	39,  // 130: clouddeploy.Topologyinfos.ListTopologyInfo:input_type -> clouddeploy.ListTopologyInfoRequest
	51,  // 131: clouddeploy.Vpcs.GetVpc:input_type -> clouddeploy.GetVpcRequest
	53,  // 132: clouddeploy.Vpcs.ListVpc:input_type -> clouddeploy.ListVpcRequest
	45,  // 133: clouddeploy.Vpcs.AddVpc:input_type -> clouddeploy.AddVpcRequest
	47,  // 134: clouddeploy.Vpcs.UpdateVpc:input_type -> clouddeploy.UpdateVpcRequest
	49,  // 135: clouddeploy.Vpcs.DeleteVpc:input_type -> clouddeploy.DeleteVpcRequest
	62,  // 136: clouddeploy.Subnets.GetSubnet:input_type -> clouddeploy.GetSubnetRequest
	64,  // 137: clouddeploy.Subnets.ListSubnet:input_type -> clouddeploy.ListSubnetRequest
	56,  // 138: clouddeploy.Subnets.AddSubnet:input_type -> clouddeploy.AddSubnetRequest
	58,  // 139: clouddeploy.Subnets.UpdateSubnet:input_type -> clouddeploy.UpdateSubnetRequest
	60,  // 140: clouddeploy.Subnets.DeleteSubnet:input_type -> clouddeploy.DeleteSubnetRequest
	68,  // 141: clouddeploy.Paths.GetPath:input_type -> clouddeploy.GetPathRequest
	70,  // 142: clouddeploy.Paths.ListPath:input_type -> clouddeploy.ListPathRequest
	19,  // 143: clouddeploy.Routers.AddRouter:output_type -> clouddeploy.AddRouterResponse
	21,  // 144: clouddeploy.Routers.UpdateRouter:output_type -> clouddeploy.UpdateRouterResponse
	23,  // 145: clouddeploy.Routers.DeleteRouter:output_type -> clouddeploy.DeleteRouterResponse
	25,  // 146: clouddeploy.Routers.GetRouter:output_type -> clouddeploy.GetRouterResponse
	27,  // 147: clouddeploy.Routers.ListRouter:output_type -> clouddeploy.ListRouterResponse
	32,  // 148: clouddeploy.Topologyinfos.AddTopologyInfo:output_type -> clouddeploy.AddTopologyInfoResponse
	34,  // 149: clouddeploy.Topologyinfos.UpdateTopologyInfo:output_type -> clouddeploy.UpdateTopologyInfoResponse
	36,  // 150: clouddeploy.Topologyinfos.DeleteTopologyInfo:output_type -> clouddeploy.DeleteTopologyInfoResponse
	38,  // 151: clouddeploy.Topologyinfos.GetTopologyInfo:output_type -> clouddeploy.GetTopologyInfoResponse
	40,  // 152: clouddeploy.Topologyinfos.ListTopologyInfo:output_type -> clouddeploy.ListTopologyInfoResponse
	52,  // 153: clouddeploy.Vpcs.GetVpc:output_type -> clouddeploy.GetVpcResponse
	54,  // 154: clouddeploy.Vpcs.ListVpc:output_type -> clouddeploy.ListVpcResponse
	46,  // 155: clouddeploy.Vpcs.AddVpc:output_type -> clouddeploy.AddVpcResponse
	48,  // 156: clouddeploy.Vpcs.UpdateVpc:output_type -> clouddeploy.UpdateVpcResponse
	50,  // 157: clouddeploy.Vpcs.DeleteVpc:output_type -> clouddeploy.DeleteVpcResponse
	63,  // 158: clouddeploy.Subnets.GetSubnet:output_type -> clouddeploy.GetSubnetResponse
	65,  // 159: clouddeploy.Subnets.ListSubnet:output_type -> clouddeploy.ListSubnetResponse
	57,  // 160: clouddeploy.Subnets.AddSubnet:output_type -> clouddeploy.AddSubnetResponse
	59,  // 161: clouddeploy.Subnets.UpdateSubnet:output_type -> clouddeploy.UpdateSubnetResponse
	61,  // 162: clouddeploy.Subnets.DeleteSubnet:output_type -> clouddeploy.DeleteSubnetResponse
	69,  // 163: clouddeploy.Paths.GetPath:output_type -> clouddeploy.GetPathResponse
	71,  // 164: clouddeploy.Paths.ListPath:output_type -> clouddeploy.ListPathResponse
	143, // [143:165] is the sub-list for method output_type
	121, // [121:143] is the sub-list for method input_type
	121, // [121:121] is the sub-list for extension type_name
	121, // [121:121] is the sub-list for extension extendee
	0,   // [0:121] is the sub-list for field type_name
}

func init() { file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_init() }
func file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_init() {
	if File_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouteTableIds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CVInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureRouterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsRouterDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Router); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRouterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRouterResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WanInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClosInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TopologyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopologyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTopologyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopologyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateTopologyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopologyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopologyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopologyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopologyInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopologyInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AzureVnetInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AwsVpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PeerVpcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVpcRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListVpcResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subnet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSubnetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathCharacteristics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Path); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPathRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPathResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   64,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_goTypes,
		DependencyIndexes: file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_depIdxs,
		EnumInfos:         file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_enumTypes,
		MessageInfos:      file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_msgTypes,
	}.Build()
	File_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto = out.File
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_rawDesc = nil
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_goTypes = nil
	file_arista_aeris_service_clouddeploy_api_clouddeploy_v1_clouddeploy_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RoutersClient is the client API for Routers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RoutersClient interface {
	AddRouter(ctx context.Context, in *AddRouterRequest, opts ...grpc.CallOption) (*AddRouterResponse, error)
	UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*UpdateRouterResponse, error)
	DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterResponse, error)
	GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*GetRouterResponse, error)
	ListRouter(ctx context.Context, in *ListRouterRequest, opts ...grpc.CallOption) (Routers_ListRouterClient, error)
}

type routersClient struct {
	cc grpc.ClientConnInterface
}

func NewRoutersClient(cc grpc.ClientConnInterface) RoutersClient {
	return &routersClient{cc}
}

func (c *routersClient) AddRouter(ctx context.Context, in *AddRouterRequest, opts ...grpc.CallOption) (*AddRouterResponse, error) {
	out := new(AddRouterResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Routers/AddRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersClient) UpdateRouter(ctx context.Context, in *UpdateRouterRequest, opts ...grpc.CallOption) (*UpdateRouterResponse, error) {
	out := new(UpdateRouterResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Routers/UpdateRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersClient) DeleteRouter(ctx context.Context, in *DeleteRouterRequest, opts ...grpc.CallOption) (*DeleteRouterResponse, error) {
	out := new(DeleteRouterResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Routers/DeleteRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersClient) GetRouter(ctx context.Context, in *GetRouterRequest, opts ...grpc.CallOption) (*GetRouterResponse, error) {
	out := new(GetRouterResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Routers/GetRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *routersClient) ListRouter(ctx context.Context, in *ListRouterRequest, opts ...grpc.CallOption) (Routers_ListRouterClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Routers_serviceDesc.Streams[0], "/clouddeploy.Routers/ListRouter", opts...)
	if err != nil {
		return nil, err
	}
	x := &routersListRouterClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Routers_ListRouterClient interface {
	Recv() (*ListRouterResponse, error)
	grpc.ClientStream
}

type routersListRouterClient struct {
	grpc.ClientStream
}

func (x *routersListRouterClient) Recv() (*ListRouterResponse, error) {
	m := new(ListRouterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RoutersServer is the server API for Routers service.
type RoutersServer interface {
	AddRouter(context.Context, *AddRouterRequest) (*AddRouterResponse, error)
	UpdateRouter(context.Context, *UpdateRouterRequest) (*UpdateRouterResponse, error)
	DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterResponse, error)
	GetRouter(context.Context, *GetRouterRequest) (*GetRouterResponse, error)
	ListRouter(*ListRouterRequest, Routers_ListRouterServer) error
}

// UnimplementedRoutersServer can be embedded to have forward compatible implementations.
type UnimplementedRoutersServer struct {
}

func (*UnimplementedRoutersServer) AddRouter(context.Context, *AddRouterRequest) (*AddRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRouter not implemented")
}
func (*UnimplementedRoutersServer) UpdateRouter(context.Context, *UpdateRouterRequest) (*UpdateRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRouter not implemented")
}
func (*UnimplementedRoutersServer) DeleteRouter(context.Context, *DeleteRouterRequest) (*DeleteRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRouter not implemented")
}
func (*UnimplementedRoutersServer) GetRouter(context.Context, *GetRouterRequest) (*GetRouterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}
func (*UnimplementedRoutersServer) ListRouter(*ListRouterRequest, Routers_ListRouterServer) error {
	return status.Errorf(codes.Unimplemented, "method ListRouter not implemented")
}

func RegisterRoutersServer(s *grpc.Server, srv RoutersServer) {
	s.RegisterService(&_Routers_serviceDesc, srv)
}

func _Routers_AddRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServer).AddRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Routers/AddRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServer).AddRouter(ctx, req.(*AddRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routers_UpdateRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServer).UpdateRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Routers/UpdateRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServer).UpdateRouter(ctx, req.(*UpdateRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routers_DeleteRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServer).DeleteRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Routers/DeleteRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServer).DeleteRouter(ctx, req.(*DeleteRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routers_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRouterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoutersServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Routers/GetRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoutersServer).GetRouter(ctx, req.(*GetRouterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Routers_ListRouter_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRouterRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoutersServer).ListRouter(m, &routersListRouterServer{stream})
}

type Routers_ListRouterServer interface {
	Send(*ListRouterResponse) error
	grpc.ServerStream
}

type routersListRouterServer struct {
	grpc.ServerStream
}

func (x *routersListRouterServer) Send(m *ListRouterResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Routers_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddeploy.Routers",
	HandlerType: (*RoutersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddRouter",
			Handler:    _Routers_AddRouter_Handler,
		},
		{
			MethodName: "UpdateRouter",
			Handler:    _Routers_UpdateRouter_Handler,
		},
		{
			MethodName: "DeleteRouter",
			Handler:    _Routers_DeleteRouter_Handler,
		},
		{
			MethodName: "GetRouter",
			Handler:    _Routers_GetRouter_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListRouter",
			Handler:       _Routers_ListRouter_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/aeris/service/clouddeploy/api/clouddeploy.v1/clouddeploy.proto",
}

// TopologyinfosClient is the client API for Topologyinfos service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TopologyinfosClient interface {
	AddTopologyInfo(ctx context.Context, in *AddTopologyInfoRequest, opts ...grpc.CallOption) (*AddTopologyInfoResponse, error)
	UpdateTopologyInfo(ctx context.Context, in *UpdateTopologyInfoRequest, opts ...grpc.CallOption) (*UpdateTopologyInfoResponse, error)
	DeleteTopologyInfo(ctx context.Context, in *DeleteTopologyInfoRequest, opts ...grpc.CallOption) (*DeleteTopologyInfoResponse, error)
	GetTopologyInfo(ctx context.Context, in *GetTopologyInfoRequest, opts ...grpc.CallOption) (*GetTopologyInfoResponse, error)
	ListTopologyInfo(ctx context.Context, in *ListTopologyInfoRequest, opts ...grpc.CallOption) (Topologyinfos_ListTopologyInfoClient, error)
}

type topologyinfosClient struct {
	cc grpc.ClientConnInterface
}

func NewTopologyinfosClient(cc grpc.ClientConnInterface) TopologyinfosClient {
	return &topologyinfosClient{cc}
}

func (c *topologyinfosClient) AddTopologyInfo(ctx context.Context, in *AddTopologyInfoRequest, opts ...grpc.CallOption) (*AddTopologyInfoResponse, error) {
	out := new(AddTopologyInfoResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Topologyinfos/AddTopologyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyinfosClient) UpdateTopologyInfo(ctx context.Context, in *UpdateTopologyInfoRequest, opts ...grpc.CallOption) (*UpdateTopologyInfoResponse, error) {
	out := new(UpdateTopologyInfoResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Topologyinfos/UpdateTopologyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyinfosClient) DeleteTopologyInfo(ctx context.Context, in *DeleteTopologyInfoRequest, opts ...grpc.CallOption) (*DeleteTopologyInfoResponse, error) {
	out := new(DeleteTopologyInfoResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Topologyinfos/DeleteTopologyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyinfosClient) GetTopologyInfo(ctx context.Context, in *GetTopologyInfoRequest, opts ...grpc.CallOption) (*GetTopologyInfoResponse, error) {
	out := new(GetTopologyInfoResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Topologyinfos/GetTopologyInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *topologyinfosClient) ListTopologyInfo(ctx context.Context, in *ListTopologyInfoRequest, opts ...grpc.CallOption) (Topologyinfos_ListTopologyInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Topologyinfos_serviceDesc.Streams[0], "/clouddeploy.Topologyinfos/ListTopologyInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &topologyinfosListTopologyInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Topologyinfos_ListTopologyInfoClient interface {
	Recv() (*ListTopologyInfoResponse, error)
	grpc.ClientStream
}

type topologyinfosListTopologyInfoClient struct {
	grpc.ClientStream
}

func (x *topologyinfosListTopologyInfoClient) Recv() (*ListTopologyInfoResponse, error) {
	m := new(ListTopologyInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TopologyinfosServer is the server API for Topologyinfos service.
type TopologyinfosServer interface {
	AddTopologyInfo(context.Context, *AddTopologyInfoRequest) (*AddTopologyInfoResponse, error)
	UpdateTopologyInfo(context.Context, *UpdateTopologyInfoRequest) (*UpdateTopologyInfoResponse, error)
	DeleteTopologyInfo(context.Context, *DeleteTopologyInfoRequest) (*DeleteTopologyInfoResponse, error)
	GetTopologyInfo(context.Context, *GetTopologyInfoRequest) (*GetTopologyInfoResponse, error)
	ListTopologyInfo(*ListTopologyInfoRequest, Topologyinfos_ListTopologyInfoServer) error
}

// UnimplementedTopologyinfosServer can be embedded to have forward compatible implementations.
type UnimplementedTopologyinfosServer struct {
}

func (*UnimplementedTopologyinfosServer) AddTopologyInfo(context.Context, *AddTopologyInfoRequest) (*AddTopologyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTopologyInfo not implemented")
}
func (*UnimplementedTopologyinfosServer) UpdateTopologyInfo(context.Context, *UpdateTopologyInfoRequest) (*UpdateTopologyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTopologyInfo not implemented")
}
func (*UnimplementedTopologyinfosServer) DeleteTopologyInfo(context.Context, *DeleteTopologyInfoRequest) (*DeleteTopologyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTopologyInfo not implemented")
}
func (*UnimplementedTopologyinfosServer) GetTopologyInfo(context.Context, *GetTopologyInfoRequest) (*GetTopologyInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopologyInfo not implemented")
}
func (*UnimplementedTopologyinfosServer) ListTopologyInfo(*ListTopologyInfoRequest, Topologyinfos_ListTopologyInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ListTopologyInfo not implemented")
}

func RegisterTopologyinfosServer(s *grpc.Server, srv TopologyinfosServer) {
	s.RegisterService(&_Topologyinfos_serviceDesc, srv)
}

func _Topologyinfos_AddTopologyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTopologyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyinfosServer).AddTopologyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Topologyinfos/AddTopologyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyinfosServer).AddTopologyInfo(ctx, req.(*AddTopologyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topologyinfos_UpdateTopologyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTopologyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyinfosServer).UpdateTopologyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Topologyinfos/UpdateTopologyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyinfosServer).UpdateTopologyInfo(ctx, req.(*UpdateTopologyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topologyinfos_DeleteTopologyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTopologyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyinfosServer).DeleteTopologyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Topologyinfos/DeleteTopologyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyinfosServer).DeleteTopologyInfo(ctx, req.(*DeleteTopologyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topologyinfos_GetTopologyInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopologyInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TopologyinfosServer).GetTopologyInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Topologyinfos/GetTopologyInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TopologyinfosServer).GetTopologyInfo(ctx, req.(*GetTopologyInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Topologyinfos_ListTopologyInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTopologyInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TopologyinfosServer).ListTopologyInfo(m, &topologyinfosListTopologyInfoServer{stream})
}

type Topologyinfos_ListTopologyInfoServer interface {
	Send(*ListTopologyInfoResponse) error
	grpc.ServerStream
}

type topologyinfosListTopologyInfoServer struct {
	grpc.ServerStream
}

func (x *topologyinfosListTopologyInfoServer) Send(m *ListTopologyInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Topologyinfos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddeploy.Topologyinfos",
	HandlerType: (*TopologyinfosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTopologyInfo",
			Handler:    _Topologyinfos_AddTopologyInfo_Handler,
		},
		{
			MethodName: "UpdateTopologyInfo",
			Handler:    _Topologyinfos_UpdateTopologyInfo_Handler,
		},
		{
			MethodName: "DeleteTopologyInfo",
			Handler:    _Topologyinfos_DeleteTopologyInfo_Handler,
		},
		{
			MethodName: "GetTopologyInfo",
			Handler:    _Topologyinfos_GetTopologyInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListTopologyInfo",
			Handler:       _Topologyinfos_ListTopologyInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/aeris/service/clouddeploy/api/clouddeploy.v1/clouddeploy.proto",
}

// VpcsClient is the client API for Vpcs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VpcsClient interface {
	GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*GetVpcResponse, error)
	ListVpc(ctx context.Context, in *ListVpcRequest, opts ...grpc.CallOption) (Vpcs_ListVpcClient, error)
	AddVpc(ctx context.Context, in *AddVpcRequest, opts ...grpc.CallOption) (*AddVpcResponse, error)
	UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*UpdateVpcResponse, error)
	DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*DeleteVpcResponse, error)
}

type vpcsClient struct {
	cc grpc.ClientConnInterface
}

func NewVpcsClient(cc grpc.ClientConnInterface) VpcsClient {
	return &vpcsClient{cc}
}

func (c *vpcsClient) GetVpc(ctx context.Context, in *GetVpcRequest, opts ...grpc.CallOption) (*GetVpcResponse, error) {
	out := new(GetVpcResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Vpcs/GetVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsClient) ListVpc(ctx context.Context, in *ListVpcRequest, opts ...grpc.CallOption) (Vpcs_ListVpcClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Vpcs_serviceDesc.Streams[0], "/clouddeploy.Vpcs/ListVpc", opts...)
	if err != nil {
		return nil, err
	}
	x := &vpcsListVpcClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Vpcs_ListVpcClient interface {
	Recv() (*ListVpcResponse, error)
	grpc.ClientStream
}

type vpcsListVpcClient struct {
	grpc.ClientStream
}

func (x *vpcsListVpcClient) Recv() (*ListVpcResponse, error) {
	m := new(ListVpcResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vpcsClient) AddVpc(ctx context.Context, in *AddVpcRequest, opts ...grpc.CallOption) (*AddVpcResponse, error) {
	out := new(AddVpcResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Vpcs/AddVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsClient) UpdateVpc(ctx context.Context, in *UpdateVpcRequest, opts ...grpc.CallOption) (*UpdateVpcResponse, error) {
	out := new(UpdateVpcResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Vpcs/UpdateVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vpcsClient) DeleteVpc(ctx context.Context, in *DeleteVpcRequest, opts ...grpc.CallOption) (*DeleteVpcResponse, error) {
	out := new(DeleteVpcResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Vpcs/DeleteVpc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VpcsServer is the server API for Vpcs service.
type VpcsServer interface {
	GetVpc(context.Context, *GetVpcRequest) (*GetVpcResponse, error)
	ListVpc(*ListVpcRequest, Vpcs_ListVpcServer) error
	AddVpc(context.Context, *AddVpcRequest) (*AddVpcResponse, error)
	UpdateVpc(context.Context, *UpdateVpcRequest) (*UpdateVpcResponse, error)
	DeleteVpc(context.Context, *DeleteVpcRequest) (*DeleteVpcResponse, error)
}

// UnimplementedVpcsServer can be embedded to have forward compatible implementations.
type UnimplementedVpcsServer struct {
}

func (*UnimplementedVpcsServer) GetVpc(context.Context, *GetVpcRequest) (*GetVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVpc not implemented")
}
func (*UnimplementedVpcsServer) ListVpc(*ListVpcRequest, Vpcs_ListVpcServer) error {
	return status.Errorf(codes.Unimplemented, "method ListVpc not implemented")
}
func (*UnimplementedVpcsServer) AddVpc(context.Context, *AddVpcRequest) (*AddVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddVpc not implemented")
}
func (*UnimplementedVpcsServer) UpdateVpc(context.Context, *UpdateVpcRequest) (*UpdateVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVpc not implemented")
}
func (*UnimplementedVpcsServer) DeleteVpc(context.Context, *DeleteVpcRequest) (*DeleteVpcResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVpc not implemented")
}

func RegisterVpcsServer(s *grpc.Server, srv VpcsServer) {
	s.RegisterService(&_Vpcs_serviceDesc, srv)
}

func _Vpcs_GetVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServer).GetVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Vpcs/GetVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServer).GetVpc(ctx, req.(*GetVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpcs_ListVpc_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListVpcRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VpcsServer).ListVpc(m, &vpcsListVpcServer{stream})
}

type Vpcs_ListVpcServer interface {
	Send(*ListVpcResponse) error
	grpc.ServerStream
}

type vpcsListVpcServer struct {
	grpc.ServerStream
}

func (x *vpcsListVpcServer) Send(m *ListVpcResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Vpcs_AddVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServer).AddVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Vpcs/AddVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServer).AddVpc(ctx, req.(*AddVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpcs_UpdateVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServer).UpdateVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Vpcs/UpdateVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServer).UpdateVpc(ctx, req.(*UpdateVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vpcs_DeleteVpc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVpcRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VpcsServer).DeleteVpc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Vpcs/DeleteVpc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VpcsServer).DeleteVpc(ctx, req.(*DeleteVpcRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Vpcs_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddeploy.Vpcs",
	HandlerType: (*VpcsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVpc",
			Handler:    _Vpcs_GetVpc_Handler,
		},
		{
			MethodName: "AddVpc",
			Handler:    _Vpcs_AddVpc_Handler,
		},
		{
			MethodName: "UpdateVpc",
			Handler:    _Vpcs_UpdateVpc_Handler,
		},
		{
			MethodName: "DeleteVpc",
			Handler:    _Vpcs_DeleteVpc_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListVpc",
			Handler:       _Vpcs_ListVpc_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/aeris/service/clouddeploy/api/clouddeploy.v1/clouddeploy.proto",
}

// SubnetsClient is the client API for Subnets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubnetsClient interface {
	GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error)
	ListSubnet(ctx context.Context, in *ListSubnetRequest, opts ...grpc.CallOption) (Subnets_ListSubnetClient, error)
	AddSubnet(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error)
	UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*UpdateSubnetResponse, error)
	DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error)
}

type subnetsClient struct {
	cc grpc.ClientConnInterface
}

func NewSubnetsClient(cc grpc.ClientConnInterface) SubnetsClient {
	return &subnetsClient{cc}
}

func (c *subnetsClient) GetSubnet(ctx context.Context, in *GetSubnetRequest, opts ...grpc.CallOption) (*GetSubnetResponse, error) {
	out := new(GetSubnetResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Subnets/GetSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetsClient) ListSubnet(ctx context.Context, in *ListSubnetRequest, opts ...grpc.CallOption) (Subnets_ListSubnetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Subnets_serviceDesc.Streams[0], "/clouddeploy.Subnets/ListSubnet", opts...)
	if err != nil {
		return nil, err
	}
	x := &subnetsListSubnetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Subnets_ListSubnetClient interface {
	Recv() (*ListSubnetResponse, error)
	grpc.ClientStream
}

type subnetsListSubnetClient struct {
	grpc.ClientStream
}

func (x *subnetsListSubnetClient) Recv() (*ListSubnetResponse, error) {
	m := new(ListSubnetResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *subnetsClient) AddSubnet(ctx context.Context, in *AddSubnetRequest, opts ...grpc.CallOption) (*AddSubnetResponse, error) {
	out := new(AddSubnetResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Subnets/AddSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetsClient) UpdateSubnet(ctx context.Context, in *UpdateSubnetRequest, opts ...grpc.CallOption) (*UpdateSubnetResponse, error) {
	out := new(UpdateSubnetResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Subnets/UpdateSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subnetsClient) DeleteSubnet(ctx context.Context, in *DeleteSubnetRequest, opts ...grpc.CallOption) (*DeleteSubnetResponse, error) {
	out := new(DeleteSubnetResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Subnets/DeleteSubnet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubnetsServer is the server API for Subnets service.
type SubnetsServer interface {
	GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error)
	ListSubnet(*ListSubnetRequest, Subnets_ListSubnetServer) error
	AddSubnet(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error)
	UpdateSubnet(context.Context, *UpdateSubnetRequest) (*UpdateSubnetResponse, error)
	DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error)
}

// UnimplementedSubnetsServer can be embedded to have forward compatible implementations.
type UnimplementedSubnetsServer struct {
}

func (*UnimplementedSubnetsServer) GetSubnet(context.Context, *GetSubnetRequest) (*GetSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubnet not implemented")
}
func (*UnimplementedSubnetsServer) ListSubnet(*ListSubnetRequest, Subnets_ListSubnetServer) error {
	return status.Errorf(codes.Unimplemented, "method ListSubnet not implemented")
}
func (*UnimplementedSubnetsServer) AddSubnet(context.Context, *AddSubnetRequest) (*AddSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubnet not implemented")
}
func (*UnimplementedSubnetsServer) UpdateSubnet(context.Context, *UpdateSubnetRequest) (*UpdateSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSubnet not implemented")
}
func (*UnimplementedSubnetsServer) DeleteSubnet(context.Context, *DeleteSubnetRequest) (*DeleteSubnetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubnet not implemented")
}

func RegisterSubnetsServer(s *grpc.Server, srv SubnetsServer) {
	s.RegisterService(&_Subnets_serviceDesc, srv)
}

func _Subnets_GetSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetsServer).GetSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Subnets/GetSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetsServer).GetSubnet(ctx, req.(*GetSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subnets_ListSubnet_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListSubnetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SubnetsServer).ListSubnet(m, &subnetsListSubnetServer{stream})
}

type Subnets_ListSubnetServer interface {
	Send(*ListSubnetResponse) error
	grpc.ServerStream
}

type subnetsListSubnetServer struct {
	grpc.ServerStream
}

func (x *subnetsListSubnetServer) Send(m *ListSubnetResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Subnets_AddSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetsServer).AddSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Subnets/AddSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetsServer).AddSubnet(ctx, req.(*AddSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subnets_UpdateSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetsServer).UpdateSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Subnets/UpdateSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetsServer).UpdateSubnet(ctx, req.(*UpdateSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Subnets_DeleteSubnet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSubnetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubnetsServer).DeleteSubnet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Subnets/DeleteSubnet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubnetsServer).DeleteSubnet(ctx, req.(*DeleteSubnetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Subnets_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddeploy.Subnets",
	HandlerType: (*SubnetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubnet",
			Handler:    _Subnets_GetSubnet_Handler,
		},
		{
			MethodName: "AddSubnet",
			Handler:    _Subnets_AddSubnet_Handler,
		},
		{
			MethodName: "UpdateSubnet",
			Handler:    _Subnets_UpdateSubnet_Handler,
		},
		{
			MethodName: "DeleteSubnet",
			Handler:    _Subnets_DeleteSubnet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListSubnet",
			Handler:       _Subnets_ListSubnet_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/aeris/service/clouddeploy/api/clouddeploy.v1/clouddeploy.proto",
}

// PathsClient is the client API for Paths service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PathsClient interface {
	GetPath(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathResponse, error)
	ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (Paths_ListPathClient, error)
}

type pathsClient struct {
	cc grpc.ClientConnInterface
}

func NewPathsClient(cc grpc.ClientConnInterface) PathsClient {
	return &pathsClient{cc}
}

func (c *pathsClient) GetPath(ctx context.Context, in *GetPathRequest, opts ...grpc.CallOption) (*GetPathResponse, error) {
	out := new(GetPathResponse)
	err := c.cc.Invoke(ctx, "/clouddeploy.Paths/GetPath", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathsClient) ListPath(ctx context.Context, in *ListPathRequest, opts ...grpc.CallOption) (Paths_ListPathClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Paths_serviceDesc.Streams[0], "/clouddeploy.Paths/ListPath", opts...)
	if err != nil {
		return nil, err
	}
	x := &pathsListPathClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Paths_ListPathClient interface {
	Recv() (*ListPathResponse, error)
	grpc.ClientStream
}

type pathsListPathClient struct {
	grpc.ClientStream
}

func (x *pathsListPathClient) Recv() (*ListPathResponse, error) {
	m := new(ListPathResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PathsServer is the server API for Paths service.
type PathsServer interface {
	GetPath(context.Context, *GetPathRequest) (*GetPathResponse, error)
	ListPath(*ListPathRequest, Paths_ListPathServer) error
}

// UnimplementedPathsServer can be embedded to have forward compatible implementations.
type UnimplementedPathsServer struct {
}

func (*UnimplementedPathsServer) GetPath(context.Context, *GetPathRequest) (*GetPathResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPath not implemented")
}
func (*UnimplementedPathsServer) ListPath(*ListPathRequest, Paths_ListPathServer) error {
	return status.Errorf(codes.Unimplemented, "method ListPath not implemented")
}

func RegisterPathsServer(s *grpc.Server, srv PathsServer) {
	s.RegisterService(&_Paths_serviceDesc, srv)
}

func _Paths_GetPath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathsServer).GetPath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/clouddeploy.Paths/GetPath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathsServer).GetPath(ctx, req.(*GetPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Paths_ListPath_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListPathRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PathsServer).ListPath(m, &pathsListPathServer{stream})
}

type Paths_ListPathServer interface {
	Send(*ListPathResponse) error
	grpc.ServerStream
}

type pathsListPathServer struct {
	grpc.ServerStream
}

func (x *pathsListPathServer) Send(m *ListPathResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Paths_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clouddeploy.Paths",
	HandlerType: (*PathsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPath",
			Handler:    _Paths_GetPath_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListPath",
			Handler:       _Paths_ListPath_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/aeris/service/clouddeploy/api/clouddeploy.v1/clouddeploy.proto",
}
