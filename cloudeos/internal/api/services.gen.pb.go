// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: arista/clouddeploy.v1/services.gen.proto

package clouddeploy_v1

import (
	context "context"
	reflect "reflect"
	sync "sync"

	subscriptions "github.com/aristanetworks/cloudvision-go/api/arista/subscriptions"
	time "github.com/aristanetworks/cloudvision-go/api/arista/time"

	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type AWSVpnConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key uniquely identifies a AWSVpnConfig instance to retrieve.
	// This value must be populated.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the time for which you are interested in the data.
	// If no time is given, the server will use the time at twhich it makes the request.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigRequest) Reset() {
	*x = AWSVpnConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigRequest) ProtoMessage() {}

func (x *AWSVpnConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{0}
}

func (x *AWSVpnConfigRequest) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigRequest) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is the value requested.
	// This structure will be fully-populated as it exists in the datastore. If
	// optional fields were not given at creation, these fields will be empty or
	// set to default values.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time carries the (UTC) timestamp of the last-modification of the
	// AWSVpnConfig instance in this response.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigResponse) Reset() {
	*x = AWSVpnConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigResponse) ProtoMessage() {}

func (x *AWSVpnConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{1}
}

func (x *AWSVpnConfigResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PartialEqFilter provides a way to server-side filter a GetAll/Subscribe.
	// This requires all provided fields to be equal to the response.
	//
	// While transparent to users, this field also allows services to optimize internal
	// subscriptions if filter(s) are sufficiently specific.
	PartialEqFilter []*AWSVpnConfig `protobuf:"bytes,1,rep,name=partial_eq_filter,json=partialEqFilter,proto3" json:"partial_eq_filter,omitempty"`
	// TimeRange allows limiting response data to within a specified time window.
	// If this field is populated, at least one of the two time fields are required.
	//
	// This field is not allowed in the Subscribe RPC.
	Time *time.TimeBounds `protobuf:"bytes,3,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigStreamRequest) Reset() {
	*x = AWSVpnConfigStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigStreamRequest) ProtoMessage() {}

func (x *AWSVpnConfigStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigStreamRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigStreamRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{2}
}

func (x *AWSVpnConfigStreamRequest) GetPartialEqFilter() []*AWSVpnConfig {
	if x != nil {
		return x.PartialEqFilter
	}
	return nil
}

func (x *AWSVpnConfigStreamRequest) GetTime() *time.TimeBounds {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a value deemed relevant to the initiating request.
	// This structure will always have its key-field populated. Which other fields are
	// populated, and why, depends on the value of Operation and what triggered this notification.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time holds the timestamp of this AWSVpnConfig's last modification.
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
	// Operation indicates how the AWSVpnConfig value in this response should be considered.
	// Under non-subscribe requests, this value should always be INITIAL. In a subscription,
	// once all initial data is streamed and the client begins to receive modification updates,
	// you should not see INITIAL again.
	Type subscriptions.Operation `protobuf:"varint,3,opt,name=type,proto3,enum=arista.subscriptions.Operation" json:"type,omitempty"`
}

func (x *AWSVpnConfigStreamResponse) Reset() {
	*x = AWSVpnConfigStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigStreamResponse) ProtoMessage() {}

func (x *AWSVpnConfigStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigStreamResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigStreamResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{3}
}

func (x *AWSVpnConfigStreamResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigStreamResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *AWSVpnConfigStreamResponse) GetType() subscriptions.Operation {
	if x != nil {
		return x.Type
	}
	return subscriptions.Operation_UNSPECIFIED
}

type AWSVpnConfigSetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// AWSVpnConfig carries the value to set into the datastore.
	// See the documentation on the AWSVpnConfig struct for which fields are required.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AWSVpnConfigSetRequest) Reset() {
	*x = AWSVpnConfigSetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetRequest) ProtoMessage() {}

func (x *AWSVpnConfigSetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{4}
}

func (x *AWSVpnConfigSetRequest) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

type AWSVpnConfigSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value carries all the values given in the AWSVpnConfigSetRequest as well
	// as any server-generated values.
	Value *AWSVpnConfig `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// creation. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==CreatedAt will include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigSetResponse) Reset() {
	*x = AWSVpnConfigSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigSetResponse) ProtoMessage() {}

func (x *AWSVpnConfigSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigSetResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigSetResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{5}
}

func (x *AWSVpnConfigSetResponse) GetValue() *AWSVpnConfig {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *AWSVpnConfigSetResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

type AWSVpnConfigDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key indicates which AWSVpnConfig instance to remove.
	// This field must always be set.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *AWSVpnConfigDeleteRequest) Reset() {
	*x = AWSVpnConfigDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteRequest) ProtoMessage() {}

func (x *AWSVpnConfigDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteRequest.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteRequest) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{6}
}

func (x *AWSVpnConfigDeleteRequest) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type AWSVpnConfigDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key echoes back the key of the deleted AWSVpnConfig instance.
	Key *AWSVpnKey `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Time indicates the (UTC) timestamp at which the system recognizes the
	// deletion. The only guarantees made about this timestamp are:
	//
	//    - it is after the time the request was received
	//    - a time-ranged query with StartTime==DeletedAt will not include this instance.
	//
	Time *timestamp.Timestamp `protobuf:"bytes,2,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *AWSVpnConfigDeleteResponse) Reset() {
	*x = AWSVpnConfigDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfigDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfigDeleteResponse) ProtoMessage() {}

func (x *AWSVpnConfigDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfigDeleteResponse.ProtoReflect.Descriptor instead.
func (*AWSVpnConfigDeleteResponse) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP(), []int{7}
}

func (x *AWSVpnConfigDeleteResponse) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfigDeleteResponse) GetTime() *timestamp.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

var File_arista_clouddeploy_v1_services_gen_proto protoreflect.FileDescriptor

var file_arista_clouddeploy_v1_services_gen_proto_rawDesc = []byte{
	0x0a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x67, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x1a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x79, 0x0a,
	0x13, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x14, 0x41, 0x57, 0x53,
	0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x99, 0x01, 0x0a,
	0x19, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x65, 0x71, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x61, 0x6c, 0x45, 0x71, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x74, 0x69, 0x6d, 0x65, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x6f, 0x75, 0x6e,
	0x64, 0x73, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x01, 0x0a, 0x1a, 0x41, 0x57, 0x53,
	0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1f, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x41, 0x57, 0x53, 0x56, 0x70,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x84, 0x01, 0x0a,
	0x17, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x39, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x22, 0x4f, 0x0a, 0x19, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x22, 0x80, 0x01, 0x0a, 0x1a, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b,
	0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x32, 0xb2, 0x04, 0x0a, 0x13, 0x41, 0x57, 0x53, 0x56,
	0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x61, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4f, 0x6e, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x6f, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x30, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x12, 0x72, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70,
	0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x64, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x2d,
	0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a,
	0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x30, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x61, 0x72, 0x69, 0x73,
	0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x37, 0x5a, 0x35,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_arista_clouddeploy_v1_services_gen_proto_rawDescOnce sync.Once
	file_arista_clouddeploy_v1_services_gen_proto_rawDescData = file_arista_clouddeploy_v1_services_gen_proto_rawDesc
)

func file_arista_clouddeploy_v1_services_gen_proto_rawDescGZIP() []byte {
	file_arista_clouddeploy_v1_services_gen_proto_rawDescOnce.Do(func() {
		file_arista_clouddeploy_v1_services_gen_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_clouddeploy_v1_services_gen_proto_rawDescData)
	})
	return file_arista_clouddeploy_v1_services_gen_proto_rawDescData
}

var file_arista_clouddeploy_v1_services_gen_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_arista_clouddeploy_v1_services_gen_proto_goTypes = []interface{}{
	(*AWSVpnConfigRequest)(nil),        // 0: arista.clouddeploy.v1.AWSVpnConfigRequest
	(*AWSVpnConfigResponse)(nil),       // 1: arista.clouddeploy.v1.AWSVpnConfigResponse
	(*AWSVpnConfigStreamRequest)(nil),  // 2: arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	(*AWSVpnConfigStreamResponse)(nil), // 3: arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	(*AWSVpnConfigSetRequest)(nil),     // 4: arista.clouddeploy.v1.AWSVpnConfigSetRequest
	(*AWSVpnConfigSetResponse)(nil),    // 5: arista.clouddeploy.v1.AWSVpnConfigSetResponse
	(*AWSVpnConfigDeleteRequest)(nil),  // 6: arista.clouddeploy.v1.AWSVpnConfigDeleteRequest
	(*AWSVpnConfigDeleteResponse)(nil), // 7: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse
	(*AWSVpnKey)(nil),                  // 8: arista.clouddeploy.v1.AWSVpnKey
	(*timestamp.Timestamp)(nil),        // 9: google.protobuf.Timestamp
	(*AWSVpnConfig)(nil),               // 10: arista.clouddeploy.v1.AWSVpnConfig
	(*time.TimeBounds)(nil),            // 11: arista.time.TimeBounds
	(subscriptions.Operation)(0),       // 12: arista.subscriptions.Operation
}
var file_arista_clouddeploy_v1_services_gen_proto_depIdxs = []int32{
	8,  // 0: arista.clouddeploy.v1.AWSVpnConfigRequest.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	9,  // 1: arista.clouddeploy.v1.AWSVpnConfigRequest.time:type_name -> google.protobuf.Timestamp
	10, // 2: arista.clouddeploy.v1.AWSVpnConfigResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	9,  // 3: arista.clouddeploy.v1.AWSVpnConfigResponse.time:type_name -> google.protobuf.Timestamp
	10, // 4: arista.clouddeploy.v1.AWSVpnConfigStreamRequest.partial_eq_filter:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	11, // 5: arista.clouddeploy.v1.AWSVpnConfigStreamRequest.time:type_name -> arista.time.TimeBounds
	10, // 6: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	9,  // 7: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.time:type_name -> google.protobuf.Timestamp
	12, // 8: arista.clouddeploy.v1.AWSVpnConfigStreamResponse.type:type_name -> arista.subscriptions.Operation
	10, // 9: arista.clouddeploy.v1.AWSVpnConfigSetRequest.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	10, // 10: arista.clouddeploy.v1.AWSVpnConfigSetResponse.value:type_name -> arista.clouddeploy.v1.AWSVpnConfig
	9,  // 11: arista.clouddeploy.v1.AWSVpnConfigSetResponse.time:type_name -> google.protobuf.Timestamp
	8,  // 12: arista.clouddeploy.v1.AWSVpnConfigDeleteRequest.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	8,  // 13: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	9,  // 14: arista.clouddeploy.v1.AWSVpnConfigDeleteResponse.time:type_name -> google.protobuf.Timestamp
	0,  // 15: arista.clouddeploy.v1.AWSVpnConfigService.GetOne:input_type -> arista.clouddeploy.v1.AWSVpnConfigRequest
	2,  // 16: arista.clouddeploy.v1.AWSVpnConfigService.GetAll:input_type -> arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	2,  // 17: arista.clouddeploy.v1.AWSVpnConfigService.Subscribe:input_type -> arista.clouddeploy.v1.AWSVpnConfigStreamRequest
	4,  // 18: arista.clouddeploy.v1.AWSVpnConfigService.Set:input_type -> arista.clouddeploy.v1.AWSVpnConfigSetRequest
	6,  // 19: arista.clouddeploy.v1.AWSVpnConfigService.Delete:input_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteRequest
	1,  // 20: arista.clouddeploy.v1.AWSVpnConfigService.GetOne:output_type -> arista.clouddeploy.v1.AWSVpnConfigResponse
	3,  // 21: arista.clouddeploy.v1.AWSVpnConfigService.GetAll:output_type -> arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	3,  // 22: arista.clouddeploy.v1.AWSVpnConfigService.Subscribe:output_type -> arista.clouddeploy.v1.AWSVpnConfigStreamResponse
	5,  // 23: arista.clouddeploy.v1.AWSVpnConfigService.Set:output_type -> arista.clouddeploy.v1.AWSVpnConfigSetResponse
	7,  // 24: arista.clouddeploy.v1.AWSVpnConfigService.Delete:output_type -> arista.clouddeploy.v1.AWSVpnConfigDeleteResponse
	20, // [20:25] is the sub-list for method output_type
	15, // [15:20] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_arista_clouddeploy_v1_services_gen_proto_init() }
func file_arista_clouddeploy_v1_services_gen_proto_init() {
	if File_arista_clouddeploy_v1_services_gen_proto != nil {
		return
	}
	file_arista_clouddeploy_v1_clouddeploy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_services_gen_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfigDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_clouddeploy_v1_services_gen_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_arista_clouddeploy_v1_services_gen_proto_goTypes,
		DependencyIndexes: file_arista_clouddeploy_v1_services_gen_proto_depIdxs,
		MessageInfos:      file_arista_clouddeploy_v1_services_gen_proto_msgTypes,
	}.Build()
	File_arista_clouddeploy_v1_services_gen_proto = out.File
	file_arista_clouddeploy_v1_services_gen_proto_rawDesc = nil
	file_arista_clouddeploy_v1_services_gen_proto_goTypes = nil
	file_arista_clouddeploy_v1_services_gen_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AWSVpnConfigServiceClient is the client API for AWSVpnConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AWSVpnConfigServiceClient interface {
	GetOne(ctx context.Context, in *AWSVpnConfigRequest, opts ...grpc.CallOption) (*AWSVpnConfigResponse, error)
	GetAll(ctx context.Context, in *AWSVpnConfigStreamRequest, opts ...grpc.CallOption) (AWSVpnConfigService_GetAllClient, error)
	Subscribe(ctx context.Context, in *AWSVpnConfigStreamRequest, opts ...grpc.CallOption) (AWSVpnConfigService_SubscribeClient, error)
	Set(ctx context.Context, in *AWSVpnConfigSetRequest, opts ...grpc.CallOption) (*AWSVpnConfigSetResponse, error)
	Delete(ctx context.Context, in *AWSVpnConfigDeleteRequest, opts ...grpc.CallOption) (*AWSVpnConfigDeleteResponse, error)
}

type aWSVpnConfigServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAWSVpnConfigServiceClient(cc grpc.ClientConnInterface) AWSVpnConfigServiceClient {
	return &aWSVpnConfigServiceClient{cc}
}

func (c *aWSVpnConfigServiceClient) GetOne(ctx context.Context, in *AWSVpnConfigRequest, opts ...grpc.CallOption) (*AWSVpnConfigResponse, error) {
	out := new(AWSVpnConfigResponse)
	err := c.cc.Invoke(ctx, "/arista.clouddeploy.v1.AWSVpnConfigService/GetOne", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aWSVpnConfigServiceClient) GetAll(ctx context.Context, in *AWSVpnConfigStreamRequest, opts ...grpc.CallOption) (AWSVpnConfigService_GetAllClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AWSVpnConfigService_serviceDesc.Streams[0], "/arista.clouddeploy.v1.AWSVpnConfigService/GetAll", opts...)
	if err != nil {
		return nil, err
	}
	x := &aWSVpnConfigServiceGetAllClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AWSVpnConfigService_GetAllClient interface {
	Recv() (*AWSVpnConfigStreamResponse, error)
	grpc.ClientStream
}

type aWSVpnConfigServiceGetAllClient struct {
	grpc.ClientStream
}

func (x *aWSVpnConfigServiceGetAllClient) Recv() (*AWSVpnConfigStreamResponse, error) {
	m := new(AWSVpnConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aWSVpnConfigServiceClient) Subscribe(ctx context.Context, in *AWSVpnConfigStreamRequest, opts ...grpc.CallOption) (AWSVpnConfigService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_AWSVpnConfigService_serviceDesc.Streams[1], "/arista.clouddeploy.v1.AWSVpnConfigService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &aWSVpnConfigServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AWSVpnConfigService_SubscribeClient interface {
	Recv() (*AWSVpnConfigStreamResponse, error)
	grpc.ClientStream
}

type aWSVpnConfigServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *aWSVpnConfigServiceSubscribeClient) Recv() (*AWSVpnConfigStreamResponse, error) {
	m := new(AWSVpnConfigStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *aWSVpnConfigServiceClient) Set(ctx context.Context, in *AWSVpnConfigSetRequest, opts ...grpc.CallOption) (*AWSVpnConfigSetResponse, error) {
	out := new(AWSVpnConfigSetResponse)
	err := c.cc.Invoke(ctx, "/arista.clouddeploy.v1.AWSVpnConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *aWSVpnConfigServiceClient) Delete(ctx context.Context, in *AWSVpnConfigDeleteRequest, opts ...grpc.CallOption) (*AWSVpnConfigDeleteResponse, error) {
	out := new(AWSVpnConfigDeleteResponse)
	err := c.cc.Invoke(ctx, "/arista.clouddeploy.v1.AWSVpnConfigService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AWSVpnConfigServiceServer is the server API for AWSVpnConfigService service.
type AWSVpnConfigServiceServer interface {
	GetOne(context.Context, *AWSVpnConfigRequest) (*AWSVpnConfigResponse, error)
	GetAll(*AWSVpnConfigStreamRequest, AWSVpnConfigService_GetAllServer) error
	Subscribe(*AWSVpnConfigStreamRequest, AWSVpnConfigService_SubscribeServer) error
	Set(context.Context, *AWSVpnConfigSetRequest) (*AWSVpnConfigSetResponse, error)
	Delete(context.Context, *AWSVpnConfigDeleteRequest) (*AWSVpnConfigDeleteResponse, error)
}

// UnimplementedAWSVpnConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAWSVpnConfigServiceServer struct {
}

func (*UnimplementedAWSVpnConfigServiceServer) GetOne(context.Context, *AWSVpnConfigRequest) (*AWSVpnConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOne not implemented")
}
func (*UnimplementedAWSVpnConfigServiceServer) GetAll(*AWSVpnConfigStreamRequest, AWSVpnConfigService_GetAllServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (*UnimplementedAWSVpnConfigServiceServer) Subscribe(*AWSVpnConfigStreamRequest, AWSVpnConfigService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedAWSVpnConfigServiceServer) Set(context.Context, *AWSVpnConfigSetRequest) (*AWSVpnConfigSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedAWSVpnConfigServiceServer) Delete(context.Context, *AWSVpnConfigDeleteRequest) (*AWSVpnConfigDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterAWSVpnConfigServiceServer(s *grpc.Server, srv AWSVpnConfigServiceServer) {
	s.RegisterService(&_AWSVpnConfigService_serviceDesc, srv)
}

func _AWSVpnConfigService_GetOne_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSVpnConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSVpnConfigServiceServer).GetOne(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.clouddeploy.v1.AWSVpnConfigService/GetOne",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSVpnConfigServiceServer).GetOne(ctx, req.(*AWSVpnConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AWSVpnConfigService_GetAll_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AWSVpnConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AWSVpnConfigServiceServer).GetAll(m, &aWSVpnConfigServiceGetAllServer{stream})
}

type AWSVpnConfigService_GetAllServer interface {
	Send(*AWSVpnConfigStreamResponse) error
	grpc.ServerStream
}

type aWSVpnConfigServiceGetAllServer struct {
	grpc.ServerStream
}

func (x *aWSVpnConfigServiceGetAllServer) Send(m *AWSVpnConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AWSVpnConfigService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AWSVpnConfigStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AWSVpnConfigServiceServer).Subscribe(m, &aWSVpnConfigServiceSubscribeServer{stream})
}

type AWSVpnConfigService_SubscribeServer interface {
	Send(*AWSVpnConfigStreamResponse) error
	grpc.ServerStream
}

type aWSVpnConfigServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *aWSVpnConfigServiceSubscribeServer) Send(m *AWSVpnConfigStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _AWSVpnConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSVpnConfigSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSVpnConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.clouddeploy.v1.AWSVpnConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSVpnConfigServiceServer).Set(ctx, req.(*AWSVpnConfigSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AWSVpnConfigService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AWSVpnConfigDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AWSVpnConfigServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/arista.clouddeploy.v1.AWSVpnConfigService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AWSVpnConfigServiceServer).Delete(ctx, req.(*AWSVpnConfigDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AWSVpnConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "arista.clouddeploy.v1.AWSVpnConfigService",
	HandlerType: (*AWSVpnConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetOne",
			Handler:    _AWSVpnConfigService_GetOne_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _AWSVpnConfigService_Set_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AWSVpnConfigService_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAll",
			Handler:       _AWSVpnConfigService_GetAll_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _AWSVpnConfigService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "arista/clouddeploy.v1/services.gen.proto",
}
