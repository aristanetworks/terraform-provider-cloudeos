// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.3
// source: arista/clouddeploy.v1/clouddeploy.proto

package clouddeploy_v1

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	fmp "github.com/terraform-providers/terraform-provider-cloudeos/cloudeos/internal/fmp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IpsecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IkeIntegrity    *wrappers.StringValue `protobuf:"bytes,1,opt,name=ike_integrity,json=ikeIntegrity,proto3" json:"ike_integrity,omitempty"`
	IkeEncryption   *wrappers.StringValue `protobuf:"bytes,2,opt,name=ike_encryption,json=ikeEncryption,proto3" json:"ike_encryption,omitempty"`
	IkeLifetime     *wrappers.StringValue `protobuf:"bytes,3,opt,name=ike_lifetime,json=ikeLifetime,proto3" json:"ike_lifetime,omitempty"`
	IkePfs          *wrappers.StringValue `protobuf:"bytes,4,opt,name=ike_pfs,json=ikePfs,proto3" json:"ike_pfs,omitempty"`
	IkePresharedKey *wrappers.StringValue `protobuf:"bytes,5,opt,name=ike_preshared_key,json=ikePresharedKey,proto3" json:"ike_preshared_key,omitempty"`
	IpsecIntegrity  *wrappers.StringValue `protobuf:"bytes,6,opt,name=ipsec_integrity,json=ipsecIntegrity,proto3" json:"ipsec_integrity,omitempty"`
	IpsecEncryption *wrappers.StringValue `protobuf:"bytes,7,opt,name=ipsec_encryption,json=ipsecEncryption,proto3" json:"ipsec_encryption,omitempty"`
	IpsecPfs        *wrappers.StringValue `protobuf:"bytes,8,opt,name=ipsec_pfs,json=ipsecPfs,proto3" json:"ipsec_pfs,omitempty"`
	IpsecMode       *wrappers.StringValue `protobuf:"bytes,9,opt,name=ipsec_mode,json=ipsecMode,proto3" json:"ipsec_mode,omitempty"`
	DpdInterval     *wrappers.StringValue `protobuf:"bytes,10,opt,name=dpd_interval,json=dpdInterval,proto3" json:"dpd_interval,omitempty"`
	DpdRetries      *wrappers.StringValue `protobuf:"bytes,11,opt,name=dpd_retries,json=dpdRetries,proto3" json:"dpd_retries,omitempty"`
}

func (x *IpsecInfo) Reset() {
	*x = IpsecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IpsecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IpsecInfo) ProtoMessage() {}

func (x *IpsecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IpsecInfo.ProtoReflect.Descriptor instead.
func (*IpsecInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{0}
}

func (x *IpsecInfo) GetIkeIntegrity() *wrappers.StringValue {
	if x != nil {
		return x.IkeIntegrity
	}
	return nil
}

func (x *IpsecInfo) GetIkeEncryption() *wrappers.StringValue {
	if x != nil {
		return x.IkeEncryption
	}
	return nil
}

func (x *IpsecInfo) GetIkeLifetime() *wrappers.StringValue {
	if x != nil {
		return x.IkeLifetime
	}
	return nil
}

func (x *IpsecInfo) GetIkePfs() *wrappers.StringValue {
	if x != nil {
		return x.IkePfs
	}
	return nil
}

func (x *IpsecInfo) GetIkePresharedKey() *wrappers.StringValue {
	if x != nil {
		return x.IkePresharedKey
	}
	return nil
}

func (x *IpsecInfo) GetIpsecIntegrity() *wrappers.StringValue {
	if x != nil {
		return x.IpsecIntegrity
	}
	return nil
}

func (x *IpsecInfo) GetIpsecEncryption() *wrappers.StringValue {
	if x != nil {
		return x.IpsecEncryption
	}
	return nil
}

func (x *IpsecInfo) GetIpsecPfs() *wrappers.StringValue {
	if x != nil {
		return x.IpsecPfs
	}
	return nil
}

func (x *IpsecInfo) GetIpsecMode() *wrappers.StringValue {
	if x != nil {
		return x.IpsecMode
	}
	return nil
}

func (x *IpsecInfo) GetDpdInterval() *wrappers.StringValue {
	if x != nil {
		return x.DpdInterval
	}
	return nil
}

func (x *IpsecInfo) GetDpdRetries() *wrappers.StringValue {
	if x != nil {
		return x.DpdRetries
	}
	return nil
}

type TunnelInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelAwsEndpointIp   *fmp.IPAddress        `protobuf:"bytes,1,opt,name=tunnel_aws_endpoint_ip,json=tunnelAwsEndpointIp,proto3" json:"tunnel_aws_endpoint_ip,omitempty"`
	TunnelBgpAsn          *wrappers.StringValue `protobuf:"bytes,2,opt,name=tunnel_bgp_asn,json=tunnelBgpAsn,proto3" json:"tunnel_bgp_asn,omitempty"`
	TunnelRouterOverlayIp *fmp.IPAddress        `protobuf:"bytes,3,opt,name=tunnel_router_overlay_ip,json=tunnelRouterOverlayIp,proto3" json:"tunnel_router_overlay_ip,omitempty"`
	TunnelAwsOverlayIp    *fmp.IPAddress        `protobuf:"bytes,4,opt,name=tunnel_aws_overlay_ip,json=tunnelAwsOverlayIp,proto3" json:"tunnel_aws_overlay_ip,omitempty"`
	TunnelBgpHoldtime     *wrappers.StringValue `protobuf:"bytes,5,opt,name=tunnel_bgp_holdtime,json=tunnelBgpHoldtime,proto3" json:"tunnel_bgp_holdtime,omitempty"`
	TunnelPresharedKey    *wrappers.StringValue `protobuf:"bytes,6,opt,name=tunnel_preshared_key,json=tunnelPresharedKey,proto3" json:"tunnel_preshared_key,omitempty"`
	IpsecInfo             *IpsecInfo            `protobuf:"bytes,7,opt,name=ipsec_info,json=ipsecInfo,proto3" json:"ipsec_info,omitempty"`
}

func (x *TunnelInfo) Reset() {
	*x = TunnelInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInfo) ProtoMessage() {}

func (x *TunnelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInfo.ProtoReflect.Descriptor instead.
func (*TunnelInfo) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{1}
}

func (x *TunnelInfo) GetTunnelAwsEndpointIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelAwsEndpointIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelBgpAsn() *wrappers.StringValue {
	if x != nil {
		return x.TunnelBgpAsn
	}
	return nil
}

func (x *TunnelInfo) GetTunnelRouterOverlayIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelRouterOverlayIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelAwsOverlayIp() *fmp.IPAddress {
	if x != nil {
		return x.TunnelAwsOverlayIp
	}
	return nil
}

func (x *TunnelInfo) GetTunnelBgpHoldtime() *wrappers.StringValue {
	if x != nil {
		return x.TunnelBgpHoldtime
	}
	return nil
}

func (x *TunnelInfo) GetTunnelPresharedKey() *wrappers.StringValue {
	if x != nil {
		return x.TunnelPresharedKey
	}
	return nil
}

func (x *TunnelInfo) GetIpsecInfo() *IpsecInfo {
	if x != nil {
		return x.IpsecInfo
	}
	return nil
}

type TunnelInfoList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TunnelInfo []*TunnelInfo `protobuf:"bytes,1,rep,name=tunnel_info,json=tunnelInfo,proto3" json:"tunnel_info,omitempty"`
}

func (x *TunnelInfoList) Reset() {
	*x = TunnelInfoList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelInfoList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelInfoList) ProtoMessage() {}

func (x *TunnelInfoList) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelInfoList.ProtoReflect.Descriptor instead.
func (*TunnelInfoList) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{2}
}

func (x *TunnelInfoList) GetTunnelInfo() []*TunnelInfo {
	if x != nil {
		return x.TunnelInfo
	}
	return nil
}

type AWSVpnConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key                *AWSVpnKey            `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	TgwId              *wrappers.StringValue `protobuf:"bytes,2,opt,name=tgw_id,json=tgwId,proto3" json:"tgw_id,omitempty"`
	VpnConnectionId    *wrappers.StringValue `protobuf:"bytes,3,opt,name=vpn_connection_id,json=vpnConnectionId,proto3" json:"vpn_connection_id,omitempty"`
	CgwId              *wrappers.StringValue `protobuf:"bytes,4,opt,name=cgw_id,json=cgwId,proto3" json:"cgw_id,omitempty"`
	CloudeosRouterId   *wrappers.StringValue `protobuf:"bytes,5,opt,name=cloudeos_router_id,json=cloudeosRouterId,proto3" json:"cloudeos_router_id,omitempty"`
	CloudeosVpcId      *wrappers.StringValue `protobuf:"bytes,6,opt,name=cloudeos_vpc_id,json=cloudeosVpcId,proto3" json:"cloudeos_vpc_id,omitempty"`
	VpnTgwAttachmentId *wrappers.StringValue `protobuf:"bytes,7,opt,name=vpn_tgw_attachment_id,json=vpnTgwAttachmentId,proto3" json:"vpn_tgw_attachment_id,omitempty"`
	TunnelInfoList     *TunnelInfoList       `protobuf:"bytes,8,opt,name=tunnel_info_list,json=tunnelInfoList,proto3" json:"tunnel_info_list,omitempty"`
	Cnps               *wrappers.StringValue `protobuf:"bytes,9,opt,name=cnps,proto3" json:"cnps,omitempty"`
	VpnGatewayId       *wrappers.StringValue `protobuf:"bytes,10,opt,name=vpn_gateway_id,json=vpnGatewayId,proto3" json:"vpn_gateway_id,omitempty"`
}

func (x *AWSVpnConfig) Reset() {
	*x = AWSVpnConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnConfig) ProtoMessage() {}

func (x *AWSVpnConfig) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnConfig.ProtoReflect.Descriptor instead.
func (*AWSVpnConfig) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{3}
}

func (x *AWSVpnConfig) GetKey() *AWSVpnKey {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AWSVpnConfig) GetTgwId() *wrappers.StringValue {
	if x != nil {
		return x.TgwId
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnConnectionId() *wrappers.StringValue {
	if x != nil {
		return x.VpnConnectionId
	}
	return nil
}

func (x *AWSVpnConfig) GetCgwId() *wrappers.StringValue {
	if x != nil {
		return x.CgwId
	}
	return nil
}

func (x *AWSVpnConfig) GetCloudeosRouterId() *wrappers.StringValue {
	if x != nil {
		return x.CloudeosRouterId
	}
	return nil
}

func (x *AWSVpnConfig) GetCloudeosVpcId() *wrappers.StringValue {
	if x != nil {
		return x.CloudeosVpcId
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnTgwAttachmentId() *wrappers.StringValue {
	if x != nil {
		return x.VpnTgwAttachmentId
	}
	return nil
}

func (x *AWSVpnConfig) GetTunnelInfoList() *TunnelInfoList {
	if x != nil {
		return x.TunnelInfoList
	}
	return nil
}

func (x *AWSVpnConfig) GetCnps() *wrappers.StringValue {
	if x != nil {
		return x.Cnps
	}
	return nil
}

func (x *AWSVpnConfig) GetVpnGatewayId() *wrappers.StringValue {
	if x != nil {
		return x.VpnGatewayId
	}
	return nil
}

type AWSVpnKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TfId *wrappers.StringValue `protobuf:"bytes,1,opt,name=tf_id,json=tfId,proto3" json:"tf_id,omitempty"`
}

func (x *AWSVpnKey) Reset() {
	*x = AWSVpnKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWSVpnKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWSVpnKey) ProtoMessage() {}

func (x *AWSVpnKey) ProtoReflect() protoreflect.Message {
	mi := &file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWSVpnKey.ProtoReflect.Descriptor instead.
func (*AWSVpnKey) Descriptor() ([]byte, []int) {
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP(), []int{4}
}

func (x *AWSVpnKey) GetTfId() *wrappers.StringValue {
	if x != nil {
		return x.TfId
	}
	return nil
}

var File_arista_clouddeploy_v1_clouddeploy_proto protoreflect.FileDescriptor

var file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc = []byte{
	0x0a, 0x27, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x61, 0x72, 0x69, 0x73, 0x74,
	0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x14, 0x66, 0x6d, 0x70, 0x2f, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0e, 0x66, 0x6d, 0x70, 0x2f, 0x69, 0x6e, 0x65, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdd, 0x05, 0x0a, 0x09, 0x49, 0x70, 0x73, 0x65, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x0d, 0x69, 0x6b, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x69, 0x6b, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x69, 0x6b, 0x65, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x69,
	0x6b, 0x65, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c,
	0x69, 0x6b, 0x65, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x69, 0x6b, 0x65, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x07, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x66, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x69, 0x6b,
	0x65, 0x50, 0x66, 0x73, 0x12, 0x48, 0x0a, 0x11, 0x69, 0x6b, 0x65, 0x5f, 0x70, 0x72, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69,
	0x6b, 0x65, 0x50, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x45,
	0x0a, 0x0f, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x69, 0x70, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x74, 0x65,
	0x67, 0x72, 0x69, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x69,
	0x70, 0x73, 0x65, 0x63, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39,
	0x0a, 0x09, 0x69, 0x70, 0x73, 0x65, 0x63, 0x5f, 0x70, 0x66, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x69, 0x70, 0x73, 0x65, 0x63, 0x50, 0x66, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x69, 0x70, 0x73,
	0x65, 0x63, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x64, 0x70, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64, 0x70, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x64, 0x70, 0x64, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x70, 0x64, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0x80, 0x04, 0x0a, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x43, 0x0a, 0x16, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x61, 0x77, 0x73, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x13, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x77, 0x73,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x42, 0x0a, 0x0e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x61, 0x73, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x67, 0x70, 0x41, 0x73, 0x6e, 0x12, 0x47,
	0x0a, 0x18, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x70, 0x12, 0x41, 0x0a, 0x15, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x61, 0x77, 0x73, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x5f, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x49, 0x50, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x41, 0x77,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x49, 0x70, 0x12, 0x4c, 0x0a, 0x13, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x62, 0x67, 0x70, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x67, 0x70,
	0x48, 0x6f, 0x6c, 0x64, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x74, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x70, 0x72, 0x65, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x72, 0x65, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x3f, 0x0a, 0x0a, 0x69, 0x70, 0x73, 0x65,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09,
	0x69, 0x70, 0x73, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a, 0x0e, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0b, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x22,
	0xa8, 0x05, 0x0a, 0x0c, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x32, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x57, 0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x74, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x74, 0x67, 0x77, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x11, 0x76, 0x70, 0x6e,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0f, 0x76, 0x70, 0x6e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x67, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x05, 0x63, 0x67, 0x77, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x12, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x65, 0x6f, 0x73, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x44, 0x0a, 0x0f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x65, 0x6f, 0x73,
	0x5f, 0x76, 0x70, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x65, 0x6f, 0x73, 0x56, 0x70, 0x63, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x15, 0x76, 0x70,
	0x6e, 0x5f, 0x74, 0x67, 0x77, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x76, 0x70, 0x6e, 0x54, 0x67, 0x77, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x10, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0e, 0x74, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x04,
	0x63, 0x6e, 0x70, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x63, 0x6e, 0x70, 0x73, 0x12, 0x42,
	0x0a, 0x0e, 0x76, 0x70, 0x6e, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x76, 0x70, 0x6e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79,
	0x49, 0x64, 0x3a, 0x06, 0xfa, 0x8d, 0x19, 0x02, 0x72, 0x77, 0x22, 0x44, 0x0a, 0x09, 0x41, 0x57,
	0x53, 0x56, 0x70, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x74, 0x66, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x74, 0x66, 0x49, 0x64, 0x3a, 0x04, 0x80, 0x8e, 0x19, 0x01,
	0x42, 0x37, 0x5a, 0x35, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2f, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x2e, 0x76, 0x31, 0x3b, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescOnce sync.Once
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData = file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc
)

func file_arista_clouddeploy_v1_clouddeploy_proto_rawDescGZIP() []byte {
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDescOnce.Do(func() {
		file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData = protoimpl.X.CompressGZIP(file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData)
	})
	return file_arista_clouddeploy_v1_clouddeploy_proto_rawDescData
}

var file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_arista_clouddeploy_v1_clouddeploy_proto_goTypes = []interface{}{
	(*IpsecInfo)(nil),            // 0: arista.clouddeploy.v1.IpsecInfo
	(*TunnelInfo)(nil),           // 1: arista.clouddeploy.v1.TunnelInfo
	(*TunnelInfoList)(nil),       // 2: arista.clouddeploy.v1.TunnelInfoList
	(*AWSVpnConfig)(nil),         // 3: arista.clouddeploy.v1.AWSVpnConfig
	(*AWSVpnKey)(nil),            // 4: arista.clouddeploy.v1.AWSVpnKey
	(*wrappers.StringValue)(nil), // 5: google.protobuf.StringValue
	(*fmp.IPAddress)(nil),        // 6: fmp.IPAddress
}
var file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs = []int32{
	5,  // 0: arista.clouddeploy.v1.IpsecInfo.ike_integrity:type_name -> google.protobuf.StringValue
	5,  // 1: arista.clouddeploy.v1.IpsecInfo.ike_encryption:type_name -> google.protobuf.StringValue
	5,  // 2: arista.clouddeploy.v1.IpsecInfo.ike_lifetime:type_name -> google.protobuf.StringValue
	5,  // 3: arista.clouddeploy.v1.IpsecInfo.ike_pfs:type_name -> google.protobuf.StringValue
	5,  // 4: arista.clouddeploy.v1.IpsecInfo.ike_preshared_key:type_name -> google.protobuf.StringValue
	5,  // 5: arista.clouddeploy.v1.IpsecInfo.ipsec_integrity:type_name -> google.protobuf.StringValue
	5,  // 6: arista.clouddeploy.v1.IpsecInfo.ipsec_encryption:type_name -> google.protobuf.StringValue
	5,  // 7: arista.clouddeploy.v1.IpsecInfo.ipsec_pfs:type_name -> google.protobuf.StringValue
	5,  // 8: arista.clouddeploy.v1.IpsecInfo.ipsec_mode:type_name -> google.protobuf.StringValue
	5,  // 9: arista.clouddeploy.v1.IpsecInfo.dpd_interval:type_name -> google.protobuf.StringValue
	5,  // 10: arista.clouddeploy.v1.IpsecInfo.dpd_retries:type_name -> google.protobuf.StringValue
	6,  // 11: arista.clouddeploy.v1.TunnelInfo.tunnel_aws_endpoint_ip:type_name -> fmp.IPAddress
	5,  // 12: arista.clouddeploy.v1.TunnelInfo.tunnel_bgp_asn:type_name -> google.protobuf.StringValue
	6,  // 13: arista.clouddeploy.v1.TunnelInfo.tunnel_router_overlay_ip:type_name -> fmp.IPAddress
	6,  // 14: arista.clouddeploy.v1.TunnelInfo.tunnel_aws_overlay_ip:type_name -> fmp.IPAddress
	5,  // 15: arista.clouddeploy.v1.TunnelInfo.tunnel_bgp_holdtime:type_name -> google.protobuf.StringValue
	5,  // 16: arista.clouddeploy.v1.TunnelInfo.tunnel_preshared_key:type_name -> google.protobuf.StringValue
	0,  // 17: arista.clouddeploy.v1.TunnelInfo.ipsec_info:type_name -> arista.clouddeploy.v1.IpsecInfo
	1,  // 18: arista.clouddeploy.v1.TunnelInfoList.tunnel_info:type_name -> arista.clouddeploy.v1.TunnelInfo
	4,  // 19: arista.clouddeploy.v1.AWSVpnConfig.key:type_name -> arista.clouddeploy.v1.AWSVpnKey
	5,  // 20: arista.clouddeploy.v1.AWSVpnConfig.tgw_id:type_name -> google.protobuf.StringValue
	5,  // 21: arista.clouddeploy.v1.AWSVpnConfig.vpn_connection_id:type_name -> google.protobuf.StringValue
	5,  // 22: arista.clouddeploy.v1.AWSVpnConfig.cgw_id:type_name -> google.protobuf.StringValue
	5,  // 23: arista.clouddeploy.v1.AWSVpnConfig.cloudeos_router_id:type_name -> google.protobuf.StringValue
	5,  // 24: arista.clouddeploy.v1.AWSVpnConfig.cloudeos_vpc_id:type_name -> google.protobuf.StringValue
	5,  // 25: arista.clouddeploy.v1.AWSVpnConfig.vpn_tgw_attachment_id:type_name -> google.protobuf.StringValue
	2,  // 26: arista.clouddeploy.v1.AWSVpnConfig.tunnel_info_list:type_name -> arista.clouddeploy.v1.TunnelInfoList
	5,  // 27: arista.clouddeploy.v1.AWSVpnConfig.cnps:type_name -> google.protobuf.StringValue
	5,  // 28: arista.clouddeploy.v1.AWSVpnConfig.vpn_gateway_id:type_name -> google.protobuf.StringValue
	5,  // 29: arista.clouddeploy.v1.AWSVpnKey.tf_id:type_name -> google.protobuf.StringValue
	30, // [30:30] is the sub-list for method output_type
	30, // [30:30] is the sub-list for method input_type
	30, // [30:30] is the sub-list for extension type_name
	30, // [30:30] is the sub-list for extension extendee
	0,  // [0:30] is the sub-list for field type_name
}

func init() { file_arista_clouddeploy_v1_clouddeploy_proto_init() }
func file_arista_clouddeploy_v1_clouddeploy_proto_init() {
	if File_arista_clouddeploy_v1_clouddeploy_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IpsecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelInfoList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWSVpnKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_arista_clouddeploy_v1_clouddeploy_proto_goTypes,
		DependencyIndexes: file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs,
		MessageInfos:      file_arista_clouddeploy_v1_clouddeploy_proto_msgTypes,
	}.Build()
	File_arista_clouddeploy_v1_clouddeploy_proto = out.File
	file_arista_clouddeploy_v1_clouddeploy_proto_rawDesc = nil
	file_arista_clouddeploy_v1_clouddeploy_proto_goTypes = nil
	file_arista_clouddeploy_v1_clouddeploy_proto_depIdxs = nil
}
