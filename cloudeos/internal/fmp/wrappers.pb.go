// Copyright (c) 2020 Arista Networks, Inc.
// Use of this source code is governed by the Mozilla Public License Version 2.0
// that can be found in the LICENSE file.

// Nilable wrapper messages for repeated scalar types

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.12.1
// source: fmp/wrappers.proto

package fmp

import (
	reflect "reflect"
	sync "sync"

	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Wrapper message for `repeated double`.
type RepeatedDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated double value.
	Value []float64 `protobuf:"fixed64,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedDouble) Reset() {
	*x = RepeatedDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedDouble) ProtoMessage() {}

func (x *RepeatedDouble) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedDouble.ProtoReflect.Descriptor instead.
func (*RepeatedDouble) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{0}
}

func (x *RepeatedDouble) GetValue() []float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated float`.
type RepeatedFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated float value.
	Value []float32 `protobuf:"fixed32,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedFloat) Reset() {
	*x = RepeatedFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedFloat) ProtoMessage() {}

func (x *RepeatedFloat) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedFloat.ProtoReflect.Descriptor instead.
func (*RepeatedFloat) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{1}
}

func (x *RepeatedFloat) GetValue() []float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated int64`.
type RepeatedInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated int64 value.
	Value []int64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedInt64) Reset() {
	*x = RepeatedInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedInt64) ProtoMessage() {}

func (x *RepeatedInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedInt64.ProtoReflect.Descriptor instead.
func (*RepeatedInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{2}
}

func (x *RepeatedInt64) GetValue() []int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated uint64`.
type RepeatedUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated uint64 value.
	Value []uint64 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedUInt64) Reset() {
	*x = RepeatedUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedUInt64) ProtoMessage() {}

func (x *RepeatedUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedUInt64.ProtoReflect.Descriptor instead.
func (*RepeatedUInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{3}
}

func (x *RepeatedUInt64) GetValue() []uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated int32`.
type RepeatedInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated int32 value.
	Value []int32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedInt32) Reset() {
	*x = RepeatedInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedInt32) ProtoMessage() {}

func (x *RepeatedInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedInt32.ProtoReflect.Descriptor instead.
func (*RepeatedInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{4}
}

func (x *RepeatedInt32) GetValue() []int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated uint32`.
type RepeatedUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated uint32 value.
	Value []uint32 `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedUInt32) Reset() {
	*x = RepeatedUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedUInt32) ProtoMessage() {}

func (x *RepeatedUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedUInt32.ProtoReflect.Descriptor instead.
func (*RepeatedUInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{5}
}

func (x *RepeatedUInt32) GetValue() []uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated bool`.
type RepeatedBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated bool value.
	Value []bool `protobuf:"varint,1,rep,packed,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedBool) Reset() {
	*x = RepeatedBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBool) ProtoMessage() {}

func (x *RepeatedBool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBool.ProtoReflect.Descriptor instead.
func (*RepeatedBool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{6}
}

func (x *RepeatedBool) GetValue() []bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated string`.
type RepeatedString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated string value.
	Value []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedString) Reset() {
	*x = RepeatedString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedString) ProtoMessage() {}

func (x *RepeatedString) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedString.ProtoReflect.Descriptor instead.
func (*RepeatedString) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{7}
}

func (x *RepeatedString) GetValue() []string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `repeated bytes`.
type RepeatedBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The repeated bytes value.
	Value [][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
}

func (x *RepeatedBytes) Reset() {
	*x = RepeatedBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepeatedBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedBytes) ProtoMessage() {}

func (x *RepeatedBytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedBytes.ProtoReflect.Descriptor instead.
func (*RepeatedBytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{8}
}

func (x *RepeatedBytes) GetValue() [][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, double>`.
type MapInt64Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, double> value.
	Value map[int64]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapInt64Double) Reset() {
	*x = MapInt64Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Double) ProtoMessage() {}

func (x *MapInt64Double) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Double.ProtoReflect.Descriptor instead.
func (*MapInt64Double) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{9}
}

func (x *MapInt64Double) GetValue() map[int64]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, float>`.
type MapInt64Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, float> value.
	Value map[int64]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapInt64Float) Reset() {
	*x = MapInt64Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Float) ProtoMessage() {}

func (x *MapInt64Float) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Float.ProtoReflect.Descriptor instead.
func (*MapInt64Float) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{10}
}

func (x *MapInt64Float) GetValue() map[int64]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, int64>`.
type MapInt64Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, int64> value.
	Value map[int64]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64Int64) Reset() {
	*x = MapInt64Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Int64) ProtoMessage() {}

func (x *MapInt64Int64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Int64.ProtoReflect.Descriptor instead.
func (*MapInt64Int64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{11}
}

func (x *MapInt64Int64) GetValue() map[int64]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, uint64>`.
type MapInt64UInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, uint64> value.
	Value map[int64]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64UInt64) Reset() {
	*x = MapInt64UInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64UInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64UInt64) ProtoMessage() {}

func (x *MapInt64UInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64UInt64.ProtoReflect.Descriptor instead.
func (*MapInt64UInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{12}
}

func (x *MapInt64UInt64) GetValue() map[int64]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, int32>`.
type MapInt64Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, int32> value.
	Value map[int64]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64Int32) Reset() {
	*x = MapInt64Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Int32) ProtoMessage() {}

func (x *MapInt64Int32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Int32.ProtoReflect.Descriptor instead.
func (*MapInt64Int32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{13}
}

func (x *MapInt64Int32) GetValue() map[int64]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, uint32>`.
type MapInt64UInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, uint32> value.
	Value map[int64]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64UInt32) Reset() {
	*x = MapInt64UInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64UInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64UInt32) ProtoMessage() {}

func (x *MapInt64UInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64UInt32.ProtoReflect.Descriptor instead.
func (*MapInt64UInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{14}
}

func (x *MapInt64UInt32) GetValue() map[int64]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, bool>`.
type MapInt64Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, bool> value.
	Value map[int64]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64Bool) Reset() {
	*x = MapInt64Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Bool) ProtoMessage() {}

func (x *MapInt64Bool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Bool.ProtoReflect.Descriptor instead.
func (*MapInt64Bool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{15}
}

func (x *MapInt64Bool) GetValue() map[int64]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, string>`.
type MapInt64String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, string> value.
	Value map[int64]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapInt64String) Reset() {
	*x = MapInt64String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64String) ProtoMessage() {}

func (x *MapInt64String) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64String.ProtoReflect.Descriptor instead.
func (*MapInt64String) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{16}
}

func (x *MapInt64String) GetValue() map[int64]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int64, bytes>`.
type MapInt64Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int64, bytes> value.
	Value map[int64][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapInt64Bytes) Reset() {
	*x = MapInt64Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt64Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Bytes) ProtoMessage() {}

func (x *MapInt64Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Bytes.ProtoReflect.Descriptor instead.
func (*MapInt64Bytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{17}
}

func (x *MapInt64Bytes) GetValue() map[int64][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, double>`.
type MapUInt64Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, double> value.
	Value map[uint64]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapUInt64Double) Reset() {
	*x = MapUInt64Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Double) ProtoMessage() {}

func (x *MapUInt64Double) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Double.ProtoReflect.Descriptor instead.
func (*MapUInt64Double) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{18}
}

func (x *MapUInt64Double) GetValue() map[uint64]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, float>`.
type MapUInt64Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, float> value.
	Value map[uint64]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapUInt64Float) Reset() {
	*x = MapUInt64Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Float) ProtoMessage() {}

func (x *MapUInt64Float) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Float.ProtoReflect.Descriptor instead.
func (*MapUInt64Float) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{19}
}

func (x *MapUInt64Float) GetValue() map[uint64]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, int64>`.
type MapUInt64Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, int64> value.
	Value map[uint64]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt64Int64) Reset() {
	*x = MapUInt64Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Int64) ProtoMessage() {}

func (x *MapUInt64Int64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Int64.ProtoReflect.Descriptor instead.
func (*MapUInt64Int64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{20}
}

func (x *MapUInt64Int64) GetValue() map[uint64]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, uint64>`.
type MapUInt64UInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, uint64> value.
	Value map[uint64]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt64UInt64) Reset() {
	*x = MapUInt64UInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64UInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64UInt64) ProtoMessage() {}

func (x *MapUInt64UInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64UInt64.ProtoReflect.Descriptor instead.
func (*MapUInt64UInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{21}
}

func (x *MapUInt64UInt64) GetValue() map[uint64]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, int32>`.
type MapUInt64Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, int32> value.
	Value map[uint64]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt64Int32) Reset() {
	*x = MapUInt64Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Int32) ProtoMessage() {}

func (x *MapUInt64Int32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Int32.ProtoReflect.Descriptor instead.
func (*MapUInt64Int32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{22}
}

func (x *MapUInt64Int32) GetValue() map[uint64]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, uint32>`.
type MapUInt64UInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, uint32> value.
	Value map[uint64]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt64UInt32) Reset() {
	*x = MapUInt64UInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64UInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64UInt32) ProtoMessage() {}

func (x *MapUInt64UInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64UInt32.ProtoReflect.Descriptor instead.
func (*MapUInt64UInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{23}
}

func (x *MapUInt64UInt32) GetValue() map[uint64]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, bool>`.
type MapUInt64Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, bool> value.
	Value map[uint64]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt64Bool) Reset() {
	*x = MapUInt64Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Bool) ProtoMessage() {}

func (x *MapUInt64Bool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Bool.ProtoReflect.Descriptor instead.
func (*MapUInt64Bool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{24}
}

func (x *MapUInt64Bool) GetValue() map[uint64]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, string>`.
type MapUInt64String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, string> value.
	Value map[uint64]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapUInt64String) Reset() {
	*x = MapUInt64String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64String) ProtoMessage() {}

func (x *MapUInt64String) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64String.ProtoReflect.Descriptor instead.
func (*MapUInt64String) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{25}
}

func (x *MapUInt64String) GetValue() map[uint64]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint64, bytes>`.
type MapUInt64Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint64, bytes> value.
	Value map[uint64][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapUInt64Bytes) Reset() {
	*x = MapUInt64Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt64Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt64Bytes) ProtoMessage() {}

func (x *MapUInt64Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt64Bytes.ProtoReflect.Descriptor instead.
func (*MapUInt64Bytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{26}
}

func (x *MapUInt64Bytes) GetValue() map[uint64][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, double>`.
type MapInt32Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, double> value.
	Value map[int32]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapInt32Double) Reset() {
	*x = MapInt32Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Double) ProtoMessage() {}

func (x *MapInt32Double) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Double.ProtoReflect.Descriptor instead.
func (*MapInt32Double) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{27}
}

func (x *MapInt32Double) GetValue() map[int32]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, float>`.
type MapInt32Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, float> value.
	Value map[int32]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapInt32Float) Reset() {
	*x = MapInt32Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Float) ProtoMessage() {}

func (x *MapInt32Float) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Float.ProtoReflect.Descriptor instead.
func (*MapInt32Float) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{28}
}

func (x *MapInt32Float) GetValue() map[int32]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, int64>`.
type MapInt32Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, int64> value.
	Value map[int32]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt32Int64) Reset() {
	*x = MapInt32Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Int64) ProtoMessage() {}

func (x *MapInt32Int64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Int64.ProtoReflect.Descriptor instead.
func (*MapInt32Int64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{29}
}

func (x *MapInt32Int64) GetValue() map[int32]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, uint64>`.
type MapInt32UInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, uint64> value.
	Value map[int32]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt32UInt64) Reset() {
	*x = MapInt32UInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32UInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32UInt64) ProtoMessage() {}

func (x *MapInt32UInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32UInt64.ProtoReflect.Descriptor instead.
func (*MapInt32UInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{30}
}

func (x *MapInt32UInt64) GetValue() map[int32]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, int32>`.
type MapInt32Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, int32> value.
	Value map[int32]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt32Int32) Reset() {
	*x = MapInt32Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Int32) ProtoMessage() {}

func (x *MapInt32Int32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Int32.ProtoReflect.Descriptor instead.
func (*MapInt32Int32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{31}
}

func (x *MapInt32Int32) GetValue() map[int32]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, uint32>`.
type MapInt32UInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, uint32> value.
	Value map[int32]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt32UInt32) Reset() {
	*x = MapInt32UInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32UInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32UInt32) ProtoMessage() {}

func (x *MapInt32UInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32UInt32.ProtoReflect.Descriptor instead.
func (*MapInt32UInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{32}
}

func (x *MapInt32UInt32) GetValue() map[int32]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, bool>`.
type MapInt32Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, bool> value.
	Value map[int32]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt32Bool) Reset() {
	*x = MapInt32Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Bool) ProtoMessage() {}

func (x *MapInt32Bool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Bool.ProtoReflect.Descriptor instead.
func (*MapInt32Bool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{33}
}

func (x *MapInt32Bool) GetValue() map[int32]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, string>`.
type MapInt32String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, string> value.
	Value map[int32]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapInt32String) Reset() {
	*x = MapInt32String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32String) ProtoMessage() {}

func (x *MapInt32String) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32String.ProtoReflect.Descriptor instead.
func (*MapInt32String) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{34}
}

func (x *MapInt32String) GetValue() map[int32]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<int32, bytes>`.
type MapInt32Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<int32, bytes> value.
	Value map[int32][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapInt32Bytes) Reset() {
	*x = MapInt32Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapInt32Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt32Bytes) ProtoMessage() {}

func (x *MapInt32Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt32Bytes.ProtoReflect.Descriptor instead.
func (*MapInt32Bytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{35}
}

func (x *MapInt32Bytes) GetValue() map[int32][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, double>`.
type MapUInt32Double struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, double> value.
	Value map[uint32]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapUInt32Double) Reset() {
	*x = MapUInt32Double{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Double) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Double) ProtoMessage() {}

func (x *MapUInt32Double) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Double.ProtoReflect.Descriptor instead.
func (*MapUInt32Double) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{36}
}

func (x *MapUInt32Double) GetValue() map[uint32]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, float>`.
type MapUInt32Float struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, float> value.
	Value map[uint32]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapUInt32Float) Reset() {
	*x = MapUInt32Float{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Float) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Float) ProtoMessage() {}

func (x *MapUInt32Float) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Float.ProtoReflect.Descriptor instead.
func (*MapUInt32Float) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{37}
}

func (x *MapUInt32Float) GetValue() map[uint32]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, int64>`.
type MapUInt32Int64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, int64> value.
	Value map[uint32]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt32Int64) Reset() {
	*x = MapUInt32Int64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Int64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Int64) ProtoMessage() {}

func (x *MapUInt32Int64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Int64.ProtoReflect.Descriptor instead.
func (*MapUInt32Int64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{38}
}

func (x *MapUInt32Int64) GetValue() map[uint32]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, uint64>`.
type MapUInt32UInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, uint64> value.
	Value map[uint32]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt32UInt64) Reset() {
	*x = MapUInt32UInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32UInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32UInt64) ProtoMessage() {}

func (x *MapUInt32UInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32UInt64.ProtoReflect.Descriptor instead.
func (*MapUInt32UInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{39}
}

func (x *MapUInt32UInt64) GetValue() map[uint32]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, int32>`.
type MapUInt32Int32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, int32> value.
	Value map[uint32]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt32Int32) Reset() {
	*x = MapUInt32Int32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Int32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Int32) ProtoMessage() {}

func (x *MapUInt32Int32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Int32.ProtoReflect.Descriptor instead.
func (*MapUInt32Int32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{40}
}

func (x *MapUInt32Int32) GetValue() map[uint32]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, uint32>`.
type MapUInt32UInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, uint32> value.
	Value map[uint32]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt32UInt32) Reset() {
	*x = MapUInt32UInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32UInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32UInt32) ProtoMessage() {}

func (x *MapUInt32UInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32UInt32.ProtoReflect.Descriptor instead.
func (*MapUInt32UInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{41}
}

func (x *MapUInt32UInt32) GetValue() map[uint32]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, bool>`.
type MapUInt32Bool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, bool> value.
	Value map[uint32]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapUInt32Bool) Reset() {
	*x = MapUInt32Bool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Bool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Bool) ProtoMessage() {}

func (x *MapUInt32Bool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Bool.ProtoReflect.Descriptor instead.
func (*MapUInt32Bool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{42}
}

func (x *MapUInt32Bool) GetValue() map[uint32]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, string>`.
type MapUInt32String struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, string> value.
	Value map[uint32]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapUInt32String) Reset() {
	*x = MapUInt32String{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32String) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32String) ProtoMessage() {}

func (x *MapUInt32String) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32String.ProtoReflect.Descriptor instead.
func (*MapUInt32String) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{43}
}

func (x *MapUInt32String) GetValue() map[uint32]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<uint32, bytes>`.
type MapUInt32Bytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<uint32, bytes> value.
	Value map[uint32][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapUInt32Bytes) Reset() {
	*x = MapUInt32Bytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapUInt32Bytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapUInt32Bytes) ProtoMessage() {}

func (x *MapUInt32Bytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapUInt32Bytes.ProtoReflect.Descriptor instead.
func (*MapUInt32Bytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{44}
}

func (x *MapUInt32Bytes) GetValue() map[uint32][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, double>`.
type MapBoolDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, double> value.
	Value map[bool]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapBoolDouble) Reset() {
	*x = MapBoolDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolDouble) ProtoMessage() {}

func (x *MapBoolDouble) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolDouble.ProtoReflect.Descriptor instead.
func (*MapBoolDouble) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{45}
}

func (x *MapBoolDouble) GetValue() map[bool]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, float>`.
type MapBoolFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, float> value.
	Value map[bool]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapBoolFloat) Reset() {
	*x = MapBoolFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolFloat) ProtoMessage() {}

func (x *MapBoolFloat) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolFloat.ProtoReflect.Descriptor instead.
func (*MapBoolFloat) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{46}
}

func (x *MapBoolFloat) GetValue() map[bool]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, int64>`.
type MapBoolInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, int64> value.
	Value map[bool]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolInt64) Reset() {
	*x = MapBoolInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolInt64) ProtoMessage() {}

func (x *MapBoolInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolInt64.ProtoReflect.Descriptor instead.
func (*MapBoolInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{47}
}

func (x *MapBoolInt64) GetValue() map[bool]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, uint64>`.
type MapBoolUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, uint64> value.
	Value map[bool]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolUInt64) Reset() {
	*x = MapBoolUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolUInt64) ProtoMessage() {}

func (x *MapBoolUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolUInt64.ProtoReflect.Descriptor instead.
func (*MapBoolUInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{48}
}

func (x *MapBoolUInt64) GetValue() map[bool]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, int32>`.
type MapBoolInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, int32> value.
	Value map[bool]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolInt32) Reset() {
	*x = MapBoolInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolInt32) ProtoMessage() {}

func (x *MapBoolInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolInt32.ProtoReflect.Descriptor instead.
func (*MapBoolInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{49}
}

func (x *MapBoolInt32) GetValue() map[bool]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, uint32>`.
type MapBoolUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, uint32> value.
	Value map[bool]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolUInt32) Reset() {
	*x = MapBoolUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolUInt32) ProtoMessage() {}

func (x *MapBoolUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolUInt32.ProtoReflect.Descriptor instead.
func (*MapBoolUInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{50}
}

func (x *MapBoolUInt32) GetValue() map[bool]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, bool>`.
type MapBoolBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, bool> value.
	Value map[bool]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapBoolBool) Reset() {
	*x = MapBoolBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolBool) ProtoMessage() {}

func (x *MapBoolBool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolBool.ProtoReflect.Descriptor instead.
func (*MapBoolBool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{51}
}

func (x *MapBoolBool) GetValue() map[bool]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, string>`.
type MapBoolString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, string> value.
	Value map[bool]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapBoolString) Reset() {
	*x = MapBoolString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolString) ProtoMessage() {}

func (x *MapBoolString) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolString.ProtoReflect.Descriptor instead.
func (*MapBoolString) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{52}
}

func (x *MapBoolString) GetValue() map[bool]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<bool, bytes>`.
type MapBoolBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<bool, bytes> value.
	Value map[bool][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapBoolBytes) Reset() {
	*x = MapBoolBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapBoolBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapBoolBytes) ProtoMessage() {}

func (x *MapBoolBytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapBoolBytes.ProtoReflect.Descriptor instead.
func (*MapBoolBytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{53}
}

func (x *MapBoolBytes) GetValue() map[bool][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, double>`.
type MapStringDouble struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, double> value.
	Value map[string]float64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
}

func (x *MapStringDouble) Reset() {
	*x = MapStringDouble{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringDouble) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringDouble) ProtoMessage() {}

func (x *MapStringDouble) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringDouble.ProtoReflect.Descriptor instead.
func (*MapStringDouble) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{54}
}

func (x *MapStringDouble) GetValue() map[string]float64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, float>`.
type MapStringFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, float> value.
	Value map[string]float32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed32,2,opt,name=value,proto3"`
}

func (x *MapStringFloat) Reset() {
	*x = MapStringFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringFloat) ProtoMessage() {}

func (x *MapStringFloat) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringFloat.ProtoReflect.Descriptor instead.
func (*MapStringFloat) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{55}
}

func (x *MapStringFloat) GetValue() map[string]float32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, int64>`.
type MapStringInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, int64> value.
	Value map[string]int64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapStringInt64) Reset() {
	*x = MapStringInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringInt64) ProtoMessage() {}

func (x *MapStringInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringInt64.ProtoReflect.Descriptor instead.
func (*MapStringInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{56}
}

func (x *MapStringInt64) GetValue() map[string]int64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, uint64>`.
type MapStringUInt64 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, uint64> value.
	Value map[string]uint64 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapStringUInt64) Reset() {
	*x = MapStringUInt64{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringUInt64) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringUInt64) ProtoMessage() {}

func (x *MapStringUInt64) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringUInt64.ProtoReflect.Descriptor instead.
func (*MapStringUInt64) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{57}
}

func (x *MapStringUInt64) GetValue() map[string]uint64 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, int32>`.
type MapStringInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, int32> value.
	Value map[string]int32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapStringInt32) Reset() {
	*x = MapStringInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringInt32) ProtoMessage() {}

func (x *MapStringInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringInt32.ProtoReflect.Descriptor instead.
func (*MapStringInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{58}
}

func (x *MapStringInt32) GetValue() map[string]int32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, uint32>`.
type MapStringUInt32 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, uint32> value.
	Value map[string]uint32 `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapStringUInt32) Reset() {
	*x = MapStringUInt32{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringUInt32) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringUInt32) ProtoMessage() {}

func (x *MapStringUInt32) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringUInt32.ProtoReflect.Descriptor instead.
func (*MapStringUInt32) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{59}
}

func (x *MapStringUInt32) GetValue() map[string]uint32 {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, bool>`.
type MapStringBool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, bool> value.
	Value map[string]bool `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapStringBool) Reset() {
	*x = MapStringBool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringBool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringBool) ProtoMessage() {}

func (x *MapStringBool) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringBool.ProtoReflect.Descriptor instead.
func (*MapStringBool) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{60}
}

func (x *MapStringBool) GetValue() map[string]bool {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, string>`.
type MapStringString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, string> value.
	Value map[string]string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringString) Reset() {
	*x = MapStringString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringString) ProtoMessage() {}

func (x *MapStringString) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringString.ProtoReflect.Descriptor instead.
func (*MapStringString) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{61}
}

func (x *MapStringString) GetValue() map[string]string {
	if x != nil {
		return x.Value
	}
	return nil
}

// Wrapper message for `map<string, bytes>`.
type MapStringBytes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The map<string, bytes> value.
	Value map[string][]byte `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringBytes) Reset() {
	*x = MapStringBytes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fmp_wrappers_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapStringBytes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringBytes) ProtoMessage() {}

func (x *MapStringBytes) ProtoReflect() protoreflect.Message {
	mi := &file_fmp_wrappers_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringBytes.ProtoReflect.Descriptor instead.
func (*MapStringBytes) Descriptor() ([]byte, []int) {
	return file_fmp_wrappers_proto_rawDescGZIP(), []int{62}
}

func (x *MapStringBytes) GetValue() map[string][]byte {
	if x != nil {
		return x.Value
	}
	return nil
}

var File_fmp_wrappers_proto protoreflect.FileDescriptor

var file_fmp_wrappers_proto_rawDesc = []byte{
	0x0a, 0x12, 0x66, 0x6d, 0x70, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x66, 0x6d, 0x70, 0x22, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26,
	0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x24, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x26, 0x0a, 0x0e,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x25, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x80, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e,
	0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80,
	0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d,
	0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d,
	0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x34, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01,
	0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61,
	0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a,
	0x0d, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x33,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x6f, 0x6f,
	0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01,
	0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c,
	0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x32,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d,
	0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x35,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61,
	0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a,
	0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a,
	0x0e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x7c, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12,
	0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a,
	0x0c, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x32, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66,
	0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d,
	0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0c, 0x4d,
	0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70,
	0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a,
	0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7a, 0x0a, 0x0b, 0x4d, 0x61, 0x70,
	0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x6f, 0x6f, 0x6c, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x33, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42,
	0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7c, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x42, 0x6f,
	0x6f, 0x6c, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x2e, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38,
	0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x34,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82,
	0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x66, 0x6d, 0x70, 0x2e,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7e, 0x0a, 0x0d, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x33, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66, 0x6d,
	0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x6f, 0x6c, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x01, 0x0a, 0x0f,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x35, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x80, 0x01, 0x0a, 0x0e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x6d, 0x70, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x38, 0x0a, 0x0a, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x16, 0x5a, 0x14, 0x61, 0x72, 0x69, 0x73, 0x74, 0x61, 0x2f, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x66, 0x6d, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_fmp_wrappers_proto_rawDescOnce sync.Once
	file_fmp_wrappers_proto_rawDescData = file_fmp_wrappers_proto_rawDesc
)

func file_fmp_wrappers_proto_rawDescGZIP() []byte {
	file_fmp_wrappers_proto_rawDescOnce.Do(func() {
		file_fmp_wrappers_proto_rawDescData = protoimpl.X.CompressGZIP(file_fmp_wrappers_proto_rawDescData)
	})
	return file_fmp_wrappers_proto_rawDescData
}

var file_fmp_wrappers_proto_msgTypes = make([]protoimpl.MessageInfo, 117)
var file_fmp_wrappers_proto_goTypes = []interface{}{
	(*RepeatedDouble)(nil),  // 0: fmp.RepeatedDouble
	(*RepeatedFloat)(nil),   // 1: fmp.RepeatedFloat
	(*RepeatedInt64)(nil),   // 2: fmp.RepeatedInt64
	(*RepeatedUInt64)(nil),  // 3: fmp.RepeatedUInt64
	(*RepeatedInt32)(nil),   // 4: fmp.RepeatedInt32
	(*RepeatedUInt32)(nil),  // 5: fmp.RepeatedUInt32
	(*RepeatedBool)(nil),    // 6: fmp.RepeatedBool
	(*RepeatedString)(nil),  // 7: fmp.RepeatedString
	(*RepeatedBytes)(nil),   // 8: fmp.RepeatedBytes
	(*MapInt64Double)(nil),  // 9: fmp.MapInt64Double
	(*MapInt64Float)(nil),   // 10: fmp.MapInt64Float
	(*MapInt64Int64)(nil),   // 11: fmp.MapInt64Int64
	(*MapInt64UInt64)(nil),  // 12: fmp.MapInt64UInt64
	(*MapInt64Int32)(nil),   // 13: fmp.MapInt64Int32
	(*MapInt64UInt32)(nil),  // 14: fmp.MapInt64UInt32
	(*MapInt64Bool)(nil),    // 15: fmp.MapInt64Bool
	(*MapInt64String)(nil),  // 16: fmp.MapInt64String
	(*MapInt64Bytes)(nil),   // 17: fmp.MapInt64Bytes
	(*MapUInt64Double)(nil), // 18: fmp.MapUInt64Double
	(*MapUInt64Float)(nil),  // 19: fmp.MapUInt64Float
	(*MapUInt64Int64)(nil),  // 20: fmp.MapUInt64Int64
	(*MapUInt64UInt64)(nil), // 21: fmp.MapUInt64UInt64
	(*MapUInt64Int32)(nil),  // 22: fmp.MapUInt64Int32
	(*MapUInt64UInt32)(nil), // 23: fmp.MapUInt64UInt32
	(*MapUInt64Bool)(nil),   // 24: fmp.MapUInt64Bool
	(*MapUInt64String)(nil), // 25: fmp.MapUInt64String
	(*MapUInt64Bytes)(nil),  // 26: fmp.MapUInt64Bytes
	(*MapInt32Double)(nil),  // 27: fmp.MapInt32Double
	(*MapInt32Float)(nil),   // 28: fmp.MapInt32Float
	(*MapInt32Int64)(nil),   // 29: fmp.MapInt32Int64
	(*MapInt32UInt64)(nil),  // 30: fmp.MapInt32UInt64
	(*MapInt32Int32)(nil),   // 31: fmp.MapInt32Int32
	(*MapInt32UInt32)(nil),  // 32: fmp.MapInt32UInt32
	(*MapInt32Bool)(nil),    // 33: fmp.MapInt32Bool
	(*MapInt32String)(nil),  // 34: fmp.MapInt32String
	(*MapInt32Bytes)(nil),   // 35: fmp.MapInt32Bytes
	(*MapUInt32Double)(nil), // 36: fmp.MapUInt32Double
	(*MapUInt32Float)(nil),  // 37: fmp.MapUInt32Float
	(*MapUInt32Int64)(nil),  // 38: fmp.MapUInt32Int64
	(*MapUInt32UInt64)(nil), // 39: fmp.MapUInt32UInt64
	(*MapUInt32Int32)(nil),  // 40: fmp.MapUInt32Int32
	(*MapUInt32UInt32)(nil), // 41: fmp.MapUInt32UInt32
	(*MapUInt32Bool)(nil),   // 42: fmp.MapUInt32Bool
	(*MapUInt32String)(nil), // 43: fmp.MapUInt32String
	(*MapUInt32Bytes)(nil),  // 44: fmp.MapUInt32Bytes
	(*MapBoolDouble)(nil),   // 45: fmp.MapBoolDouble
	(*MapBoolFloat)(nil),    // 46: fmp.MapBoolFloat
	(*MapBoolInt64)(nil),    // 47: fmp.MapBoolInt64
	(*MapBoolUInt64)(nil),   // 48: fmp.MapBoolUInt64
	(*MapBoolInt32)(nil),    // 49: fmp.MapBoolInt32
	(*MapBoolUInt32)(nil),   // 50: fmp.MapBoolUInt32
	(*MapBoolBool)(nil),     // 51: fmp.MapBoolBool
	(*MapBoolString)(nil),   // 52: fmp.MapBoolString
	(*MapBoolBytes)(nil),    // 53: fmp.MapBoolBytes
	(*MapStringDouble)(nil), // 54: fmp.MapStringDouble
	(*MapStringFloat)(nil),  // 55: fmp.MapStringFloat
	(*MapStringInt64)(nil),  // 56: fmp.MapStringInt64
	(*MapStringUInt64)(nil), // 57: fmp.MapStringUInt64
	(*MapStringInt32)(nil),  // 58: fmp.MapStringInt32
	(*MapStringUInt32)(nil), // 59: fmp.MapStringUInt32
	(*MapStringBool)(nil),   // 60: fmp.MapStringBool
	(*MapStringString)(nil), // 61: fmp.MapStringString
	(*MapStringBytes)(nil),  // 62: fmp.MapStringBytes
	nil,                     // 63: fmp.MapInt64Double.ValueEntry
	nil,                     // 64: fmp.MapInt64Float.ValueEntry
	nil,                     // 65: fmp.MapInt64Int64.ValueEntry
	nil,                     // 66: fmp.MapInt64UInt64.ValueEntry
	nil,                     // 67: fmp.MapInt64Int32.ValueEntry
	nil,                     // 68: fmp.MapInt64UInt32.ValueEntry
	nil,                     // 69: fmp.MapInt64Bool.ValueEntry
	nil,                     // 70: fmp.MapInt64String.ValueEntry
	nil,                     // 71: fmp.MapInt64Bytes.ValueEntry
	nil,                     // 72: fmp.MapUInt64Double.ValueEntry
	nil,                     // 73: fmp.MapUInt64Float.ValueEntry
	nil,                     // 74: fmp.MapUInt64Int64.ValueEntry
	nil,                     // 75: fmp.MapUInt64UInt64.ValueEntry
	nil,                     // 76: fmp.MapUInt64Int32.ValueEntry
	nil,                     // 77: fmp.MapUInt64UInt32.ValueEntry
	nil,                     // 78: fmp.MapUInt64Bool.ValueEntry
	nil,                     // 79: fmp.MapUInt64String.ValueEntry
	nil,                     // 80: fmp.MapUInt64Bytes.ValueEntry
	nil,                     // 81: fmp.MapInt32Double.ValueEntry
	nil,                     // 82: fmp.MapInt32Float.ValueEntry
	nil,                     // 83: fmp.MapInt32Int64.ValueEntry
	nil,                     // 84: fmp.MapInt32UInt64.ValueEntry
	nil,                     // 85: fmp.MapInt32Int32.ValueEntry
	nil,                     // 86: fmp.MapInt32UInt32.ValueEntry
	nil,                     // 87: fmp.MapInt32Bool.ValueEntry
	nil,                     // 88: fmp.MapInt32String.ValueEntry
	nil,                     // 89: fmp.MapInt32Bytes.ValueEntry
	nil,                     // 90: fmp.MapUInt32Double.ValueEntry
	nil,                     // 91: fmp.MapUInt32Float.ValueEntry
	nil,                     // 92: fmp.MapUInt32Int64.ValueEntry
	nil,                     // 93: fmp.MapUInt32UInt64.ValueEntry
	nil,                     // 94: fmp.MapUInt32Int32.ValueEntry
	nil,                     // 95: fmp.MapUInt32UInt32.ValueEntry
	nil,                     // 96: fmp.MapUInt32Bool.ValueEntry
	nil,                     // 97: fmp.MapUInt32String.ValueEntry
	nil,                     // 98: fmp.MapUInt32Bytes.ValueEntry
	nil,                     // 99: fmp.MapBoolDouble.ValueEntry
	nil,                     // 100: fmp.MapBoolFloat.ValueEntry
	nil,                     // 101: fmp.MapBoolInt64.ValueEntry
	nil,                     // 102: fmp.MapBoolUInt64.ValueEntry
	nil,                     // 103: fmp.MapBoolInt32.ValueEntry
	nil,                     // 104: fmp.MapBoolUInt32.ValueEntry
	nil,                     // 105: fmp.MapBoolBool.ValueEntry
	nil,                     // 106: fmp.MapBoolString.ValueEntry
	nil,                     // 107: fmp.MapBoolBytes.ValueEntry
	nil,                     // 108: fmp.MapStringDouble.ValueEntry
	nil,                     // 109: fmp.MapStringFloat.ValueEntry
	nil,                     // 110: fmp.MapStringInt64.ValueEntry
	nil,                     // 111: fmp.MapStringUInt64.ValueEntry
	nil,                     // 112: fmp.MapStringInt32.ValueEntry
	nil,                     // 113: fmp.MapStringUInt32.ValueEntry
	nil,                     // 114: fmp.MapStringBool.ValueEntry
	nil,                     // 115: fmp.MapStringString.ValueEntry
	nil,                     // 116: fmp.MapStringBytes.ValueEntry
}
var file_fmp_wrappers_proto_depIdxs = []int32{
	63,  // 0: fmp.MapInt64Double.value:type_name -> fmp.MapInt64Double.ValueEntry
	64,  // 1: fmp.MapInt64Float.value:type_name -> fmp.MapInt64Float.ValueEntry
	65,  // 2: fmp.MapInt64Int64.value:type_name -> fmp.MapInt64Int64.ValueEntry
	66,  // 3: fmp.MapInt64UInt64.value:type_name -> fmp.MapInt64UInt64.ValueEntry
	67,  // 4: fmp.MapInt64Int32.value:type_name -> fmp.MapInt64Int32.ValueEntry
	68,  // 5: fmp.MapInt64UInt32.value:type_name -> fmp.MapInt64UInt32.ValueEntry
	69,  // 6: fmp.MapInt64Bool.value:type_name -> fmp.MapInt64Bool.ValueEntry
	70,  // 7: fmp.MapInt64String.value:type_name -> fmp.MapInt64String.ValueEntry
	71,  // 8: fmp.MapInt64Bytes.value:type_name -> fmp.MapInt64Bytes.ValueEntry
	72,  // 9: fmp.MapUInt64Double.value:type_name -> fmp.MapUInt64Double.ValueEntry
	73,  // 10: fmp.MapUInt64Float.value:type_name -> fmp.MapUInt64Float.ValueEntry
	74,  // 11: fmp.MapUInt64Int64.value:type_name -> fmp.MapUInt64Int64.ValueEntry
	75,  // 12: fmp.MapUInt64UInt64.value:type_name -> fmp.MapUInt64UInt64.ValueEntry
	76,  // 13: fmp.MapUInt64Int32.value:type_name -> fmp.MapUInt64Int32.ValueEntry
	77,  // 14: fmp.MapUInt64UInt32.value:type_name -> fmp.MapUInt64UInt32.ValueEntry
	78,  // 15: fmp.MapUInt64Bool.value:type_name -> fmp.MapUInt64Bool.ValueEntry
	79,  // 16: fmp.MapUInt64String.value:type_name -> fmp.MapUInt64String.ValueEntry
	80,  // 17: fmp.MapUInt64Bytes.value:type_name -> fmp.MapUInt64Bytes.ValueEntry
	81,  // 18: fmp.MapInt32Double.value:type_name -> fmp.MapInt32Double.ValueEntry
	82,  // 19: fmp.MapInt32Float.value:type_name -> fmp.MapInt32Float.ValueEntry
	83,  // 20: fmp.MapInt32Int64.value:type_name -> fmp.MapInt32Int64.ValueEntry
	84,  // 21: fmp.MapInt32UInt64.value:type_name -> fmp.MapInt32UInt64.ValueEntry
	85,  // 22: fmp.MapInt32Int32.value:type_name -> fmp.MapInt32Int32.ValueEntry
	86,  // 23: fmp.MapInt32UInt32.value:type_name -> fmp.MapInt32UInt32.ValueEntry
	87,  // 24: fmp.MapInt32Bool.value:type_name -> fmp.MapInt32Bool.ValueEntry
	88,  // 25: fmp.MapInt32String.value:type_name -> fmp.MapInt32String.ValueEntry
	89,  // 26: fmp.MapInt32Bytes.value:type_name -> fmp.MapInt32Bytes.ValueEntry
	90,  // 27: fmp.MapUInt32Double.value:type_name -> fmp.MapUInt32Double.ValueEntry
	91,  // 28: fmp.MapUInt32Float.value:type_name -> fmp.MapUInt32Float.ValueEntry
	92,  // 29: fmp.MapUInt32Int64.value:type_name -> fmp.MapUInt32Int64.ValueEntry
	93,  // 30: fmp.MapUInt32UInt64.value:type_name -> fmp.MapUInt32UInt64.ValueEntry
	94,  // 31: fmp.MapUInt32Int32.value:type_name -> fmp.MapUInt32Int32.ValueEntry
	95,  // 32: fmp.MapUInt32UInt32.value:type_name -> fmp.MapUInt32UInt32.ValueEntry
	96,  // 33: fmp.MapUInt32Bool.value:type_name -> fmp.MapUInt32Bool.ValueEntry
	97,  // 34: fmp.MapUInt32String.value:type_name -> fmp.MapUInt32String.ValueEntry
	98,  // 35: fmp.MapUInt32Bytes.value:type_name -> fmp.MapUInt32Bytes.ValueEntry
	99,  // 36: fmp.MapBoolDouble.value:type_name -> fmp.MapBoolDouble.ValueEntry
	100, // 37: fmp.MapBoolFloat.value:type_name -> fmp.MapBoolFloat.ValueEntry
	101, // 38: fmp.MapBoolInt64.value:type_name -> fmp.MapBoolInt64.ValueEntry
	102, // 39: fmp.MapBoolUInt64.value:type_name -> fmp.MapBoolUInt64.ValueEntry
	103, // 40: fmp.MapBoolInt32.value:type_name -> fmp.MapBoolInt32.ValueEntry
	104, // 41: fmp.MapBoolUInt32.value:type_name -> fmp.MapBoolUInt32.ValueEntry
	105, // 42: fmp.MapBoolBool.value:type_name -> fmp.MapBoolBool.ValueEntry
	106, // 43: fmp.MapBoolString.value:type_name -> fmp.MapBoolString.ValueEntry
	107, // 44: fmp.MapBoolBytes.value:type_name -> fmp.MapBoolBytes.ValueEntry
	108, // 45: fmp.MapStringDouble.value:type_name -> fmp.MapStringDouble.ValueEntry
	109, // 46: fmp.MapStringFloat.value:type_name -> fmp.MapStringFloat.ValueEntry
	110, // 47: fmp.MapStringInt64.value:type_name -> fmp.MapStringInt64.ValueEntry
	111, // 48: fmp.MapStringUInt64.value:type_name -> fmp.MapStringUInt64.ValueEntry
	112, // 49: fmp.MapStringInt32.value:type_name -> fmp.MapStringInt32.ValueEntry
	113, // 50: fmp.MapStringUInt32.value:type_name -> fmp.MapStringUInt32.ValueEntry
	114, // 51: fmp.MapStringBool.value:type_name -> fmp.MapStringBool.ValueEntry
	115, // 52: fmp.MapStringString.value:type_name -> fmp.MapStringString.ValueEntry
	116, // 53: fmp.MapStringBytes.value:type_name -> fmp.MapStringBytes.ValueEntry
	54,  // [54:54] is the sub-list for method output_type
	54,  // [54:54] is the sub-list for method input_type
	54,  // [54:54] is the sub-list for extension type_name
	54,  // [54:54] is the sub-list for extension extendee
	0,   // [0:54] is the sub-list for field type_name
}

func init() { file_fmp_wrappers_proto_init() }
func file_fmp_wrappers_proto_init() {
	if File_fmp_wrappers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fmp_wrappers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepeatedBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64UInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64UInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt64Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64UInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64UInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt64Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32UInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32UInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapInt32Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Double); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Float); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Int64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32UInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Int32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32UInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Bool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32String); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapUInt32Bytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapBoolBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringDouble); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringUInt64); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringUInt32); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringBool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fmp_wrappers_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapStringBytes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fmp_wrappers_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   117,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_fmp_wrappers_proto_goTypes,
		DependencyIndexes: file_fmp_wrappers_proto_depIdxs,
		MessageInfos:      file_fmp_wrappers_proto_msgTypes,
	}.Build()
	File_fmp_wrappers_proto = out.File
	file_fmp_wrappers_proto_rawDesc = nil
	file_fmp_wrappers_proto_goTypes = nil
	file_fmp_wrappers_proto_depIdxs = nil
}
