// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aristanetworks/clock (interfaces: Clock,Ticker,Timer)

// Package mock is a generated GoMock package.
package mock

import (
	clock "github.com/aristanetworks/clock"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockClock is a mock of Clock interface
type MockClock struct {
	ctrl     *gomock.Controller
	recorder *MockClockMockRecorder
}

// MockClockMockRecorder is the mock recorder for MockClock
type MockClockMockRecorder struct {
	mock *MockClock
}

// NewMockClock creates a new mock instance
func NewMockClock(ctrl *gomock.Controller) *MockClock {
	mock := &MockClock{ctrl: ctrl}
	mock.recorder = &MockClockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClock) EXPECT() *MockClockMockRecorder {
	return m.recorder
}

// After mocks base method
func (m *MockClock) After(arg0 time.Duration) <-chan time.Time {
	ret := m.ctrl.Call(m, "After", arg0)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// After indicates an expected call of After
func (mr *MockClockMockRecorder) After(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "After", reflect.TypeOf((*MockClock)(nil).After), arg0)
}

// AfterFunc mocks base method
func (m *MockClock) AfterFunc(arg0 time.Duration, arg1 func()) clock.Timer {
	ret := m.ctrl.Call(m, "AfterFunc", arg0, arg1)
	ret0, _ := ret[0].(clock.Timer)
	return ret0
}

// AfterFunc indicates an expected call of AfterFunc
func (mr *MockClockMockRecorder) AfterFunc(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterFunc", reflect.TypeOf((*MockClock)(nil).AfterFunc), arg0, arg1)
}

// Now mocks base method
func (m *MockClock) Now() time.Time {
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now
func (mr *MockClockMockRecorder) Now() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockClock)(nil).Now))
}

// Since mocks base method
func (m *MockClock) Since(arg0 time.Time) time.Duration {
	ret := m.ctrl.Call(m, "Since", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// Since indicates an expected call of Since
func (mr *MockClockMockRecorder) Since(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Since", reflect.TypeOf((*MockClock)(nil).Since), arg0)
}

// Sleep mocks base method
func (m *MockClock) Sleep(arg0 time.Duration) {
	m.ctrl.Call(m, "Sleep", arg0)
}

// Sleep indicates an expected call of Sleep
func (mr *MockClockMockRecorder) Sleep(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MockClock)(nil).Sleep), arg0)
}

// Tick mocks base method
func (m *MockClock) Tick(arg0 time.Duration) <-chan time.Time {
	ret := m.ctrl.Call(m, "Tick", arg0)
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// Tick indicates an expected call of Tick
func (mr *MockClockMockRecorder) Tick(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tick", reflect.TypeOf((*MockClock)(nil).Tick), arg0)
}

// Ticker mocks base method
func (m *MockClock) Ticker(arg0 time.Duration) clock.Ticker {
	ret := m.ctrl.Call(m, "Ticker", arg0)
	ret0, _ := ret[0].(clock.Ticker)
	return ret0
}

// Ticker indicates an expected call of Ticker
func (mr *MockClockMockRecorder) Ticker(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ticker", reflect.TypeOf((*MockClock)(nil).Ticker), arg0)
}

// Timer mocks base method
func (m *MockClock) Timer(arg0 time.Duration) clock.Timer {
	ret := m.ctrl.Call(m, "Timer", arg0)
	ret0, _ := ret[0].(clock.Timer)
	return ret0
}

// Timer indicates an expected call of Timer
func (mr *MockClockMockRecorder) Timer(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timer", reflect.TypeOf((*MockClock)(nil).Timer), arg0)
}

// MockTicker is a mock of Ticker interface
type MockTicker struct {
	ctrl     *gomock.Controller
	recorder *MockTickerMockRecorder
}

// MockTickerMockRecorder is the mock recorder for MockTicker
type MockTickerMockRecorder struct {
	mock *MockTicker
}

// NewMockTicker creates a new mock instance
func NewMockTicker(ctrl *gomock.Controller) *MockTicker {
	mock := &MockTicker{ctrl: ctrl}
	mock.recorder = &MockTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTicker) EXPECT() *MockTickerMockRecorder {
	return m.recorder
}

// C mocks base method
func (m *MockTicker) C() <-chan time.Time {
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// C indicates an expected call of C
func (mr *MockTickerMockRecorder) C() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockTicker)(nil).C))
}

// Stop mocks base method
func (m *MockTicker) Stop() {
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop
func (mr *MockTickerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTicker)(nil).Stop))
}

// MockTimer is a mock of Timer interface
type MockTimer struct {
	ctrl     *gomock.Controller
	recorder *MockTimerMockRecorder
}

// MockTimerMockRecorder is the mock recorder for MockTimer
type MockTimerMockRecorder struct {
	mock *MockTimer
}

// NewMockTimer creates a new mock instance
func NewMockTimer(ctrl *gomock.Controller) *MockTimer {
	mock := &MockTimer{ctrl: ctrl}
	mock.recorder = &MockTimerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTimer) EXPECT() *MockTimerMockRecorder {
	return m.recorder
}

// C mocks base method
func (m *MockTimer) C() <-chan time.Time {
	ret := m.ctrl.Call(m, "C")
	ret0, _ := ret[0].(<-chan time.Time)
	return ret0
}

// C indicates an expected call of C
func (mr *MockTimerMockRecorder) C() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "C", reflect.TypeOf((*MockTimer)(nil).C))
}

// Reset mocks base method
func (m *MockTimer) Reset(arg0 time.Duration) bool {
	ret := m.ctrl.Call(m, "Reset", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Reset indicates an expected call of Reset
func (mr *MockTimerMockRecorder) Reset(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockTimer)(nil).Reset), arg0)
}

// Stop mocks base method
func (m *MockTimer) Stop() bool {
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockTimerMockRecorder) Stop() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTimer)(nil).Stop))
}
